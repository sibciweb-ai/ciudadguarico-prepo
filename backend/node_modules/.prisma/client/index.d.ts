
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Seccion
 * 
 */
export type Seccion = $Result.DefaultSelection<Prisma.$SeccionPayload>
/**
 * Model Rol
 * 
 */
export type Rol = $Result.DefaultSelection<Prisma.$RolPayload>
/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model UsuarioRol
 * 
 */
export type UsuarioRol = $Result.DefaultSelection<Prisma.$UsuarioRolPayload>
/**
 * Model Columnista
 * 
 */
export type Columnista = $Result.DefaultSelection<Prisma.$ColumnistaPayload>
/**
 * Model Editorial
 * 
 */
export type Editorial = $Result.DefaultSelection<Prisma.$EditorialPayload>
/**
 * Model Opinion
 * 
 */
export type Opinion = $Result.DefaultSelection<Prisma.$OpinionPayload>
/**
 * Model Media
 * 
 */
export type Media = $Result.DefaultSelection<Prisma.$MediaPayload>
/**
 * Model Noticia
 * 
 */
export type Noticia = $Result.DefaultSelection<Prisma.$NoticiaPayload>
/**
 * Model NoticiaMedia
 * 
 */
export type NoticiaMedia = $Result.DefaultSelection<Prisma.$NoticiaMediaPayload>
/**
 * Model PDF
 * 
 */
export type PDF = $Result.DefaultSelection<Prisma.$PDFPayload>
/**
 * Model View
 * 
 */
export type View = $Result.DefaultSelection<Prisma.$ViewPayload>
/**
 * Model ContenidoDestacado
 * 
 */
export type ContenidoDestacado = $Result.DefaultSelection<Prisma.$ContenidoDestacadoPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const MediaTipo: {
  imagen: 'imagen',
  video: 'video',
  pdf: 'pdf'
};

export type MediaTipo = (typeof MediaTipo)[keyof typeof MediaTipo]

}

export type MediaTipo = $Enums.MediaTipo

export const MediaTipo: typeof $Enums.MediaTipo

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Seccions
 * const seccions = await prisma.seccion.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Seccions
   * const seccions = await prisma.seccion.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.seccion`: Exposes CRUD operations for the **Seccion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Seccions
    * const seccions = await prisma.seccion.findMany()
    * ```
    */
  get seccion(): Prisma.SeccionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rol`: Exposes CRUD operations for the **Rol** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rols
    * const rols = await prisma.rol.findMany()
    * ```
    */
  get rol(): Prisma.RolDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.usuarioRol`: Exposes CRUD operations for the **UsuarioRol** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsuarioRols
    * const usuarioRols = await prisma.usuarioRol.findMany()
    * ```
    */
  get usuarioRol(): Prisma.UsuarioRolDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.columnista`: Exposes CRUD operations for the **Columnista** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Columnistas
    * const columnistas = await prisma.columnista.findMany()
    * ```
    */
  get columnista(): Prisma.ColumnistaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.editorial`: Exposes CRUD operations for the **Editorial** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Editorials
    * const editorials = await prisma.editorial.findMany()
    * ```
    */
  get editorial(): Prisma.EditorialDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.opinion`: Exposes CRUD operations for the **Opinion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Opinions
    * const opinions = await prisma.opinion.findMany()
    * ```
    */
  get opinion(): Prisma.OpinionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.media`: Exposes CRUD operations for the **Media** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Media
    * const media = await prisma.media.findMany()
    * ```
    */
  get media(): Prisma.MediaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.noticia`: Exposes CRUD operations for the **Noticia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Noticias
    * const noticias = await prisma.noticia.findMany()
    * ```
    */
  get noticia(): Prisma.NoticiaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.noticiaMedia`: Exposes CRUD operations for the **NoticiaMedia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NoticiaMedias
    * const noticiaMedias = await prisma.noticiaMedia.findMany()
    * ```
    */
  get noticiaMedia(): Prisma.NoticiaMediaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pDF`: Exposes CRUD operations for the **PDF** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PDFS
    * const pDFS = await prisma.pDF.findMany()
    * ```
    */
  get pDF(): Prisma.PDFDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.view`: Exposes CRUD operations for the **View** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Views
    * const views = await prisma.view.findMany()
    * ```
    */
  get view(): Prisma.ViewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contenidoDestacado`: Exposes CRUD operations for the **ContenidoDestacado** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContenidoDestacados
    * const contenidoDestacados = await prisma.contenidoDestacado.findMany()
    * ```
    */
  get contenidoDestacado(): Prisma.ContenidoDestacadoDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.13.0
   * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Seccion: 'Seccion',
    Rol: 'Rol',
    Usuario: 'Usuario',
    UsuarioRol: 'UsuarioRol',
    Columnista: 'Columnista',
    Editorial: 'Editorial',
    Opinion: 'Opinion',
    Media: 'Media',
    Noticia: 'Noticia',
    NoticiaMedia: 'NoticiaMedia',
    PDF: 'PDF',
    View: 'View',
    ContenidoDestacado: 'ContenidoDestacado'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "seccion" | "rol" | "usuario" | "usuarioRol" | "columnista" | "editorial" | "opinion" | "media" | "noticia" | "noticiaMedia" | "pDF" | "view" | "contenidoDestacado"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Seccion: {
        payload: Prisma.$SeccionPayload<ExtArgs>
        fields: Prisma.SeccionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeccionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeccionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeccionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeccionPayload>
          }
          findFirst: {
            args: Prisma.SeccionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeccionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeccionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeccionPayload>
          }
          findMany: {
            args: Prisma.SeccionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeccionPayload>[]
          }
          create: {
            args: Prisma.SeccionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeccionPayload>
          }
          createMany: {
            args: Prisma.SeccionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SeccionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeccionPayload>[]
          }
          delete: {
            args: Prisma.SeccionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeccionPayload>
          }
          update: {
            args: Prisma.SeccionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeccionPayload>
          }
          deleteMany: {
            args: Prisma.SeccionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SeccionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SeccionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeccionPayload>[]
          }
          upsert: {
            args: Prisma.SeccionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeccionPayload>
          }
          aggregate: {
            args: Prisma.SeccionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeccion>
          }
          groupBy: {
            args: Prisma.SeccionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeccionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeccionCountArgs<ExtArgs>
            result: $Utils.Optional<SeccionCountAggregateOutputType> | number
          }
        }
      }
      Rol: {
        payload: Prisma.$RolPayload<ExtArgs>
        fields: Prisma.RolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RolFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RolFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolPayload>
          }
          findFirst: {
            args: Prisma.RolFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RolFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolPayload>
          }
          findMany: {
            args: Prisma.RolFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolPayload>[]
          }
          create: {
            args: Prisma.RolCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolPayload>
          }
          createMany: {
            args: Prisma.RolCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RolCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolPayload>[]
          }
          delete: {
            args: Prisma.RolDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolPayload>
          }
          update: {
            args: Prisma.RolUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolPayload>
          }
          deleteMany: {
            args: Prisma.RolDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RolUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RolUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolPayload>[]
          }
          upsert: {
            args: Prisma.RolUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolPayload>
          }
          aggregate: {
            args: Prisma.RolAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRol>
          }
          groupBy: {
            args: Prisma.RolGroupByArgs<ExtArgs>
            result: $Utils.Optional<RolGroupByOutputType>[]
          }
          count: {
            args: Prisma.RolCountArgs<ExtArgs>
            result: $Utils.Optional<RolCountAggregateOutputType> | number
          }
        }
      }
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsuarioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      UsuarioRol: {
        payload: Prisma.$UsuarioRolPayload<ExtArgs>
        fields: Prisma.UsuarioRolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioRolFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioRolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioRolFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioRolPayload>
          }
          findFirst: {
            args: Prisma.UsuarioRolFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioRolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioRolFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioRolPayload>
          }
          findMany: {
            args: Prisma.UsuarioRolFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioRolPayload>[]
          }
          create: {
            args: Prisma.UsuarioRolCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioRolPayload>
          }
          createMany: {
            args: Prisma.UsuarioRolCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioRolCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioRolPayload>[]
          }
          delete: {
            args: Prisma.UsuarioRolDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioRolPayload>
          }
          update: {
            args: Prisma.UsuarioRolUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioRolPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioRolDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioRolUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsuarioRolUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioRolPayload>[]
          }
          upsert: {
            args: Prisma.UsuarioRolUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioRolPayload>
          }
          aggregate: {
            args: Prisma.UsuarioRolAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuarioRol>
          }
          groupBy: {
            args: Prisma.UsuarioRolGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioRolGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioRolCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioRolCountAggregateOutputType> | number
          }
        }
      }
      Columnista: {
        payload: Prisma.$ColumnistaPayload<ExtArgs>
        fields: Prisma.ColumnistaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ColumnistaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnistaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ColumnistaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnistaPayload>
          }
          findFirst: {
            args: Prisma.ColumnistaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnistaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ColumnistaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnistaPayload>
          }
          findMany: {
            args: Prisma.ColumnistaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnistaPayload>[]
          }
          create: {
            args: Prisma.ColumnistaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnistaPayload>
          }
          createMany: {
            args: Prisma.ColumnistaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ColumnistaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnistaPayload>[]
          }
          delete: {
            args: Prisma.ColumnistaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnistaPayload>
          }
          update: {
            args: Prisma.ColumnistaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnistaPayload>
          }
          deleteMany: {
            args: Prisma.ColumnistaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ColumnistaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ColumnistaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnistaPayload>[]
          }
          upsert: {
            args: Prisma.ColumnistaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnistaPayload>
          }
          aggregate: {
            args: Prisma.ColumnistaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateColumnista>
          }
          groupBy: {
            args: Prisma.ColumnistaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ColumnistaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ColumnistaCountArgs<ExtArgs>
            result: $Utils.Optional<ColumnistaCountAggregateOutputType> | number
          }
        }
      }
      Editorial: {
        payload: Prisma.$EditorialPayload<ExtArgs>
        fields: Prisma.EditorialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EditorialFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EditorialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EditorialFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EditorialPayload>
          }
          findFirst: {
            args: Prisma.EditorialFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EditorialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EditorialFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EditorialPayload>
          }
          findMany: {
            args: Prisma.EditorialFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EditorialPayload>[]
          }
          create: {
            args: Prisma.EditorialCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EditorialPayload>
          }
          createMany: {
            args: Prisma.EditorialCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EditorialCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EditorialPayload>[]
          }
          delete: {
            args: Prisma.EditorialDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EditorialPayload>
          }
          update: {
            args: Prisma.EditorialUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EditorialPayload>
          }
          deleteMany: {
            args: Prisma.EditorialDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EditorialUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EditorialUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EditorialPayload>[]
          }
          upsert: {
            args: Prisma.EditorialUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EditorialPayload>
          }
          aggregate: {
            args: Prisma.EditorialAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEditorial>
          }
          groupBy: {
            args: Prisma.EditorialGroupByArgs<ExtArgs>
            result: $Utils.Optional<EditorialGroupByOutputType>[]
          }
          count: {
            args: Prisma.EditorialCountArgs<ExtArgs>
            result: $Utils.Optional<EditorialCountAggregateOutputType> | number
          }
        }
      }
      Opinion: {
        payload: Prisma.$OpinionPayload<ExtArgs>
        fields: Prisma.OpinionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OpinionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpinionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OpinionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpinionPayload>
          }
          findFirst: {
            args: Prisma.OpinionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpinionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OpinionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpinionPayload>
          }
          findMany: {
            args: Prisma.OpinionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpinionPayload>[]
          }
          create: {
            args: Prisma.OpinionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpinionPayload>
          }
          createMany: {
            args: Prisma.OpinionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OpinionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpinionPayload>[]
          }
          delete: {
            args: Prisma.OpinionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpinionPayload>
          }
          update: {
            args: Prisma.OpinionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpinionPayload>
          }
          deleteMany: {
            args: Prisma.OpinionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OpinionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OpinionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpinionPayload>[]
          }
          upsert: {
            args: Prisma.OpinionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpinionPayload>
          }
          aggregate: {
            args: Prisma.OpinionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOpinion>
          }
          groupBy: {
            args: Prisma.OpinionGroupByArgs<ExtArgs>
            result: $Utils.Optional<OpinionGroupByOutputType>[]
          }
          count: {
            args: Prisma.OpinionCountArgs<ExtArgs>
            result: $Utils.Optional<OpinionCountAggregateOutputType> | number
          }
        }
      }
      Media: {
        payload: Prisma.$MediaPayload<ExtArgs>
        fields: Prisma.MediaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MediaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MediaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          findFirst: {
            args: Prisma.MediaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MediaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          findMany: {
            args: Prisma.MediaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>[]
          }
          create: {
            args: Prisma.MediaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          createMany: {
            args: Prisma.MediaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MediaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>[]
          }
          delete: {
            args: Prisma.MediaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          update: {
            args: Prisma.MediaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          deleteMany: {
            args: Prisma.MediaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MediaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MediaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>[]
          }
          upsert: {
            args: Prisma.MediaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          aggregate: {
            args: Prisma.MediaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedia>
          }
          groupBy: {
            args: Prisma.MediaGroupByArgs<ExtArgs>
            result: $Utils.Optional<MediaGroupByOutputType>[]
          }
          count: {
            args: Prisma.MediaCountArgs<ExtArgs>
            result: $Utils.Optional<MediaCountAggregateOutputType> | number
          }
        }
      }
      Noticia: {
        payload: Prisma.$NoticiaPayload<ExtArgs>
        fields: Prisma.NoticiaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NoticiaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoticiaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload>
          }
          findFirst: {
            args: Prisma.NoticiaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoticiaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload>
          }
          findMany: {
            args: Prisma.NoticiaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload>[]
          }
          create: {
            args: Prisma.NoticiaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload>
          }
          createMany: {
            args: Prisma.NoticiaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NoticiaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload>[]
          }
          delete: {
            args: Prisma.NoticiaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload>
          }
          update: {
            args: Prisma.NoticiaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload>
          }
          deleteMany: {
            args: Prisma.NoticiaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NoticiaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NoticiaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload>[]
          }
          upsert: {
            args: Prisma.NoticiaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload>
          }
          aggregate: {
            args: Prisma.NoticiaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNoticia>
          }
          groupBy: {
            args: Prisma.NoticiaGroupByArgs<ExtArgs>
            result: $Utils.Optional<NoticiaGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoticiaCountArgs<ExtArgs>
            result: $Utils.Optional<NoticiaCountAggregateOutputType> | number
          }
        }
      }
      NoticiaMedia: {
        payload: Prisma.$NoticiaMediaPayload<ExtArgs>
        fields: Prisma.NoticiaMediaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NoticiaMediaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaMediaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoticiaMediaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaMediaPayload>
          }
          findFirst: {
            args: Prisma.NoticiaMediaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaMediaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoticiaMediaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaMediaPayload>
          }
          findMany: {
            args: Prisma.NoticiaMediaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaMediaPayload>[]
          }
          create: {
            args: Prisma.NoticiaMediaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaMediaPayload>
          }
          createMany: {
            args: Prisma.NoticiaMediaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NoticiaMediaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaMediaPayload>[]
          }
          delete: {
            args: Prisma.NoticiaMediaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaMediaPayload>
          }
          update: {
            args: Prisma.NoticiaMediaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaMediaPayload>
          }
          deleteMany: {
            args: Prisma.NoticiaMediaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NoticiaMediaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NoticiaMediaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaMediaPayload>[]
          }
          upsert: {
            args: Prisma.NoticiaMediaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaMediaPayload>
          }
          aggregate: {
            args: Prisma.NoticiaMediaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNoticiaMedia>
          }
          groupBy: {
            args: Prisma.NoticiaMediaGroupByArgs<ExtArgs>
            result: $Utils.Optional<NoticiaMediaGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoticiaMediaCountArgs<ExtArgs>
            result: $Utils.Optional<NoticiaMediaCountAggregateOutputType> | number
          }
        }
      }
      PDF: {
        payload: Prisma.$PDFPayload<ExtArgs>
        fields: Prisma.PDFFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PDFFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PDFFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload>
          }
          findFirst: {
            args: Prisma.PDFFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PDFFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload>
          }
          findMany: {
            args: Prisma.PDFFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload>[]
          }
          create: {
            args: Prisma.PDFCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload>
          }
          createMany: {
            args: Prisma.PDFCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PDFCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload>[]
          }
          delete: {
            args: Prisma.PDFDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload>
          }
          update: {
            args: Prisma.PDFUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload>
          }
          deleteMany: {
            args: Prisma.PDFDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PDFUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PDFUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload>[]
          }
          upsert: {
            args: Prisma.PDFUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload>
          }
          aggregate: {
            args: Prisma.PDFAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePDF>
          }
          groupBy: {
            args: Prisma.PDFGroupByArgs<ExtArgs>
            result: $Utils.Optional<PDFGroupByOutputType>[]
          }
          count: {
            args: Prisma.PDFCountArgs<ExtArgs>
            result: $Utils.Optional<PDFCountAggregateOutputType> | number
          }
        }
      }
      View: {
        payload: Prisma.$ViewPayload<ExtArgs>
        fields: Prisma.ViewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ViewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ViewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViewPayload>
          }
          findFirst: {
            args: Prisma.ViewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ViewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViewPayload>
          }
          findMany: {
            args: Prisma.ViewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViewPayload>[]
          }
          create: {
            args: Prisma.ViewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViewPayload>
          }
          createMany: {
            args: Prisma.ViewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ViewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViewPayload>[]
          }
          delete: {
            args: Prisma.ViewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViewPayload>
          }
          update: {
            args: Prisma.ViewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViewPayload>
          }
          deleteMany: {
            args: Prisma.ViewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ViewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ViewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViewPayload>[]
          }
          upsert: {
            args: Prisma.ViewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViewPayload>
          }
          aggregate: {
            args: Prisma.ViewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateView>
          }
          groupBy: {
            args: Prisma.ViewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ViewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ViewCountArgs<ExtArgs>
            result: $Utils.Optional<ViewCountAggregateOutputType> | number
          }
        }
      }
      ContenidoDestacado: {
        payload: Prisma.$ContenidoDestacadoPayload<ExtArgs>
        fields: Prisma.ContenidoDestacadoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContenidoDestacadoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenidoDestacadoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContenidoDestacadoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenidoDestacadoPayload>
          }
          findFirst: {
            args: Prisma.ContenidoDestacadoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenidoDestacadoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContenidoDestacadoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenidoDestacadoPayload>
          }
          findMany: {
            args: Prisma.ContenidoDestacadoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenidoDestacadoPayload>[]
          }
          create: {
            args: Prisma.ContenidoDestacadoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenidoDestacadoPayload>
          }
          createMany: {
            args: Prisma.ContenidoDestacadoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContenidoDestacadoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenidoDestacadoPayload>[]
          }
          delete: {
            args: Prisma.ContenidoDestacadoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenidoDestacadoPayload>
          }
          update: {
            args: Prisma.ContenidoDestacadoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenidoDestacadoPayload>
          }
          deleteMany: {
            args: Prisma.ContenidoDestacadoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContenidoDestacadoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContenidoDestacadoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenidoDestacadoPayload>[]
          }
          upsert: {
            args: Prisma.ContenidoDestacadoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenidoDestacadoPayload>
          }
          aggregate: {
            args: Prisma.ContenidoDestacadoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContenidoDestacado>
          }
          groupBy: {
            args: Prisma.ContenidoDestacadoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContenidoDestacadoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContenidoDestacadoCountArgs<ExtArgs>
            result: $Utils.Optional<ContenidoDestacadoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    seccion?: SeccionOmit
    rol?: RolOmit
    usuario?: UsuarioOmit
    usuarioRol?: UsuarioRolOmit
    columnista?: ColumnistaOmit
    editorial?: EditorialOmit
    opinion?: OpinionOmit
    media?: MediaOmit
    noticia?: NoticiaOmit
    noticiaMedia?: NoticiaMediaOmit
    pDF?: PDFOmit
    view?: ViewOmit
    contenidoDestacado?: ContenidoDestacadoOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SeccionCountOutputType
   */

  export type SeccionCountOutputType = {
    noticias: number
  }

  export type SeccionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    noticias?: boolean | SeccionCountOutputTypeCountNoticiasArgs
  }

  // Custom InputTypes
  /**
   * SeccionCountOutputType without action
   */
  export type SeccionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeccionCountOutputType
     */
    select?: SeccionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SeccionCountOutputType without action
   */
  export type SeccionCountOutputTypeCountNoticiasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoticiaWhereInput
  }


  /**
   * Count Type RolCountOutputType
   */

  export type RolCountOutputType = {
    usuarioRoles: number
  }

  export type RolCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuarioRoles?: boolean | RolCountOutputTypeCountUsuarioRolesArgs
  }

  // Custom InputTypes
  /**
   * RolCountOutputType without action
   */
  export type RolCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolCountOutputType
     */
    select?: RolCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RolCountOutputType without action
   */
  export type RolCountOutputTypeCountUsuarioRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioRolWhereInput
  }


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    usuarioRoles: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuarioRoles?: boolean | UsuarioCountOutputTypeCountUsuarioRolesArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountUsuarioRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioRolWhereInput
  }


  /**
   * Count Type ColumnistaCountOutputType
   */

  export type ColumnistaCountOutputType = {
    opiniones: number
  }

  export type ColumnistaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    opiniones?: boolean | ColumnistaCountOutputTypeCountOpinionesArgs
  }

  // Custom InputTypes
  /**
   * ColumnistaCountOutputType without action
   */
  export type ColumnistaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnistaCountOutputType
     */
    select?: ColumnistaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ColumnistaCountOutputType without action
   */
  export type ColumnistaCountOutputTypeCountOpinionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OpinionWhereInput
  }


  /**
   * Count Type EditorialCountOutputType
   */

  export type EditorialCountOutputType = {
    media: number
  }

  export type EditorialCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    media?: boolean | EditorialCountOutputTypeCountMediaArgs
  }

  // Custom InputTypes
  /**
   * EditorialCountOutputType without action
   */
  export type EditorialCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EditorialCountOutputType
     */
    select?: EditorialCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EditorialCountOutputType without action
   */
  export type EditorialCountOutputTypeCountMediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaWhereInput
  }


  /**
   * Count Type OpinionCountOutputType
   */

  export type OpinionCountOutputType = {
    media: number
  }

  export type OpinionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    media?: boolean | OpinionCountOutputTypeCountMediaArgs
  }

  // Custom InputTypes
  /**
   * OpinionCountOutputType without action
   */
  export type OpinionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpinionCountOutputType
     */
    select?: OpinionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OpinionCountOutputType without action
   */
  export type OpinionCountOutputTypeCountMediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaWhereInput
  }


  /**
   * Count Type MediaCountOutputType
   */

  export type MediaCountOutputType = {
    noticiaMedia: number
  }

  export type MediaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    noticiaMedia?: boolean | MediaCountOutputTypeCountNoticiaMediaArgs
  }

  // Custom InputTypes
  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaCountOutputType
     */
    select?: MediaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountNoticiaMediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoticiaMediaWhereInput
  }


  /**
   * Count Type NoticiaCountOutputType
   */

  export type NoticiaCountOutputType = {
    noticiaMedia: number
  }

  export type NoticiaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    noticiaMedia?: boolean | NoticiaCountOutputTypeCountNoticiaMediaArgs
  }

  // Custom InputTypes
  /**
   * NoticiaCountOutputType without action
   */
  export type NoticiaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticiaCountOutputType
     */
    select?: NoticiaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NoticiaCountOutputType without action
   */
  export type NoticiaCountOutputTypeCountNoticiaMediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoticiaMediaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Seccion
   */

  export type AggregateSeccion = {
    _count: SeccionCountAggregateOutputType | null
    _avg: SeccionAvgAggregateOutputType | null
    _sum: SeccionSumAggregateOutputType | null
    _min: SeccionMinAggregateOutputType | null
    _max: SeccionMaxAggregateOutputType | null
  }

  export type SeccionAvgAggregateOutputType = {
    id: number | null
  }

  export type SeccionSumAggregateOutputType = {
    id: number | null
  }

  export type SeccionMinAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type SeccionMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type SeccionCountAggregateOutputType = {
    id: number
    nombre: number
    _all: number
  }


  export type SeccionAvgAggregateInputType = {
    id?: true
  }

  export type SeccionSumAggregateInputType = {
    id?: true
  }

  export type SeccionMinAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type SeccionMaxAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type SeccionCountAggregateInputType = {
    id?: true
    nombre?: true
    _all?: true
  }

  export type SeccionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seccion to aggregate.
     */
    where?: SeccionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seccions to fetch.
     */
    orderBy?: SeccionOrderByWithRelationInput | SeccionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeccionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seccions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seccions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Seccions
    **/
    _count?: true | SeccionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeccionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeccionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeccionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeccionMaxAggregateInputType
  }

  export type GetSeccionAggregateType<T extends SeccionAggregateArgs> = {
        [P in keyof T & keyof AggregateSeccion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeccion[P]>
      : GetScalarType<T[P], AggregateSeccion[P]>
  }




  export type SeccionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeccionWhereInput
    orderBy?: SeccionOrderByWithAggregationInput | SeccionOrderByWithAggregationInput[]
    by: SeccionScalarFieldEnum[] | SeccionScalarFieldEnum
    having?: SeccionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeccionCountAggregateInputType | true
    _avg?: SeccionAvgAggregateInputType
    _sum?: SeccionSumAggregateInputType
    _min?: SeccionMinAggregateInputType
    _max?: SeccionMaxAggregateInputType
  }

  export type SeccionGroupByOutputType = {
    id: number
    nombre: string
    _count: SeccionCountAggregateOutputType | null
    _avg: SeccionAvgAggregateOutputType | null
    _sum: SeccionSumAggregateOutputType | null
    _min: SeccionMinAggregateOutputType | null
    _max: SeccionMaxAggregateOutputType | null
  }

  type GetSeccionGroupByPayload<T extends SeccionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeccionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeccionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeccionGroupByOutputType[P]>
            : GetScalarType<T[P], SeccionGroupByOutputType[P]>
        }
      >
    >


  export type SeccionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    noticias?: boolean | Seccion$noticiasArgs<ExtArgs>
    _count?: boolean | SeccionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seccion"]>

  export type SeccionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
  }, ExtArgs["result"]["seccion"]>

  export type SeccionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
  }, ExtArgs["result"]["seccion"]>

  export type SeccionSelectScalar = {
    id?: boolean
    nombre?: boolean
  }

  export type SeccionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre", ExtArgs["result"]["seccion"]>
  export type SeccionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    noticias?: boolean | Seccion$noticiasArgs<ExtArgs>
    _count?: boolean | SeccionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SeccionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SeccionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SeccionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Seccion"
    objects: {
      noticias: Prisma.$NoticiaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
    }, ExtArgs["result"]["seccion"]>
    composites: {}
  }

  type SeccionGetPayload<S extends boolean | null | undefined | SeccionDefaultArgs> = $Result.GetResult<Prisma.$SeccionPayload, S>

  type SeccionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SeccionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SeccionCountAggregateInputType | true
    }

  export interface SeccionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Seccion'], meta: { name: 'Seccion' } }
    /**
     * Find zero or one Seccion that matches the filter.
     * @param {SeccionFindUniqueArgs} args - Arguments to find a Seccion
     * @example
     * // Get one Seccion
     * const seccion = await prisma.seccion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SeccionFindUniqueArgs>(args: SelectSubset<T, SeccionFindUniqueArgs<ExtArgs>>): Prisma__SeccionClient<$Result.GetResult<Prisma.$SeccionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Seccion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SeccionFindUniqueOrThrowArgs} args - Arguments to find a Seccion
     * @example
     * // Get one Seccion
     * const seccion = await prisma.seccion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SeccionFindUniqueOrThrowArgs>(args: SelectSubset<T, SeccionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SeccionClient<$Result.GetResult<Prisma.$SeccionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Seccion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeccionFindFirstArgs} args - Arguments to find a Seccion
     * @example
     * // Get one Seccion
     * const seccion = await prisma.seccion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SeccionFindFirstArgs>(args?: SelectSubset<T, SeccionFindFirstArgs<ExtArgs>>): Prisma__SeccionClient<$Result.GetResult<Prisma.$SeccionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Seccion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeccionFindFirstOrThrowArgs} args - Arguments to find a Seccion
     * @example
     * // Get one Seccion
     * const seccion = await prisma.seccion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SeccionFindFirstOrThrowArgs>(args?: SelectSubset<T, SeccionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SeccionClient<$Result.GetResult<Prisma.$SeccionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Seccions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeccionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Seccions
     * const seccions = await prisma.seccion.findMany()
     * 
     * // Get first 10 Seccions
     * const seccions = await prisma.seccion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const seccionWithIdOnly = await prisma.seccion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SeccionFindManyArgs>(args?: SelectSubset<T, SeccionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeccionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Seccion.
     * @param {SeccionCreateArgs} args - Arguments to create a Seccion.
     * @example
     * // Create one Seccion
     * const Seccion = await prisma.seccion.create({
     *   data: {
     *     // ... data to create a Seccion
     *   }
     * })
     * 
     */
    create<T extends SeccionCreateArgs>(args: SelectSubset<T, SeccionCreateArgs<ExtArgs>>): Prisma__SeccionClient<$Result.GetResult<Prisma.$SeccionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Seccions.
     * @param {SeccionCreateManyArgs} args - Arguments to create many Seccions.
     * @example
     * // Create many Seccions
     * const seccion = await prisma.seccion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SeccionCreateManyArgs>(args?: SelectSubset<T, SeccionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Seccions and returns the data saved in the database.
     * @param {SeccionCreateManyAndReturnArgs} args - Arguments to create many Seccions.
     * @example
     * // Create many Seccions
     * const seccion = await prisma.seccion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Seccions and only return the `id`
     * const seccionWithIdOnly = await prisma.seccion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SeccionCreateManyAndReturnArgs>(args?: SelectSubset<T, SeccionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeccionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Seccion.
     * @param {SeccionDeleteArgs} args - Arguments to delete one Seccion.
     * @example
     * // Delete one Seccion
     * const Seccion = await prisma.seccion.delete({
     *   where: {
     *     // ... filter to delete one Seccion
     *   }
     * })
     * 
     */
    delete<T extends SeccionDeleteArgs>(args: SelectSubset<T, SeccionDeleteArgs<ExtArgs>>): Prisma__SeccionClient<$Result.GetResult<Prisma.$SeccionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Seccion.
     * @param {SeccionUpdateArgs} args - Arguments to update one Seccion.
     * @example
     * // Update one Seccion
     * const seccion = await prisma.seccion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SeccionUpdateArgs>(args: SelectSubset<T, SeccionUpdateArgs<ExtArgs>>): Prisma__SeccionClient<$Result.GetResult<Prisma.$SeccionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Seccions.
     * @param {SeccionDeleteManyArgs} args - Arguments to filter Seccions to delete.
     * @example
     * // Delete a few Seccions
     * const { count } = await prisma.seccion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SeccionDeleteManyArgs>(args?: SelectSubset<T, SeccionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seccions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeccionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Seccions
     * const seccion = await prisma.seccion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SeccionUpdateManyArgs>(args: SelectSubset<T, SeccionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seccions and returns the data updated in the database.
     * @param {SeccionUpdateManyAndReturnArgs} args - Arguments to update many Seccions.
     * @example
     * // Update many Seccions
     * const seccion = await prisma.seccion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Seccions and only return the `id`
     * const seccionWithIdOnly = await prisma.seccion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SeccionUpdateManyAndReturnArgs>(args: SelectSubset<T, SeccionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeccionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Seccion.
     * @param {SeccionUpsertArgs} args - Arguments to update or create a Seccion.
     * @example
     * // Update or create a Seccion
     * const seccion = await prisma.seccion.upsert({
     *   create: {
     *     // ... data to create a Seccion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Seccion we want to update
     *   }
     * })
     */
    upsert<T extends SeccionUpsertArgs>(args: SelectSubset<T, SeccionUpsertArgs<ExtArgs>>): Prisma__SeccionClient<$Result.GetResult<Prisma.$SeccionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Seccions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeccionCountArgs} args - Arguments to filter Seccions to count.
     * @example
     * // Count the number of Seccions
     * const count = await prisma.seccion.count({
     *   where: {
     *     // ... the filter for the Seccions we want to count
     *   }
     * })
    **/
    count<T extends SeccionCountArgs>(
      args?: Subset<T, SeccionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeccionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Seccion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeccionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeccionAggregateArgs>(args: Subset<T, SeccionAggregateArgs>): Prisma.PrismaPromise<GetSeccionAggregateType<T>>

    /**
     * Group by Seccion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeccionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeccionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeccionGroupByArgs['orderBy'] }
        : { orderBy?: SeccionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeccionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeccionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Seccion model
   */
  readonly fields: SeccionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Seccion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeccionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    noticias<T extends Seccion$noticiasArgs<ExtArgs> = {}>(args?: Subset<T, Seccion$noticiasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Seccion model
   */
  interface SeccionFieldRefs {
    readonly id: FieldRef<"Seccion", 'Int'>
    readonly nombre: FieldRef<"Seccion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Seccion findUnique
   */
  export type SeccionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seccion
     */
    select?: SeccionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seccion
     */
    omit?: SeccionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeccionInclude<ExtArgs> | null
    /**
     * Filter, which Seccion to fetch.
     */
    where: SeccionWhereUniqueInput
  }

  /**
   * Seccion findUniqueOrThrow
   */
  export type SeccionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seccion
     */
    select?: SeccionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seccion
     */
    omit?: SeccionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeccionInclude<ExtArgs> | null
    /**
     * Filter, which Seccion to fetch.
     */
    where: SeccionWhereUniqueInput
  }

  /**
   * Seccion findFirst
   */
  export type SeccionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seccion
     */
    select?: SeccionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seccion
     */
    omit?: SeccionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeccionInclude<ExtArgs> | null
    /**
     * Filter, which Seccion to fetch.
     */
    where?: SeccionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seccions to fetch.
     */
    orderBy?: SeccionOrderByWithRelationInput | SeccionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seccions.
     */
    cursor?: SeccionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seccions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seccions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seccions.
     */
    distinct?: SeccionScalarFieldEnum | SeccionScalarFieldEnum[]
  }

  /**
   * Seccion findFirstOrThrow
   */
  export type SeccionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seccion
     */
    select?: SeccionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seccion
     */
    omit?: SeccionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeccionInclude<ExtArgs> | null
    /**
     * Filter, which Seccion to fetch.
     */
    where?: SeccionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seccions to fetch.
     */
    orderBy?: SeccionOrderByWithRelationInput | SeccionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seccions.
     */
    cursor?: SeccionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seccions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seccions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seccions.
     */
    distinct?: SeccionScalarFieldEnum | SeccionScalarFieldEnum[]
  }

  /**
   * Seccion findMany
   */
  export type SeccionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seccion
     */
    select?: SeccionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seccion
     */
    omit?: SeccionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeccionInclude<ExtArgs> | null
    /**
     * Filter, which Seccions to fetch.
     */
    where?: SeccionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seccions to fetch.
     */
    orderBy?: SeccionOrderByWithRelationInput | SeccionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Seccions.
     */
    cursor?: SeccionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seccions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seccions.
     */
    skip?: number
    distinct?: SeccionScalarFieldEnum | SeccionScalarFieldEnum[]
  }

  /**
   * Seccion create
   */
  export type SeccionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seccion
     */
    select?: SeccionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seccion
     */
    omit?: SeccionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeccionInclude<ExtArgs> | null
    /**
     * The data needed to create a Seccion.
     */
    data: XOR<SeccionCreateInput, SeccionUncheckedCreateInput>
  }

  /**
   * Seccion createMany
   */
  export type SeccionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Seccions.
     */
    data: SeccionCreateManyInput | SeccionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Seccion createManyAndReturn
   */
  export type SeccionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seccion
     */
    select?: SeccionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Seccion
     */
    omit?: SeccionOmit<ExtArgs> | null
    /**
     * The data used to create many Seccions.
     */
    data: SeccionCreateManyInput | SeccionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Seccion update
   */
  export type SeccionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seccion
     */
    select?: SeccionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seccion
     */
    omit?: SeccionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeccionInclude<ExtArgs> | null
    /**
     * The data needed to update a Seccion.
     */
    data: XOR<SeccionUpdateInput, SeccionUncheckedUpdateInput>
    /**
     * Choose, which Seccion to update.
     */
    where: SeccionWhereUniqueInput
  }

  /**
   * Seccion updateMany
   */
  export type SeccionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Seccions.
     */
    data: XOR<SeccionUpdateManyMutationInput, SeccionUncheckedUpdateManyInput>
    /**
     * Filter which Seccions to update
     */
    where?: SeccionWhereInput
    /**
     * Limit how many Seccions to update.
     */
    limit?: number
  }

  /**
   * Seccion updateManyAndReturn
   */
  export type SeccionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seccion
     */
    select?: SeccionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Seccion
     */
    omit?: SeccionOmit<ExtArgs> | null
    /**
     * The data used to update Seccions.
     */
    data: XOR<SeccionUpdateManyMutationInput, SeccionUncheckedUpdateManyInput>
    /**
     * Filter which Seccions to update
     */
    where?: SeccionWhereInput
    /**
     * Limit how many Seccions to update.
     */
    limit?: number
  }

  /**
   * Seccion upsert
   */
  export type SeccionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seccion
     */
    select?: SeccionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seccion
     */
    omit?: SeccionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeccionInclude<ExtArgs> | null
    /**
     * The filter to search for the Seccion to update in case it exists.
     */
    where: SeccionWhereUniqueInput
    /**
     * In case the Seccion found by the `where` argument doesn't exist, create a new Seccion with this data.
     */
    create: XOR<SeccionCreateInput, SeccionUncheckedCreateInput>
    /**
     * In case the Seccion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeccionUpdateInput, SeccionUncheckedUpdateInput>
  }

  /**
   * Seccion delete
   */
  export type SeccionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seccion
     */
    select?: SeccionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seccion
     */
    omit?: SeccionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeccionInclude<ExtArgs> | null
    /**
     * Filter which Seccion to delete.
     */
    where: SeccionWhereUniqueInput
  }

  /**
   * Seccion deleteMany
   */
  export type SeccionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seccions to delete
     */
    where?: SeccionWhereInput
    /**
     * Limit how many Seccions to delete.
     */
    limit?: number
  }

  /**
   * Seccion.noticias
   */
  export type Seccion$noticiasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
    where?: NoticiaWhereInput
    orderBy?: NoticiaOrderByWithRelationInput | NoticiaOrderByWithRelationInput[]
    cursor?: NoticiaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoticiaScalarFieldEnum | NoticiaScalarFieldEnum[]
  }

  /**
   * Seccion without action
   */
  export type SeccionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seccion
     */
    select?: SeccionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seccion
     */
    omit?: SeccionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeccionInclude<ExtArgs> | null
  }


  /**
   * Model Rol
   */

  export type AggregateRol = {
    _count: RolCountAggregateOutputType | null
    _avg: RolAvgAggregateOutputType | null
    _sum: RolSumAggregateOutputType | null
    _min: RolMinAggregateOutputType | null
    _max: RolMaxAggregateOutputType | null
  }

  export type RolAvgAggregateOutputType = {
    id: number | null
  }

  export type RolSumAggregateOutputType = {
    id: number | null
  }

  export type RolMinAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type RolMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type RolCountAggregateOutputType = {
    id: number
    nombre: number
    _all: number
  }


  export type RolAvgAggregateInputType = {
    id?: true
  }

  export type RolSumAggregateInputType = {
    id?: true
  }

  export type RolMinAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type RolMaxAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type RolCountAggregateInputType = {
    id?: true
    nombre?: true
    _all?: true
  }

  export type RolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rol to aggregate.
     */
    where?: RolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rols to fetch.
     */
    orderBy?: RolOrderByWithRelationInput | RolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rols
    **/
    _count?: true | RolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolMaxAggregateInputType
  }

  export type GetRolAggregateType<T extends RolAggregateArgs> = {
        [P in keyof T & keyof AggregateRol]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRol[P]>
      : GetScalarType<T[P], AggregateRol[P]>
  }




  export type RolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolWhereInput
    orderBy?: RolOrderByWithAggregationInput | RolOrderByWithAggregationInput[]
    by: RolScalarFieldEnum[] | RolScalarFieldEnum
    having?: RolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolCountAggregateInputType | true
    _avg?: RolAvgAggregateInputType
    _sum?: RolSumAggregateInputType
    _min?: RolMinAggregateInputType
    _max?: RolMaxAggregateInputType
  }

  export type RolGroupByOutputType = {
    id: number
    nombre: string
    _count: RolCountAggregateOutputType | null
    _avg: RolAvgAggregateOutputType | null
    _sum: RolSumAggregateOutputType | null
    _min: RolMinAggregateOutputType | null
    _max: RolMaxAggregateOutputType | null
  }

  type GetRolGroupByPayload<T extends RolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolGroupByOutputType[P]>
            : GetScalarType<T[P], RolGroupByOutputType[P]>
        }
      >
    >


  export type RolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    usuarioRoles?: boolean | Rol$usuarioRolesArgs<ExtArgs>
    _count?: boolean | RolCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rol"]>

  export type RolSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
  }, ExtArgs["result"]["rol"]>

  export type RolSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
  }, ExtArgs["result"]["rol"]>

  export type RolSelectScalar = {
    id?: boolean
    nombre?: boolean
  }

  export type RolOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre", ExtArgs["result"]["rol"]>
  export type RolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuarioRoles?: boolean | Rol$usuarioRolesArgs<ExtArgs>
    _count?: boolean | RolCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RolIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RolIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rol"
    objects: {
      usuarioRoles: Prisma.$UsuarioRolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
    }, ExtArgs["result"]["rol"]>
    composites: {}
  }

  type RolGetPayload<S extends boolean | null | undefined | RolDefaultArgs> = $Result.GetResult<Prisma.$RolPayload, S>

  type RolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RolFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RolCountAggregateInputType | true
    }

  export interface RolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rol'], meta: { name: 'Rol' } }
    /**
     * Find zero or one Rol that matches the filter.
     * @param {RolFindUniqueArgs} args - Arguments to find a Rol
     * @example
     * // Get one Rol
     * const rol = await prisma.rol.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RolFindUniqueArgs>(args: SelectSubset<T, RolFindUniqueArgs<ExtArgs>>): Prisma__RolClient<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Rol that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RolFindUniqueOrThrowArgs} args - Arguments to find a Rol
     * @example
     * // Get one Rol
     * const rol = await prisma.rol.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RolFindUniqueOrThrowArgs>(args: SelectSubset<T, RolFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RolClient<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Rol that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolFindFirstArgs} args - Arguments to find a Rol
     * @example
     * // Get one Rol
     * const rol = await prisma.rol.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RolFindFirstArgs>(args?: SelectSubset<T, RolFindFirstArgs<ExtArgs>>): Prisma__RolClient<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Rol that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolFindFirstOrThrowArgs} args - Arguments to find a Rol
     * @example
     * // Get one Rol
     * const rol = await prisma.rol.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RolFindFirstOrThrowArgs>(args?: SelectSubset<T, RolFindFirstOrThrowArgs<ExtArgs>>): Prisma__RolClient<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Rols that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rols
     * const rols = await prisma.rol.findMany()
     * 
     * // Get first 10 Rols
     * const rols = await prisma.rol.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolWithIdOnly = await prisma.rol.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RolFindManyArgs>(args?: SelectSubset<T, RolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Rol.
     * @param {RolCreateArgs} args - Arguments to create a Rol.
     * @example
     * // Create one Rol
     * const Rol = await prisma.rol.create({
     *   data: {
     *     // ... data to create a Rol
     *   }
     * })
     * 
     */
    create<T extends RolCreateArgs>(args: SelectSubset<T, RolCreateArgs<ExtArgs>>): Prisma__RolClient<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Rols.
     * @param {RolCreateManyArgs} args - Arguments to create many Rols.
     * @example
     * // Create many Rols
     * const rol = await prisma.rol.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RolCreateManyArgs>(args?: SelectSubset<T, RolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rols and returns the data saved in the database.
     * @param {RolCreateManyAndReturnArgs} args - Arguments to create many Rols.
     * @example
     * // Create many Rols
     * const rol = await prisma.rol.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rols and only return the `id`
     * const rolWithIdOnly = await prisma.rol.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RolCreateManyAndReturnArgs>(args?: SelectSubset<T, RolCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Rol.
     * @param {RolDeleteArgs} args - Arguments to delete one Rol.
     * @example
     * // Delete one Rol
     * const Rol = await prisma.rol.delete({
     *   where: {
     *     // ... filter to delete one Rol
     *   }
     * })
     * 
     */
    delete<T extends RolDeleteArgs>(args: SelectSubset<T, RolDeleteArgs<ExtArgs>>): Prisma__RolClient<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Rol.
     * @param {RolUpdateArgs} args - Arguments to update one Rol.
     * @example
     * // Update one Rol
     * const rol = await prisma.rol.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RolUpdateArgs>(args: SelectSubset<T, RolUpdateArgs<ExtArgs>>): Prisma__RolClient<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Rols.
     * @param {RolDeleteManyArgs} args - Arguments to filter Rols to delete.
     * @example
     * // Delete a few Rols
     * const { count } = await prisma.rol.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RolDeleteManyArgs>(args?: SelectSubset<T, RolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rols
     * const rol = await prisma.rol.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RolUpdateManyArgs>(args: SelectSubset<T, RolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rols and returns the data updated in the database.
     * @param {RolUpdateManyAndReturnArgs} args - Arguments to update many Rols.
     * @example
     * // Update many Rols
     * const rol = await prisma.rol.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Rols and only return the `id`
     * const rolWithIdOnly = await prisma.rol.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RolUpdateManyAndReturnArgs>(args: SelectSubset<T, RolUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Rol.
     * @param {RolUpsertArgs} args - Arguments to update or create a Rol.
     * @example
     * // Update or create a Rol
     * const rol = await prisma.rol.upsert({
     *   create: {
     *     // ... data to create a Rol
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rol we want to update
     *   }
     * })
     */
    upsert<T extends RolUpsertArgs>(args: SelectSubset<T, RolUpsertArgs<ExtArgs>>): Prisma__RolClient<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Rols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolCountArgs} args - Arguments to filter Rols to count.
     * @example
     * // Count the number of Rols
     * const count = await prisma.rol.count({
     *   where: {
     *     // ... the filter for the Rols we want to count
     *   }
     * })
    **/
    count<T extends RolCountArgs>(
      args?: Subset<T, RolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolAggregateArgs>(args: Subset<T, RolAggregateArgs>): Prisma.PrismaPromise<GetRolAggregateType<T>>

    /**
     * Group by Rol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolGroupByArgs['orderBy'] }
        : { orderBy?: RolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rol model
   */
  readonly fields: RolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rol.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuarioRoles<T extends Rol$usuarioRolesArgs<ExtArgs> = {}>(args?: Subset<T, Rol$usuarioRolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Rol model
   */
  interface RolFieldRefs {
    readonly id: FieldRef<"Rol", 'Int'>
    readonly nombre: FieldRef<"Rol", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Rol findUnique
   */
  export type RolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolInclude<ExtArgs> | null
    /**
     * Filter, which Rol to fetch.
     */
    where: RolWhereUniqueInput
  }

  /**
   * Rol findUniqueOrThrow
   */
  export type RolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolInclude<ExtArgs> | null
    /**
     * Filter, which Rol to fetch.
     */
    where: RolWhereUniqueInput
  }

  /**
   * Rol findFirst
   */
  export type RolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolInclude<ExtArgs> | null
    /**
     * Filter, which Rol to fetch.
     */
    where?: RolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rols to fetch.
     */
    orderBy?: RolOrderByWithRelationInput | RolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rols.
     */
    cursor?: RolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rols.
     */
    distinct?: RolScalarFieldEnum | RolScalarFieldEnum[]
  }

  /**
   * Rol findFirstOrThrow
   */
  export type RolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolInclude<ExtArgs> | null
    /**
     * Filter, which Rol to fetch.
     */
    where?: RolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rols to fetch.
     */
    orderBy?: RolOrderByWithRelationInput | RolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rols.
     */
    cursor?: RolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rols.
     */
    distinct?: RolScalarFieldEnum | RolScalarFieldEnum[]
  }

  /**
   * Rol findMany
   */
  export type RolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolInclude<ExtArgs> | null
    /**
     * Filter, which Rols to fetch.
     */
    where?: RolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rols to fetch.
     */
    orderBy?: RolOrderByWithRelationInput | RolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rols.
     */
    cursor?: RolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rols.
     */
    skip?: number
    distinct?: RolScalarFieldEnum | RolScalarFieldEnum[]
  }

  /**
   * Rol create
   */
  export type RolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolInclude<ExtArgs> | null
    /**
     * The data needed to create a Rol.
     */
    data: XOR<RolCreateInput, RolUncheckedCreateInput>
  }

  /**
   * Rol createMany
   */
  export type RolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rols.
     */
    data: RolCreateManyInput | RolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Rol createManyAndReturn
   */
  export type RolCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * The data used to create many Rols.
     */
    data: RolCreateManyInput | RolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Rol update
   */
  export type RolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolInclude<ExtArgs> | null
    /**
     * The data needed to update a Rol.
     */
    data: XOR<RolUpdateInput, RolUncheckedUpdateInput>
    /**
     * Choose, which Rol to update.
     */
    where: RolWhereUniqueInput
  }

  /**
   * Rol updateMany
   */
  export type RolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rols.
     */
    data: XOR<RolUpdateManyMutationInput, RolUncheckedUpdateManyInput>
    /**
     * Filter which Rols to update
     */
    where?: RolWhereInput
    /**
     * Limit how many Rols to update.
     */
    limit?: number
  }

  /**
   * Rol updateManyAndReturn
   */
  export type RolUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * The data used to update Rols.
     */
    data: XOR<RolUpdateManyMutationInput, RolUncheckedUpdateManyInput>
    /**
     * Filter which Rols to update
     */
    where?: RolWhereInput
    /**
     * Limit how many Rols to update.
     */
    limit?: number
  }

  /**
   * Rol upsert
   */
  export type RolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolInclude<ExtArgs> | null
    /**
     * The filter to search for the Rol to update in case it exists.
     */
    where: RolWhereUniqueInput
    /**
     * In case the Rol found by the `where` argument doesn't exist, create a new Rol with this data.
     */
    create: XOR<RolCreateInput, RolUncheckedCreateInput>
    /**
     * In case the Rol was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RolUpdateInput, RolUncheckedUpdateInput>
  }

  /**
   * Rol delete
   */
  export type RolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolInclude<ExtArgs> | null
    /**
     * Filter which Rol to delete.
     */
    where: RolWhereUniqueInput
  }

  /**
   * Rol deleteMany
   */
  export type RolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rols to delete
     */
    where?: RolWhereInput
    /**
     * Limit how many Rols to delete.
     */
    limit?: number
  }

  /**
   * Rol.usuarioRoles
   */
  export type Rol$usuarioRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    where?: UsuarioRolWhereInput
    orderBy?: UsuarioRolOrderByWithRelationInput | UsuarioRolOrderByWithRelationInput[]
    cursor?: UsuarioRolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsuarioRolScalarFieldEnum | UsuarioRolScalarFieldEnum[]
  }

  /**
   * Rol without action
   */
  export type RolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolInclude<ExtArgs> | null
  }


  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    username: number
    password: number
    createdAt: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    createdAt?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    createdAt?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    createdAt?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    username: string
    password: string
    createdAt: Date
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    createdAt?: boolean
    usuarioRoles?: boolean | Usuario$usuarioRolesArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    createdAt?: boolean
  }

  export type UsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password" | "createdAt", ExtArgs["result"]["usuario"]>
  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuarioRoles?: boolean | Usuario$usuarioRolesArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UsuarioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      usuarioRoles: Prisma.$UsuarioRolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      password: string
      createdAt: Date
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios and returns the data updated in the database.
     * @param {UsuarioUpdateManyAndReturnArgs} args - Arguments to update many Usuarios.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsuarioUpdateManyAndReturnArgs>(args: SelectSubset<T, UsuarioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuarioRoles<T extends Usuario$usuarioRolesArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$usuarioRolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly username: FieldRef<"Usuario", 'String'>
    readonly password: FieldRef<"Usuario", 'String'>
    readonly createdAt: FieldRef<"Usuario", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario updateManyAndReturn
   */
  export type UsuarioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuario.usuarioRoles
   */
  export type Usuario$usuarioRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    where?: UsuarioRolWhereInput
    orderBy?: UsuarioRolOrderByWithRelationInput | UsuarioRolOrderByWithRelationInput[]
    cursor?: UsuarioRolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsuarioRolScalarFieldEnum | UsuarioRolScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model UsuarioRol
   */

  export type AggregateUsuarioRol = {
    _count: UsuarioRolCountAggregateOutputType | null
    _avg: UsuarioRolAvgAggregateOutputType | null
    _sum: UsuarioRolSumAggregateOutputType | null
    _min: UsuarioRolMinAggregateOutputType | null
    _max: UsuarioRolMaxAggregateOutputType | null
  }

  export type UsuarioRolAvgAggregateOutputType = {
    usuarioId: number | null
    rolId: number | null
  }

  export type UsuarioRolSumAggregateOutputType = {
    usuarioId: number | null
    rolId: number | null
  }

  export type UsuarioRolMinAggregateOutputType = {
    usuarioId: number | null
    rolId: number | null
  }

  export type UsuarioRolMaxAggregateOutputType = {
    usuarioId: number | null
    rolId: number | null
  }

  export type UsuarioRolCountAggregateOutputType = {
    usuarioId: number
    rolId: number
    _all: number
  }


  export type UsuarioRolAvgAggregateInputType = {
    usuarioId?: true
    rolId?: true
  }

  export type UsuarioRolSumAggregateInputType = {
    usuarioId?: true
    rolId?: true
  }

  export type UsuarioRolMinAggregateInputType = {
    usuarioId?: true
    rolId?: true
  }

  export type UsuarioRolMaxAggregateInputType = {
    usuarioId?: true
    rolId?: true
  }

  export type UsuarioRolCountAggregateInputType = {
    usuarioId?: true
    rolId?: true
    _all?: true
  }

  export type UsuarioRolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsuarioRol to aggregate.
     */
    where?: UsuarioRolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsuarioRols to fetch.
     */
    orderBy?: UsuarioRolOrderByWithRelationInput | UsuarioRolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioRolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsuarioRols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsuarioRols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UsuarioRols
    **/
    _count?: true | UsuarioRolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioRolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioRolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioRolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioRolMaxAggregateInputType
  }

  export type GetUsuarioRolAggregateType<T extends UsuarioRolAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarioRol]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarioRol[P]>
      : GetScalarType<T[P], AggregateUsuarioRol[P]>
  }




  export type UsuarioRolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioRolWhereInput
    orderBy?: UsuarioRolOrderByWithAggregationInput | UsuarioRolOrderByWithAggregationInput[]
    by: UsuarioRolScalarFieldEnum[] | UsuarioRolScalarFieldEnum
    having?: UsuarioRolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioRolCountAggregateInputType | true
    _avg?: UsuarioRolAvgAggregateInputType
    _sum?: UsuarioRolSumAggregateInputType
    _min?: UsuarioRolMinAggregateInputType
    _max?: UsuarioRolMaxAggregateInputType
  }

  export type UsuarioRolGroupByOutputType = {
    usuarioId: number
    rolId: number
    _count: UsuarioRolCountAggregateOutputType | null
    _avg: UsuarioRolAvgAggregateOutputType | null
    _sum: UsuarioRolSumAggregateOutputType | null
    _min: UsuarioRolMinAggregateOutputType | null
    _max: UsuarioRolMaxAggregateOutputType | null
  }

  type GetUsuarioRolGroupByPayload<T extends UsuarioRolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioRolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioRolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioRolGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioRolGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioRolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    usuarioId?: boolean
    rolId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    rol?: boolean | RolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuarioRol"]>

  export type UsuarioRolSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    usuarioId?: boolean
    rolId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    rol?: boolean | RolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuarioRol"]>

  export type UsuarioRolSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    usuarioId?: boolean
    rolId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    rol?: boolean | RolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuarioRol"]>

  export type UsuarioRolSelectScalar = {
    usuarioId?: boolean
    rolId?: boolean
  }

  export type UsuarioRolOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"usuarioId" | "rolId", ExtArgs["result"]["usuarioRol"]>
  export type UsuarioRolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    rol?: boolean | RolDefaultArgs<ExtArgs>
  }
  export type UsuarioRolIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    rol?: boolean | RolDefaultArgs<ExtArgs>
  }
  export type UsuarioRolIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    rol?: boolean | RolDefaultArgs<ExtArgs>
  }

  export type $UsuarioRolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UsuarioRol"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      rol: Prisma.$RolPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      usuarioId: number
      rolId: number
    }, ExtArgs["result"]["usuarioRol"]>
    composites: {}
  }

  type UsuarioRolGetPayload<S extends boolean | null | undefined | UsuarioRolDefaultArgs> = $Result.GetResult<Prisma.$UsuarioRolPayload, S>

  type UsuarioRolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioRolFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioRolCountAggregateInputType | true
    }

  export interface UsuarioRolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UsuarioRol'], meta: { name: 'UsuarioRol' } }
    /**
     * Find zero or one UsuarioRol that matches the filter.
     * @param {UsuarioRolFindUniqueArgs} args - Arguments to find a UsuarioRol
     * @example
     * // Get one UsuarioRol
     * const usuarioRol = await prisma.usuarioRol.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioRolFindUniqueArgs>(args: SelectSubset<T, UsuarioRolFindUniqueArgs<ExtArgs>>): Prisma__UsuarioRolClient<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UsuarioRol that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioRolFindUniqueOrThrowArgs} args - Arguments to find a UsuarioRol
     * @example
     * // Get one UsuarioRol
     * const usuarioRol = await prisma.usuarioRol.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioRolFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioRolFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioRolClient<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UsuarioRol that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioRolFindFirstArgs} args - Arguments to find a UsuarioRol
     * @example
     * // Get one UsuarioRol
     * const usuarioRol = await prisma.usuarioRol.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioRolFindFirstArgs>(args?: SelectSubset<T, UsuarioRolFindFirstArgs<ExtArgs>>): Prisma__UsuarioRolClient<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UsuarioRol that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioRolFindFirstOrThrowArgs} args - Arguments to find a UsuarioRol
     * @example
     * // Get one UsuarioRol
     * const usuarioRol = await prisma.usuarioRol.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioRolFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioRolFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioRolClient<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UsuarioRols that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioRolFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsuarioRols
     * const usuarioRols = await prisma.usuarioRol.findMany()
     * 
     * // Get first 10 UsuarioRols
     * const usuarioRols = await prisma.usuarioRol.findMany({ take: 10 })
     * 
     * // Only select the `usuarioId`
     * const usuarioRolWithUsuarioIdOnly = await prisma.usuarioRol.findMany({ select: { usuarioId: true } })
     * 
     */
    findMany<T extends UsuarioRolFindManyArgs>(args?: SelectSubset<T, UsuarioRolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UsuarioRol.
     * @param {UsuarioRolCreateArgs} args - Arguments to create a UsuarioRol.
     * @example
     * // Create one UsuarioRol
     * const UsuarioRol = await prisma.usuarioRol.create({
     *   data: {
     *     // ... data to create a UsuarioRol
     *   }
     * })
     * 
     */
    create<T extends UsuarioRolCreateArgs>(args: SelectSubset<T, UsuarioRolCreateArgs<ExtArgs>>): Prisma__UsuarioRolClient<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UsuarioRols.
     * @param {UsuarioRolCreateManyArgs} args - Arguments to create many UsuarioRols.
     * @example
     * // Create many UsuarioRols
     * const usuarioRol = await prisma.usuarioRol.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioRolCreateManyArgs>(args?: SelectSubset<T, UsuarioRolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UsuarioRols and returns the data saved in the database.
     * @param {UsuarioRolCreateManyAndReturnArgs} args - Arguments to create many UsuarioRols.
     * @example
     * // Create many UsuarioRols
     * const usuarioRol = await prisma.usuarioRol.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UsuarioRols and only return the `usuarioId`
     * const usuarioRolWithUsuarioIdOnly = await prisma.usuarioRol.createManyAndReturn({
     *   select: { usuarioId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioRolCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioRolCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UsuarioRol.
     * @param {UsuarioRolDeleteArgs} args - Arguments to delete one UsuarioRol.
     * @example
     * // Delete one UsuarioRol
     * const UsuarioRol = await prisma.usuarioRol.delete({
     *   where: {
     *     // ... filter to delete one UsuarioRol
     *   }
     * })
     * 
     */
    delete<T extends UsuarioRolDeleteArgs>(args: SelectSubset<T, UsuarioRolDeleteArgs<ExtArgs>>): Prisma__UsuarioRolClient<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UsuarioRol.
     * @param {UsuarioRolUpdateArgs} args - Arguments to update one UsuarioRol.
     * @example
     * // Update one UsuarioRol
     * const usuarioRol = await prisma.usuarioRol.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioRolUpdateArgs>(args: SelectSubset<T, UsuarioRolUpdateArgs<ExtArgs>>): Prisma__UsuarioRolClient<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UsuarioRols.
     * @param {UsuarioRolDeleteManyArgs} args - Arguments to filter UsuarioRols to delete.
     * @example
     * // Delete a few UsuarioRols
     * const { count } = await prisma.usuarioRol.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioRolDeleteManyArgs>(args?: SelectSubset<T, UsuarioRolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsuarioRols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioRolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsuarioRols
     * const usuarioRol = await prisma.usuarioRol.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioRolUpdateManyArgs>(args: SelectSubset<T, UsuarioRolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsuarioRols and returns the data updated in the database.
     * @param {UsuarioRolUpdateManyAndReturnArgs} args - Arguments to update many UsuarioRols.
     * @example
     * // Update many UsuarioRols
     * const usuarioRol = await prisma.usuarioRol.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UsuarioRols and only return the `usuarioId`
     * const usuarioRolWithUsuarioIdOnly = await prisma.usuarioRol.updateManyAndReturn({
     *   select: { usuarioId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsuarioRolUpdateManyAndReturnArgs>(args: SelectSubset<T, UsuarioRolUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UsuarioRol.
     * @param {UsuarioRolUpsertArgs} args - Arguments to update or create a UsuarioRol.
     * @example
     * // Update or create a UsuarioRol
     * const usuarioRol = await prisma.usuarioRol.upsert({
     *   create: {
     *     // ... data to create a UsuarioRol
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsuarioRol we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioRolUpsertArgs>(args: SelectSubset<T, UsuarioRolUpsertArgs<ExtArgs>>): Prisma__UsuarioRolClient<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UsuarioRols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioRolCountArgs} args - Arguments to filter UsuarioRols to count.
     * @example
     * // Count the number of UsuarioRols
     * const count = await prisma.usuarioRol.count({
     *   where: {
     *     // ... the filter for the UsuarioRols we want to count
     *   }
     * })
    **/
    count<T extends UsuarioRolCountArgs>(
      args?: Subset<T, UsuarioRolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioRolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsuarioRol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioRolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioRolAggregateArgs>(args: Subset<T, UsuarioRolAggregateArgs>): Prisma.PrismaPromise<GetUsuarioRolAggregateType<T>>

    /**
     * Group by UsuarioRol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioRolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioRolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioRolGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioRolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioRolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioRolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UsuarioRol model
   */
  readonly fields: UsuarioRolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UsuarioRol.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioRolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    rol<T extends RolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RolDefaultArgs<ExtArgs>>): Prisma__RolClient<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UsuarioRol model
   */
  interface UsuarioRolFieldRefs {
    readonly usuarioId: FieldRef<"UsuarioRol", 'Int'>
    readonly rolId: FieldRef<"UsuarioRol", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UsuarioRol findUnique
   */
  export type UsuarioRolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioRol to fetch.
     */
    where: UsuarioRolWhereUniqueInput
  }

  /**
   * UsuarioRol findUniqueOrThrow
   */
  export type UsuarioRolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioRol to fetch.
     */
    where: UsuarioRolWhereUniqueInput
  }

  /**
   * UsuarioRol findFirst
   */
  export type UsuarioRolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioRol to fetch.
     */
    where?: UsuarioRolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsuarioRols to fetch.
     */
    orderBy?: UsuarioRolOrderByWithRelationInput | UsuarioRolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsuarioRols.
     */
    cursor?: UsuarioRolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsuarioRols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsuarioRols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsuarioRols.
     */
    distinct?: UsuarioRolScalarFieldEnum | UsuarioRolScalarFieldEnum[]
  }

  /**
   * UsuarioRol findFirstOrThrow
   */
  export type UsuarioRolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioRol to fetch.
     */
    where?: UsuarioRolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsuarioRols to fetch.
     */
    orderBy?: UsuarioRolOrderByWithRelationInput | UsuarioRolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsuarioRols.
     */
    cursor?: UsuarioRolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsuarioRols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsuarioRols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsuarioRols.
     */
    distinct?: UsuarioRolScalarFieldEnum | UsuarioRolScalarFieldEnum[]
  }

  /**
   * UsuarioRol findMany
   */
  export type UsuarioRolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioRols to fetch.
     */
    where?: UsuarioRolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsuarioRols to fetch.
     */
    orderBy?: UsuarioRolOrderByWithRelationInput | UsuarioRolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UsuarioRols.
     */
    cursor?: UsuarioRolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsuarioRols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsuarioRols.
     */
    skip?: number
    distinct?: UsuarioRolScalarFieldEnum | UsuarioRolScalarFieldEnum[]
  }

  /**
   * UsuarioRol create
   */
  export type UsuarioRolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    /**
     * The data needed to create a UsuarioRol.
     */
    data: XOR<UsuarioRolCreateInput, UsuarioRolUncheckedCreateInput>
  }

  /**
   * UsuarioRol createMany
   */
  export type UsuarioRolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UsuarioRols.
     */
    data: UsuarioRolCreateManyInput | UsuarioRolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UsuarioRol createManyAndReturn
   */
  export type UsuarioRolCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * The data used to create many UsuarioRols.
     */
    data: UsuarioRolCreateManyInput | UsuarioRolCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UsuarioRol update
   */
  export type UsuarioRolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    /**
     * The data needed to update a UsuarioRol.
     */
    data: XOR<UsuarioRolUpdateInput, UsuarioRolUncheckedUpdateInput>
    /**
     * Choose, which UsuarioRol to update.
     */
    where: UsuarioRolWhereUniqueInput
  }

  /**
   * UsuarioRol updateMany
   */
  export type UsuarioRolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UsuarioRols.
     */
    data: XOR<UsuarioRolUpdateManyMutationInput, UsuarioRolUncheckedUpdateManyInput>
    /**
     * Filter which UsuarioRols to update
     */
    where?: UsuarioRolWhereInput
    /**
     * Limit how many UsuarioRols to update.
     */
    limit?: number
  }

  /**
   * UsuarioRol updateManyAndReturn
   */
  export type UsuarioRolUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * The data used to update UsuarioRols.
     */
    data: XOR<UsuarioRolUpdateManyMutationInput, UsuarioRolUncheckedUpdateManyInput>
    /**
     * Filter which UsuarioRols to update
     */
    where?: UsuarioRolWhereInput
    /**
     * Limit how many UsuarioRols to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UsuarioRol upsert
   */
  export type UsuarioRolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    /**
     * The filter to search for the UsuarioRol to update in case it exists.
     */
    where: UsuarioRolWhereUniqueInput
    /**
     * In case the UsuarioRol found by the `where` argument doesn't exist, create a new UsuarioRol with this data.
     */
    create: XOR<UsuarioRolCreateInput, UsuarioRolUncheckedCreateInput>
    /**
     * In case the UsuarioRol was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioRolUpdateInput, UsuarioRolUncheckedUpdateInput>
  }

  /**
   * UsuarioRol delete
   */
  export type UsuarioRolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    /**
     * Filter which UsuarioRol to delete.
     */
    where: UsuarioRolWhereUniqueInput
  }

  /**
   * UsuarioRol deleteMany
   */
  export type UsuarioRolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsuarioRols to delete
     */
    where?: UsuarioRolWhereInput
    /**
     * Limit how many UsuarioRols to delete.
     */
    limit?: number
  }

  /**
   * UsuarioRol without action
   */
  export type UsuarioRolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
  }


  /**
   * Model Columnista
   */

  export type AggregateColumnista = {
    _count: ColumnistaCountAggregateOutputType | null
    _avg: ColumnistaAvgAggregateOutputType | null
    _sum: ColumnistaSumAggregateOutputType | null
    _min: ColumnistaMinAggregateOutputType | null
    _max: ColumnistaMaxAggregateOutputType | null
  }

  export type ColumnistaAvgAggregateOutputType = {
    id: number | null
  }

  export type ColumnistaSumAggregateOutputType = {
    id: number | null
  }

  export type ColumnistaMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    bio: string | null
    fotoUrl: string | null
    createdAt: Date | null
  }

  export type ColumnistaMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    bio: string | null
    fotoUrl: string | null
    createdAt: Date | null
  }

  export type ColumnistaCountAggregateOutputType = {
    id: number
    nombre: number
    bio: number
    fotoUrl: number
    redes: number
    createdAt: number
    _all: number
  }


  export type ColumnistaAvgAggregateInputType = {
    id?: true
  }

  export type ColumnistaSumAggregateInputType = {
    id?: true
  }

  export type ColumnistaMinAggregateInputType = {
    id?: true
    nombre?: true
    bio?: true
    fotoUrl?: true
    createdAt?: true
  }

  export type ColumnistaMaxAggregateInputType = {
    id?: true
    nombre?: true
    bio?: true
    fotoUrl?: true
    createdAt?: true
  }

  export type ColumnistaCountAggregateInputType = {
    id?: true
    nombre?: true
    bio?: true
    fotoUrl?: true
    redes?: true
    createdAt?: true
    _all?: true
  }

  export type ColumnistaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Columnista to aggregate.
     */
    where?: ColumnistaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Columnistas to fetch.
     */
    orderBy?: ColumnistaOrderByWithRelationInput | ColumnistaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ColumnistaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Columnistas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Columnistas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Columnistas
    **/
    _count?: true | ColumnistaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ColumnistaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ColumnistaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ColumnistaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ColumnistaMaxAggregateInputType
  }

  export type GetColumnistaAggregateType<T extends ColumnistaAggregateArgs> = {
        [P in keyof T & keyof AggregateColumnista]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateColumnista[P]>
      : GetScalarType<T[P], AggregateColumnista[P]>
  }




  export type ColumnistaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ColumnistaWhereInput
    orderBy?: ColumnistaOrderByWithAggregationInput | ColumnistaOrderByWithAggregationInput[]
    by: ColumnistaScalarFieldEnum[] | ColumnistaScalarFieldEnum
    having?: ColumnistaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ColumnistaCountAggregateInputType | true
    _avg?: ColumnistaAvgAggregateInputType
    _sum?: ColumnistaSumAggregateInputType
    _min?: ColumnistaMinAggregateInputType
    _max?: ColumnistaMaxAggregateInputType
  }

  export type ColumnistaGroupByOutputType = {
    id: number
    nombre: string
    bio: string
    fotoUrl: string | null
    redes: JsonValue | null
    createdAt: Date
    _count: ColumnistaCountAggregateOutputType | null
    _avg: ColumnistaAvgAggregateOutputType | null
    _sum: ColumnistaSumAggregateOutputType | null
    _min: ColumnistaMinAggregateOutputType | null
    _max: ColumnistaMaxAggregateOutputType | null
  }

  type GetColumnistaGroupByPayload<T extends ColumnistaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ColumnistaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ColumnistaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ColumnistaGroupByOutputType[P]>
            : GetScalarType<T[P], ColumnistaGroupByOutputType[P]>
        }
      >
    >


  export type ColumnistaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    bio?: boolean
    fotoUrl?: boolean
    redes?: boolean
    createdAt?: boolean
    opiniones?: boolean | Columnista$opinionesArgs<ExtArgs>
    _count?: boolean | ColumnistaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["columnista"]>

  export type ColumnistaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    bio?: boolean
    fotoUrl?: boolean
    redes?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["columnista"]>

  export type ColumnistaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    bio?: boolean
    fotoUrl?: boolean
    redes?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["columnista"]>

  export type ColumnistaSelectScalar = {
    id?: boolean
    nombre?: boolean
    bio?: boolean
    fotoUrl?: boolean
    redes?: boolean
    createdAt?: boolean
  }

  export type ColumnistaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "bio" | "fotoUrl" | "redes" | "createdAt", ExtArgs["result"]["columnista"]>
  export type ColumnistaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    opiniones?: boolean | Columnista$opinionesArgs<ExtArgs>
    _count?: boolean | ColumnistaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ColumnistaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ColumnistaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ColumnistaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Columnista"
    objects: {
      opiniones: Prisma.$OpinionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      bio: string
      fotoUrl: string | null
      redes: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["columnista"]>
    composites: {}
  }

  type ColumnistaGetPayload<S extends boolean | null | undefined | ColumnistaDefaultArgs> = $Result.GetResult<Prisma.$ColumnistaPayload, S>

  type ColumnistaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ColumnistaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ColumnistaCountAggregateInputType | true
    }

  export interface ColumnistaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Columnista'], meta: { name: 'Columnista' } }
    /**
     * Find zero or one Columnista that matches the filter.
     * @param {ColumnistaFindUniqueArgs} args - Arguments to find a Columnista
     * @example
     * // Get one Columnista
     * const columnista = await prisma.columnista.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ColumnistaFindUniqueArgs>(args: SelectSubset<T, ColumnistaFindUniqueArgs<ExtArgs>>): Prisma__ColumnistaClient<$Result.GetResult<Prisma.$ColumnistaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Columnista that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ColumnistaFindUniqueOrThrowArgs} args - Arguments to find a Columnista
     * @example
     * // Get one Columnista
     * const columnista = await prisma.columnista.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ColumnistaFindUniqueOrThrowArgs>(args: SelectSubset<T, ColumnistaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ColumnistaClient<$Result.GetResult<Prisma.$ColumnistaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Columnista that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnistaFindFirstArgs} args - Arguments to find a Columnista
     * @example
     * // Get one Columnista
     * const columnista = await prisma.columnista.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ColumnistaFindFirstArgs>(args?: SelectSubset<T, ColumnistaFindFirstArgs<ExtArgs>>): Prisma__ColumnistaClient<$Result.GetResult<Prisma.$ColumnistaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Columnista that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnistaFindFirstOrThrowArgs} args - Arguments to find a Columnista
     * @example
     * // Get one Columnista
     * const columnista = await prisma.columnista.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ColumnistaFindFirstOrThrowArgs>(args?: SelectSubset<T, ColumnistaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ColumnistaClient<$Result.GetResult<Prisma.$ColumnistaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Columnistas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnistaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Columnistas
     * const columnistas = await prisma.columnista.findMany()
     * 
     * // Get first 10 Columnistas
     * const columnistas = await prisma.columnista.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const columnistaWithIdOnly = await prisma.columnista.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ColumnistaFindManyArgs>(args?: SelectSubset<T, ColumnistaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColumnistaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Columnista.
     * @param {ColumnistaCreateArgs} args - Arguments to create a Columnista.
     * @example
     * // Create one Columnista
     * const Columnista = await prisma.columnista.create({
     *   data: {
     *     // ... data to create a Columnista
     *   }
     * })
     * 
     */
    create<T extends ColumnistaCreateArgs>(args: SelectSubset<T, ColumnistaCreateArgs<ExtArgs>>): Prisma__ColumnistaClient<$Result.GetResult<Prisma.$ColumnistaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Columnistas.
     * @param {ColumnistaCreateManyArgs} args - Arguments to create many Columnistas.
     * @example
     * // Create many Columnistas
     * const columnista = await prisma.columnista.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ColumnistaCreateManyArgs>(args?: SelectSubset<T, ColumnistaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Columnistas and returns the data saved in the database.
     * @param {ColumnistaCreateManyAndReturnArgs} args - Arguments to create many Columnistas.
     * @example
     * // Create many Columnistas
     * const columnista = await prisma.columnista.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Columnistas and only return the `id`
     * const columnistaWithIdOnly = await prisma.columnista.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ColumnistaCreateManyAndReturnArgs>(args?: SelectSubset<T, ColumnistaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColumnistaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Columnista.
     * @param {ColumnistaDeleteArgs} args - Arguments to delete one Columnista.
     * @example
     * // Delete one Columnista
     * const Columnista = await prisma.columnista.delete({
     *   where: {
     *     // ... filter to delete one Columnista
     *   }
     * })
     * 
     */
    delete<T extends ColumnistaDeleteArgs>(args: SelectSubset<T, ColumnistaDeleteArgs<ExtArgs>>): Prisma__ColumnistaClient<$Result.GetResult<Prisma.$ColumnistaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Columnista.
     * @param {ColumnistaUpdateArgs} args - Arguments to update one Columnista.
     * @example
     * // Update one Columnista
     * const columnista = await prisma.columnista.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ColumnistaUpdateArgs>(args: SelectSubset<T, ColumnistaUpdateArgs<ExtArgs>>): Prisma__ColumnistaClient<$Result.GetResult<Prisma.$ColumnistaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Columnistas.
     * @param {ColumnistaDeleteManyArgs} args - Arguments to filter Columnistas to delete.
     * @example
     * // Delete a few Columnistas
     * const { count } = await prisma.columnista.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ColumnistaDeleteManyArgs>(args?: SelectSubset<T, ColumnistaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Columnistas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnistaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Columnistas
     * const columnista = await prisma.columnista.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ColumnistaUpdateManyArgs>(args: SelectSubset<T, ColumnistaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Columnistas and returns the data updated in the database.
     * @param {ColumnistaUpdateManyAndReturnArgs} args - Arguments to update many Columnistas.
     * @example
     * // Update many Columnistas
     * const columnista = await prisma.columnista.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Columnistas and only return the `id`
     * const columnistaWithIdOnly = await prisma.columnista.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ColumnistaUpdateManyAndReturnArgs>(args: SelectSubset<T, ColumnistaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColumnistaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Columnista.
     * @param {ColumnistaUpsertArgs} args - Arguments to update or create a Columnista.
     * @example
     * // Update or create a Columnista
     * const columnista = await prisma.columnista.upsert({
     *   create: {
     *     // ... data to create a Columnista
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Columnista we want to update
     *   }
     * })
     */
    upsert<T extends ColumnistaUpsertArgs>(args: SelectSubset<T, ColumnistaUpsertArgs<ExtArgs>>): Prisma__ColumnistaClient<$Result.GetResult<Prisma.$ColumnistaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Columnistas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnistaCountArgs} args - Arguments to filter Columnistas to count.
     * @example
     * // Count the number of Columnistas
     * const count = await prisma.columnista.count({
     *   where: {
     *     // ... the filter for the Columnistas we want to count
     *   }
     * })
    **/
    count<T extends ColumnistaCountArgs>(
      args?: Subset<T, ColumnistaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ColumnistaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Columnista.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnistaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ColumnistaAggregateArgs>(args: Subset<T, ColumnistaAggregateArgs>): Prisma.PrismaPromise<GetColumnistaAggregateType<T>>

    /**
     * Group by Columnista.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnistaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ColumnistaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ColumnistaGroupByArgs['orderBy'] }
        : { orderBy?: ColumnistaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ColumnistaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetColumnistaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Columnista model
   */
  readonly fields: ColumnistaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Columnista.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ColumnistaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    opiniones<T extends Columnista$opinionesArgs<ExtArgs> = {}>(args?: Subset<T, Columnista$opinionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpinionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Columnista model
   */
  interface ColumnistaFieldRefs {
    readonly id: FieldRef<"Columnista", 'Int'>
    readonly nombre: FieldRef<"Columnista", 'String'>
    readonly bio: FieldRef<"Columnista", 'String'>
    readonly fotoUrl: FieldRef<"Columnista", 'String'>
    readonly redes: FieldRef<"Columnista", 'Json'>
    readonly createdAt: FieldRef<"Columnista", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Columnista findUnique
   */
  export type ColumnistaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columnista
     */
    select?: ColumnistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Columnista
     */
    omit?: ColumnistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnistaInclude<ExtArgs> | null
    /**
     * Filter, which Columnista to fetch.
     */
    where: ColumnistaWhereUniqueInput
  }

  /**
   * Columnista findUniqueOrThrow
   */
  export type ColumnistaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columnista
     */
    select?: ColumnistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Columnista
     */
    omit?: ColumnistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnistaInclude<ExtArgs> | null
    /**
     * Filter, which Columnista to fetch.
     */
    where: ColumnistaWhereUniqueInput
  }

  /**
   * Columnista findFirst
   */
  export type ColumnistaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columnista
     */
    select?: ColumnistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Columnista
     */
    omit?: ColumnistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnistaInclude<ExtArgs> | null
    /**
     * Filter, which Columnista to fetch.
     */
    where?: ColumnistaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Columnistas to fetch.
     */
    orderBy?: ColumnistaOrderByWithRelationInput | ColumnistaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Columnistas.
     */
    cursor?: ColumnistaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Columnistas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Columnistas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Columnistas.
     */
    distinct?: ColumnistaScalarFieldEnum | ColumnistaScalarFieldEnum[]
  }

  /**
   * Columnista findFirstOrThrow
   */
  export type ColumnistaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columnista
     */
    select?: ColumnistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Columnista
     */
    omit?: ColumnistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnistaInclude<ExtArgs> | null
    /**
     * Filter, which Columnista to fetch.
     */
    where?: ColumnistaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Columnistas to fetch.
     */
    orderBy?: ColumnistaOrderByWithRelationInput | ColumnistaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Columnistas.
     */
    cursor?: ColumnistaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Columnistas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Columnistas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Columnistas.
     */
    distinct?: ColumnistaScalarFieldEnum | ColumnistaScalarFieldEnum[]
  }

  /**
   * Columnista findMany
   */
  export type ColumnistaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columnista
     */
    select?: ColumnistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Columnista
     */
    omit?: ColumnistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnistaInclude<ExtArgs> | null
    /**
     * Filter, which Columnistas to fetch.
     */
    where?: ColumnistaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Columnistas to fetch.
     */
    orderBy?: ColumnistaOrderByWithRelationInput | ColumnistaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Columnistas.
     */
    cursor?: ColumnistaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Columnistas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Columnistas.
     */
    skip?: number
    distinct?: ColumnistaScalarFieldEnum | ColumnistaScalarFieldEnum[]
  }

  /**
   * Columnista create
   */
  export type ColumnistaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columnista
     */
    select?: ColumnistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Columnista
     */
    omit?: ColumnistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnistaInclude<ExtArgs> | null
    /**
     * The data needed to create a Columnista.
     */
    data: XOR<ColumnistaCreateInput, ColumnistaUncheckedCreateInput>
  }

  /**
   * Columnista createMany
   */
  export type ColumnistaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Columnistas.
     */
    data: ColumnistaCreateManyInput | ColumnistaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Columnista createManyAndReturn
   */
  export type ColumnistaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columnista
     */
    select?: ColumnistaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Columnista
     */
    omit?: ColumnistaOmit<ExtArgs> | null
    /**
     * The data used to create many Columnistas.
     */
    data: ColumnistaCreateManyInput | ColumnistaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Columnista update
   */
  export type ColumnistaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columnista
     */
    select?: ColumnistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Columnista
     */
    omit?: ColumnistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnistaInclude<ExtArgs> | null
    /**
     * The data needed to update a Columnista.
     */
    data: XOR<ColumnistaUpdateInput, ColumnistaUncheckedUpdateInput>
    /**
     * Choose, which Columnista to update.
     */
    where: ColumnistaWhereUniqueInput
  }

  /**
   * Columnista updateMany
   */
  export type ColumnistaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Columnistas.
     */
    data: XOR<ColumnistaUpdateManyMutationInput, ColumnistaUncheckedUpdateManyInput>
    /**
     * Filter which Columnistas to update
     */
    where?: ColumnistaWhereInput
    /**
     * Limit how many Columnistas to update.
     */
    limit?: number
  }

  /**
   * Columnista updateManyAndReturn
   */
  export type ColumnistaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columnista
     */
    select?: ColumnistaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Columnista
     */
    omit?: ColumnistaOmit<ExtArgs> | null
    /**
     * The data used to update Columnistas.
     */
    data: XOR<ColumnistaUpdateManyMutationInput, ColumnistaUncheckedUpdateManyInput>
    /**
     * Filter which Columnistas to update
     */
    where?: ColumnistaWhereInput
    /**
     * Limit how many Columnistas to update.
     */
    limit?: number
  }

  /**
   * Columnista upsert
   */
  export type ColumnistaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columnista
     */
    select?: ColumnistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Columnista
     */
    omit?: ColumnistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnistaInclude<ExtArgs> | null
    /**
     * The filter to search for the Columnista to update in case it exists.
     */
    where: ColumnistaWhereUniqueInput
    /**
     * In case the Columnista found by the `where` argument doesn't exist, create a new Columnista with this data.
     */
    create: XOR<ColumnistaCreateInput, ColumnistaUncheckedCreateInput>
    /**
     * In case the Columnista was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ColumnistaUpdateInput, ColumnistaUncheckedUpdateInput>
  }

  /**
   * Columnista delete
   */
  export type ColumnistaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columnista
     */
    select?: ColumnistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Columnista
     */
    omit?: ColumnistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnistaInclude<ExtArgs> | null
    /**
     * Filter which Columnista to delete.
     */
    where: ColumnistaWhereUniqueInput
  }

  /**
   * Columnista deleteMany
   */
  export type ColumnistaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Columnistas to delete
     */
    where?: ColumnistaWhereInput
    /**
     * Limit how many Columnistas to delete.
     */
    limit?: number
  }

  /**
   * Columnista.opiniones
   */
  export type Columnista$opinionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opinion
     */
    select?: OpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opinion
     */
    omit?: OpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpinionInclude<ExtArgs> | null
    where?: OpinionWhereInput
    orderBy?: OpinionOrderByWithRelationInput | OpinionOrderByWithRelationInput[]
    cursor?: OpinionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OpinionScalarFieldEnum | OpinionScalarFieldEnum[]
  }

  /**
   * Columnista without action
   */
  export type ColumnistaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columnista
     */
    select?: ColumnistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Columnista
     */
    omit?: ColumnistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnistaInclude<ExtArgs> | null
  }


  /**
   * Model Editorial
   */

  export type AggregateEditorial = {
    _count: EditorialCountAggregateOutputType | null
    _avg: EditorialAvgAggregateOutputType | null
    _sum: EditorialSumAggregateOutputType | null
    _min: EditorialMinAggregateOutputType | null
    _max: EditorialMaxAggregateOutputType | null
  }

  export type EditorialAvgAggregateOutputType = {
    id: number | null
  }

  export type EditorialSumAggregateOutputType = {
    id: number | null
  }

  export type EditorialMinAggregateOutputType = {
    id: number | null
    titulo: string | null
    contenido: string | null
    fecha: Date | null
    autor: string | null
  }

  export type EditorialMaxAggregateOutputType = {
    id: number | null
    titulo: string | null
    contenido: string | null
    fecha: Date | null
    autor: string | null
  }

  export type EditorialCountAggregateOutputType = {
    id: number
    titulo: number
    contenido: number
    fecha: number
    autor: number
    _all: number
  }


  export type EditorialAvgAggregateInputType = {
    id?: true
  }

  export type EditorialSumAggregateInputType = {
    id?: true
  }

  export type EditorialMinAggregateInputType = {
    id?: true
    titulo?: true
    contenido?: true
    fecha?: true
    autor?: true
  }

  export type EditorialMaxAggregateInputType = {
    id?: true
    titulo?: true
    contenido?: true
    fecha?: true
    autor?: true
  }

  export type EditorialCountAggregateInputType = {
    id?: true
    titulo?: true
    contenido?: true
    fecha?: true
    autor?: true
    _all?: true
  }

  export type EditorialAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Editorial to aggregate.
     */
    where?: EditorialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Editorials to fetch.
     */
    orderBy?: EditorialOrderByWithRelationInput | EditorialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EditorialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Editorials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Editorials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Editorials
    **/
    _count?: true | EditorialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EditorialAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EditorialSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EditorialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EditorialMaxAggregateInputType
  }

  export type GetEditorialAggregateType<T extends EditorialAggregateArgs> = {
        [P in keyof T & keyof AggregateEditorial]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEditorial[P]>
      : GetScalarType<T[P], AggregateEditorial[P]>
  }




  export type EditorialGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EditorialWhereInput
    orderBy?: EditorialOrderByWithAggregationInput | EditorialOrderByWithAggregationInput[]
    by: EditorialScalarFieldEnum[] | EditorialScalarFieldEnum
    having?: EditorialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EditorialCountAggregateInputType | true
    _avg?: EditorialAvgAggregateInputType
    _sum?: EditorialSumAggregateInputType
    _min?: EditorialMinAggregateInputType
    _max?: EditorialMaxAggregateInputType
  }

  export type EditorialGroupByOutputType = {
    id: number
    titulo: string
    contenido: string
    fecha: Date
    autor: string | null
    _count: EditorialCountAggregateOutputType | null
    _avg: EditorialAvgAggregateOutputType | null
    _sum: EditorialSumAggregateOutputType | null
    _min: EditorialMinAggregateOutputType | null
    _max: EditorialMaxAggregateOutputType | null
  }

  type GetEditorialGroupByPayload<T extends EditorialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EditorialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EditorialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EditorialGroupByOutputType[P]>
            : GetScalarType<T[P], EditorialGroupByOutputType[P]>
        }
      >
    >


  export type EditorialSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    contenido?: boolean
    fecha?: boolean
    autor?: boolean
    media?: boolean | Editorial$mediaArgs<ExtArgs>
    _count?: boolean | EditorialCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["editorial"]>

  export type EditorialSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    contenido?: boolean
    fecha?: boolean
    autor?: boolean
  }, ExtArgs["result"]["editorial"]>

  export type EditorialSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    contenido?: boolean
    fecha?: boolean
    autor?: boolean
  }, ExtArgs["result"]["editorial"]>

  export type EditorialSelectScalar = {
    id?: boolean
    titulo?: boolean
    contenido?: boolean
    fecha?: boolean
    autor?: boolean
  }

  export type EditorialOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "titulo" | "contenido" | "fecha" | "autor", ExtArgs["result"]["editorial"]>
  export type EditorialInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    media?: boolean | Editorial$mediaArgs<ExtArgs>
    _count?: boolean | EditorialCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EditorialIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EditorialIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EditorialPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Editorial"
    objects: {
      media: Prisma.$MediaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titulo: string
      contenido: string
      fecha: Date
      autor: string | null
    }, ExtArgs["result"]["editorial"]>
    composites: {}
  }

  type EditorialGetPayload<S extends boolean | null | undefined | EditorialDefaultArgs> = $Result.GetResult<Prisma.$EditorialPayload, S>

  type EditorialCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EditorialFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EditorialCountAggregateInputType | true
    }

  export interface EditorialDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Editorial'], meta: { name: 'Editorial' } }
    /**
     * Find zero or one Editorial that matches the filter.
     * @param {EditorialFindUniqueArgs} args - Arguments to find a Editorial
     * @example
     * // Get one Editorial
     * const editorial = await prisma.editorial.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EditorialFindUniqueArgs>(args: SelectSubset<T, EditorialFindUniqueArgs<ExtArgs>>): Prisma__EditorialClient<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Editorial that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EditorialFindUniqueOrThrowArgs} args - Arguments to find a Editorial
     * @example
     * // Get one Editorial
     * const editorial = await prisma.editorial.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EditorialFindUniqueOrThrowArgs>(args: SelectSubset<T, EditorialFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EditorialClient<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Editorial that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EditorialFindFirstArgs} args - Arguments to find a Editorial
     * @example
     * // Get one Editorial
     * const editorial = await prisma.editorial.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EditorialFindFirstArgs>(args?: SelectSubset<T, EditorialFindFirstArgs<ExtArgs>>): Prisma__EditorialClient<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Editorial that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EditorialFindFirstOrThrowArgs} args - Arguments to find a Editorial
     * @example
     * // Get one Editorial
     * const editorial = await prisma.editorial.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EditorialFindFirstOrThrowArgs>(args?: SelectSubset<T, EditorialFindFirstOrThrowArgs<ExtArgs>>): Prisma__EditorialClient<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Editorials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EditorialFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Editorials
     * const editorials = await prisma.editorial.findMany()
     * 
     * // Get first 10 Editorials
     * const editorials = await prisma.editorial.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const editorialWithIdOnly = await prisma.editorial.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EditorialFindManyArgs>(args?: SelectSubset<T, EditorialFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Editorial.
     * @param {EditorialCreateArgs} args - Arguments to create a Editorial.
     * @example
     * // Create one Editorial
     * const Editorial = await prisma.editorial.create({
     *   data: {
     *     // ... data to create a Editorial
     *   }
     * })
     * 
     */
    create<T extends EditorialCreateArgs>(args: SelectSubset<T, EditorialCreateArgs<ExtArgs>>): Prisma__EditorialClient<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Editorials.
     * @param {EditorialCreateManyArgs} args - Arguments to create many Editorials.
     * @example
     * // Create many Editorials
     * const editorial = await prisma.editorial.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EditorialCreateManyArgs>(args?: SelectSubset<T, EditorialCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Editorials and returns the data saved in the database.
     * @param {EditorialCreateManyAndReturnArgs} args - Arguments to create many Editorials.
     * @example
     * // Create many Editorials
     * const editorial = await prisma.editorial.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Editorials and only return the `id`
     * const editorialWithIdOnly = await prisma.editorial.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EditorialCreateManyAndReturnArgs>(args?: SelectSubset<T, EditorialCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Editorial.
     * @param {EditorialDeleteArgs} args - Arguments to delete one Editorial.
     * @example
     * // Delete one Editorial
     * const Editorial = await prisma.editorial.delete({
     *   where: {
     *     // ... filter to delete one Editorial
     *   }
     * })
     * 
     */
    delete<T extends EditorialDeleteArgs>(args: SelectSubset<T, EditorialDeleteArgs<ExtArgs>>): Prisma__EditorialClient<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Editorial.
     * @param {EditorialUpdateArgs} args - Arguments to update one Editorial.
     * @example
     * // Update one Editorial
     * const editorial = await prisma.editorial.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EditorialUpdateArgs>(args: SelectSubset<T, EditorialUpdateArgs<ExtArgs>>): Prisma__EditorialClient<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Editorials.
     * @param {EditorialDeleteManyArgs} args - Arguments to filter Editorials to delete.
     * @example
     * // Delete a few Editorials
     * const { count } = await prisma.editorial.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EditorialDeleteManyArgs>(args?: SelectSubset<T, EditorialDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Editorials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EditorialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Editorials
     * const editorial = await prisma.editorial.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EditorialUpdateManyArgs>(args: SelectSubset<T, EditorialUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Editorials and returns the data updated in the database.
     * @param {EditorialUpdateManyAndReturnArgs} args - Arguments to update many Editorials.
     * @example
     * // Update many Editorials
     * const editorial = await prisma.editorial.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Editorials and only return the `id`
     * const editorialWithIdOnly = await prisma.editorial.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EditorialUpdateManyAndReturnArgs>(args: SelectSubset<T, EditorialUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Editorial.
     * @param {EditorialUpsertArgs} args - Arguments to update or create a Editorial.
     * @example
     * // Update or create a Editorial
     * const editorial = await prisma.editorial.upsert({
     *   create: {
     *     // ... data to create a Editorial
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Editorial we want to update
     *   }
     * })
     */
    upsert<T extends EditorialUpsertArgs>(args: SelectSubset<T, EditorialUpsertArgs<ExtArgs>>): Prisma__EditorialClient<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Editorials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EditorialCountArgs} args - Arguments to filter Editorials to count.
     * @example
     * // Count the number of Editorials
     * const count = await prisma.editorial.count({
     *   where: {
     *     // ... the filter for the Editorials we want to count
     *   }
     * })
    **/
    count<T extends EditorialCountArgs>(
      args?: Subset<T, EditorialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EditorialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Editorial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EditorialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EditorialAggregateArgs>(args: Subset<T, EditorialAggregateArgs>): Prisma.PrismaPromise<GetEditorialAggregateType<T>>

    /**
     * Group by Editorial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EditorialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EditorialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EditorialGroupByArgs['orderBy'] }
        : { orderBy?: EditorialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EditorialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEditorialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Editorial model
   */
  readonly fields: EditorialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Editorial.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EditorialClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    media<T extends Editorial$mediaArgs<ExtArgs> = {}>(args?: Subset<T, Editorial$mediaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Editorial model
   */
  interface EditorialFieldRefs {
    readonly id: FieldRef<"Editorial", 'Int'>
    readonly titulo: FieldRef<"Editorial", 'String'>
    readonly contenido: FieldRef<"Editorial", 'String'>
    readonly fecha: FieldRef<"Editorial", 'DateTime'>
    readonly autor: FieldRef<"Editorial", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Editorial findUnique
   */
  export type EditorialFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
    /**
     * Filter, which Editorial to fetch.
     */
    where: EditorialWhereUniqueInput
  }

  /**
   * Editorial findUniqueOrThrow
   */
  export type EditorialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
    /**
     * Filter, which Editorial to fetch.
     */
    where: EditorialWhereUniqueInput
  }

  /**
   * Editorial findFirst
   */
  export type EditorialFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
    /**
     * Filter, which Editorial to fetch.
     */
    where?: EditorialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Editorials to fetch.
     */
    orderBy?: EditorialOrderByWithRelationInput | EditorialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Editorials.
     */
    cursor?: EditorialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Editorials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Editorials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Editorials.
     */
    distinct?: EditorialScalarFieldEnum | EditorialScalarFieldEnum[]
  }

  /**
   * Editorial findFirstOrThrow
   */
  export type EditorialFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
    /**
     * Filter, which Editorial to fetch.
     */
    where?: EditorialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Editorials to fetch.
     */
    orderBy?: EditorialOrderByWithRelationInput | EditorialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Editorials.
     */
    cursor?: EditorialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Editorials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Editorials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Editorials.
     */
    distinct?: EditorialScalarFieldEnum | EditorialScalarFieldEnum[]
  }

  /**
   * Editorial findMany
   */
  export type EditorialFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
    /**
     * Filter, which Editorials to fetch.
     */
    where?: EditorialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Editorials to fetch.
     */
    orderBy?: EditorialOrderByWithRelationInput | EditorialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Editorials.
     */
    cursor?: EditorialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Editorials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Editorials.
     */
    skip?: number
    distinct?: EditorialScalarFieldEnum | EditorialScalarFieldEnum[]
  }

  /**
   * Editorial create
   */
  export type EditorialCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
    /**
     * The data needed to create a Editorial.
     */
    data: XOR<EditorialCreateInput, EditorialUncheckedCreateInput>
  }

  /**
   * Editorial createMany
   */
  export type EditorialCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Editorials.
     */
    data: EditorialCreateManyInput | EditorialCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Editorial createManyAndReturn
   */
  export type EditorialCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * The data used to create many Editorials.
     */
    data: EditorialCreateManyInput | EditorialCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Editorial update
   */
  export type EditorialUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
    /**
     * The data needed to update a Editorial.
     */
    data: XOR<EditorialUpdateInput, EditorialUncheckedUpdateInput>
    /**
     * Choose, which Editorial to update.
     */
    where: EditorialWhereUniqueInput
  }

  /**
   * Editorial updateMany
   */
  export type EditorialUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Editorials.
     */
    data: XOR<EditorialUpdateManyMutationInput, EditorialUncheckedUpdateManyInput>
    /**
     * Filter which Editorials to update
     */
    where?: EditorialWhereInput
    /**
     * Limit how many Editorials to update.
     */
    limit?: number
  }

  /**
   * Editorial updateManyAndReturn
   */
  export type EditorialUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * The data used to update Editorials.
     */
    data: XOR<EditorialUpdateManyMutationInput, EditorialUncheckedUpdateManyInput>
    /**
     * Filter which Editorials to update
     */
    where?: EditorialWhereInput
    /**
     * Limit how many Editorials to update.
     */
    limit?: number
  }

  /**
   * Editorial upsert
   */
  export type EditorialUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
    /**
     * The filter to search for the Editorial to update in case it exists.
     */
    where: EditorialWhereUniqueInput
    /**
     * In case the Editorial found by the `where` argument doesn't exist, create a new Editorial with this data.
     */
    create: XOR<EditorialCreateInput, EditorialUncheckedCreateInput>
    /**
     * In case the Editorial was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EditorialUpdateInput, EditorialUncheckedUpdateInput>
  }

  /**
   * Editorial delete
   */
  export type EditorialDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
    /**
     * Filter which Editorial to delete.
     */
    where: EditorialWhereUniqueInput
  }

  /**
   * Editorial deleteMany
   */
  export type EditorialDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Editorials to delete
     */
    where?: EditorialWhereInput
    /**
     * Limit how many Editorials to delete.
     */
    limit?: number
  }

  /**
   * Editorial.media
   */
  export type Editorial$mediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Media
     */
    omit?: MediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaInclude<ExtArgs> | null
    where?: MediaWhereInput
    orderBy?: MediaOrderByWithRelationInput | MediaOrderByWithRelationInput[]
    cursor?: MediaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaScalarFieldEnum | MediaScalarFieldEnum[]
  }

  /**
   * Editorial without action
   */
  export type EditorialDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
  }


  /**
   * Model Opinion
   */

  export type AggregateOpinion = {
    _count: OpinionCountAggregateOutputType | null
    _avg: OpinionAvgAggregateOutputType | null
    _sum: OpinionSumAggregateOutputType | null
    _min: OpinionMinAggregateOutputType | null
    _max: OpinionMaxAggregateOutputType | null
  }

  export type OpinionAvgAggregateOutputType = {
    id: number | null
    columnistaId: number | null
  }

  export type OpinionSumAggregateOutputType = {
    id: number | null
    columnistaId: number | null
  }

  export type OpinionMinAggregateOutputType = {
    id: number | null
    titulo: string | null
    contenido: string | null
    fecha: Date | null
    columnistaId: number | null
    destacado: boolean | null
  }

  export type OpinionMaxAggregateOutputType = {
    id: number | null
    titulo: string | null
    contenido: string | null
    fecha: Date | null
    columnistaId: number | null
    destacado: boolean | null
  }

  export type OpinionCountAggregateOutputType = {
    id: number
    titulo: number
    contenido: number
    fecha: number
    columnistaId: number
    destacado: number
    _all: number
  }


  export type OpinionAvgAggregateInputType = {
    id?: true
    columnistaId?: true
  }

  export type OpinionSumAggregateInputType = {
    id?: true
    columnistaId?: true
  }

  export type OpinionMinAggregateInputType = {
    id?: true
    titulo?: true
    contenido?: true
    fecha?: true
    columnistaId?: true
    destacado?: true
  }

  export type OpinionMaxAggregateInputType = {
    id?: true
    titulo?: true
    contenido?: true
    fecha?: true
    columnistaId?: true
    destacado?: true
  }

  export type OpinionCountAggregateInputType = {
    id?: true
    titulo?: true
    contenido?: true
    fecha?: true
    columnistaId?: true
    destacado?: true
    _all?: true
  }

  export type OpinionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Opinion to aggregate.
     */
    where?: OpinionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Opinions to fetch.
     */
    orderBy?: OpinionOrderByWithRelationInput | OpinionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OpinionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Opinions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Opinions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Opinions
    **/
    _count?: true | OpinionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OpinionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OpinionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OpinionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OpinionMaxAggregateInputType
  }

  export type GetOpinionAggregateType<T extends OpinionAggregateArgs> = {
        [P in keyof T & keyof AggregateOpinion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOpinion[P]>
      : GetScalarType<T[P], AggregateOpinion[P]>
  }




  export type OpinionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OpinionWhereInput
    orderBy?: OpinionOrderByWithAggregationInput | OpinionOrderByWithAggregationInput[]
    by: OpinionScalarFieldEnum[] | OpinionScalarFieldEnum
    having?: OpinionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OpinionCountAggregateInputType | true
    _avg?: OpinionAvgAggregateInputType
    _sum?: OpinionSumAggregateInputType
    _min?: OpinionMinAggregateInputType
    _max?: OpinionMaxAggregateInputType
  }

  export type OpinionGroupByOutputType = {
    id: number
    titulo: string
    contenido: string
    fecha: Date
    columnistaId: number
    destacado: boolean
    _count: OpinionCountAggregateOutputType | null
    _avg: OpinionAvgAggregateOutputType | null
    _sum: OpinionSumAggregateOutputType | null
    _min: OpinionMinAggregateOutputType | null
    _max: OpinionMaxAggregateOutputType | null
  }

  type GetOpinionGroupByPayload<T extends OpinionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OpinionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OpinionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OpinionGroupByOutputType[P]>
            : GetScalarType<T[P], OpinionGroupByOutputType[P]>
        }
      >
    >


  export type OpinionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    contenido?: boolean
    fecha?: boolean
    columnistaId?: boolean
    destacado?: boolean
    columnista?: boolean | ColumnistaDefaultArgs<ExtArgs>
    media?: boolean | Opinion$mediaArgs<ExtArgs>
    _count?: boolean | OpinionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["opinion"]>

  export type OpinionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    contenido?: boolean
    fecha?: boolean
    columnistaId?: boolean
    destacado?: boolean
    columnista?: boolean | ColumnistaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["opinion"]>

  export type OpinionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    contenido?: boolean
    fecha?: boolean
    columnistaId?: boolean
    destacado?: boolean
    columnista?: boolean | ColumnistaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["opinion"]>

  export type OpinionSelectScalar = {
    id?: boolean
    titulo?: boolean
    contenido?: boolean
    fecha?: boolean
    columnistaId?: boolean
    destacado?: boolean
  }

  export type OpinionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "titulo" | "contenido" | "fecha" | "columnistaId" | "destacado", ExtArgs["result"]["opinion"]>
  export type OpinionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    columnista?: boolean | ColumnistaDefaultArgs<ExtArgs>
    media?: boolean | Opinion$mediaArgs<ExtArgs>
    _count?: boolean | OpinionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OpinionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    columnista?: boolean | ColumnistaDefaultArgs<ExtArgs>
  }
  export type OpinionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    columnista?: boolean | ColumnistaDefaultArgs<ExtArgs>
  }

  export type $OpinionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Opinion"
    objects: {
      columnista: Prisma.$ColumnistaPayload<ExtArgs>
      media: Prisma.$MediaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titulo: string
      contenido: string
      fecha: Date
      columnistaId: number
      destacado: boolean
    }, ExtArgs["result"]["opinion"]>
    composites: {}
  }

  type OpinionGetPayload<S extends boolean | null | undefined | OpinionDefaultArgs> = $Result.GetResult<Prisma.$OpinionPayload, S>

  type OpinionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OpinionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OpinionCountAggregateInputType | true
    }

  export interface OpinionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Opinion'], meta: { name: 'Opinion' } }
    /**
     * Find zero or one Opinion that matches the filter.
     * @param {OpinionFindUniqueArgs} args - Arguments to find a Opinion
     * @example
     * // Get one Opinion
     * const opinion = await prisma.opinion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OpinionFindUniqueArgs>(args: SelectSubset<T, OpinionFindUniqueArgs<ExtArgs>>): Prisma__OpinionClient<$Result.GetResult<Prisma.$OpinionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Opinion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OpinionFindUniqueOrThrowArgs} args - Arguments to find a Opinion
     * @example
     * // Get one Opinion
     * const opinion = await prisma.opinion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OpinionFindUniqueOrThrowArgs>(args: SelectSubset<T, OpinionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OpinionClient<$Result.GetResult<Prisma.$OpinionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Opinion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpinionFindFirstArgs} args - Arguments to find a Opinion
     * @example
     * // Get one Opinion
     * const opinion = await prisma.opinion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OpinionFindFirstArgs>(args?: SelectSubset<T, OpinionFindFirstArgs<ExtArgs>>): Prisma__OpinionClient<$Result.GetResult<Prisma.$OpinionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Opinion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpinionFindFirstOrThrowArgs} args - Arguments to find a Opinion
     * @example
     * // Get one Opinion
     * const opinion = await prisma.opinion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OpinionFindFirstOrThrowArgs>(args?: SelectSubset<T, OpinionFindFirstOrThrowArgs<ExtArgs>>): Prisma__OpinionClient<$Result.GetResult<Prisma.$OpinionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Opinions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpinionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Opinions
     * const opinions = await prisma.opinion.findMany()
     * 
     * // Get first 10 Opinions
     * const opinions = await prisma.opinion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const opinionWithIdOnly = await prisma.opinion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OpinionFindManyArgs>(args?: SelectSubset<T, OpinionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpinionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Opinion.
     * @param {OpinionCreateArgs} args - Arguments to create a Opinion.
     * @example
     * // Create one Opinion
     * const Opinion = await prisma.opinion.create({
     *   data: {
     *     // ... data to create a Opinion
     *   }
     * })
     * 
     */
    create<T extends OpinionCreateArgs>(args: SelectSubset<T, OpinionCreateArgs<ExtArgs>>): Prisma__OpinionClient<$Result.GetResult<Prisma.$OpinionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Opinions.
     * @param {OpinionCreateManyArgs} args - Arguments to create many Opinions.
     * @example
     * // Create many Opinions
     * const opinion = await prisma.opinion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OpinionCreateManyArgs>(args?: SelectSubset<T, OpinionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Opinions and returns the data saved in the database.
     * @param {OpinionCreateManyAndReturnArgs} args - Arguments to create many Opinions.
     * @example
     * // Create many Opinions
     * const opinion = await prisma.opinion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Opinions and only return the `id`
     * const opinionWithIdOnly = await prisma.opinion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OpinionCreateManyAndReturnArgs>(args?: SelectSubset<T, OpinionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpinionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Opinion.
     * @param {OpinionDeleteArgs} args - Arguments to delete one Opinion.
     * @example
     * // Delete one Opinion
     * const Opinion = await prisma.opinion.delete({
     *   where: {
     *     // ... filter to delete one Opinion
     *   }
     * })
     * 
     */
    delete<T extends OpinionDeleteArgs>(args: SelectSubset<T, OpinionDeleteArgs<ExtArgs>>): Prisma__OpinionClient<$Result.GetResult<Prisma.$OpinionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Opinion.
     * @param {OpinionUpdateArgs} args - Arguments to update one Opinion.
     * @example
     * // Update one Opinion
     * const opinion = await prisma.opinion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OpinionUpdateArgs>(args: SelectSubset<T, OpinionUpdateArgs<ExtArgs>>): Prisma__OpinionClient<$Result.GetResult<Prisma.$OpinionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Opinions.
     * @param {OpinionDeleteManyArgs} args - Arguments to filter Opinions to delete.
     * @example
     * // Delete a few Opinions
     * const { count } = await prisma.opinion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OpinionDeleteManyArgs>(args?: SelectSubset<T, OpinionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Opinions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpinionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Opinions
     * const opinion = await prisma.opinion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OpinionUpdateManyArgs>(args: SelectSubset<T, OpinionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Opinions and returns the data updated in the database.
     * @param {OpinionUpdateManyAndReturnArgs} args - Arguments to update many Opinions.
     * @example
     * // Update many Opinions
     * const opinion = await prisma.opinion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Opinions and only return the `id`
     * const opinionWithIdOnly = await prisma.opinion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OpinionUpdateManyAndReturnArgs>(args: SelectSubset<T, OpinionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpinionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Opinion.
     * @param {OpinionUpsertArgs} args - Arguments to update or create a Opinion.
     * @example
     * // Update or create a Opinion
     * const opinion = await prisma.opinion.upsert({
     *   create: {
     *     // ... data to create a Opinion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Opinion we want to update
     *   }
     * })
     */
    upsert<T extends OpinionUpsertArgs>(args: SelectSubset<T, OpinionUpsertArgs<ExtArgs>>): Prisma__OpinionClient<$Result.GetResult<Prisma.$OpinionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Opinions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpinionCountArgs} args - Arguments to filter Opinions to count.
     * @example
     * // Count the number of Opinions
     * const count = await prisma.opinion.count({
     *   where: {
     *     // ... the filter for the Opinions we want to count
     *   }
     * })
    **/
    count<T extends OpinionCountArgs>(
      args?: Subset<T, OpinionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OpinionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Opinion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpinionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OpinionAggregateArgs>(args: Subset<T, OpinionAggregateArgs>): Prisma.PrismaPromise<GetOpinionAggregateType<T>>

    /**
     * Group by Opinion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpinionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OpinionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OpinionGroupByArgs['orderBy'] }
        : { orderBy?: OpinionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OpinionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOpinionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Opinion model
   */
  readonly fields: OpinionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Opinion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OpinionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    columnista<T extends ColumnistaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ColumnistaDefaultArgs<ExtArgs>>): Prisma__ColumnistaClient<$Result.GetResult<Prisma.$ColumnistaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    media<T extends Opinion$mediaArgs<ExtArgs> = {}>(args?: Subset<T, Opinion$mediaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Opinion model
   */
  interface OpinionFieldRefs {
    readonly id: FieldRef<"Opinion", 'Int'>
    readonly titulo: FieldRef<"Opinion", 'String'>
    readonly contenido: FieldRef<"Opinion", 'String'>
    readonly fecha: FieldRef<"Opinion", 'DateTime'>
    readonly columnistaId: FieldRef<"Opinion", 'Int'>
    readonly destacado: FieldRef<"Opinion", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Opinion findUnique
   */
  export type OpinionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opinion
     */
    select?: OpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opinion
     */
    omit?: OpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpinionInclude<ExtArgs> | null
    /**
     * Filter, which Opinion to fetch.
     */
    where: OpinionWhereUniqueInput
  }

  /**
   * Opinion findUniqueOrThrow
   */
  export type OpinionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opinion
     */
    select?: OpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opinion
     */
    omit?: OpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpinionInclude<ExtArgs> | null
    /**
     * Filter, which Opinion to fetch.
     */
    where: OpinionWhereUniqueInput
  }

  /**
   * Opinion findFirst
   */
  export type OpinionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opinion
     */
    select?: OpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opinion
     */
    omit?: OpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpinionInclude<ExtArgs> | null
    /**
     * Filter, which Opinion to fetch.
     */
    where?: OpinionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Opinions to fetch.
     */
    orderBy?: OpinionOrderByWithRelationInput | OpinionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Opinions.
     */
    cursor?: OpinionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Opinions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Opinions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Opinions.
     */
    distinct?: OpinionScalarFieldEnum | OpinionScalarFieldEnum[]
  }

  /**
   * Opinion findFirstOrThrow
   */
  export type OpinionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opinion
     */
    select?: OpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opinion
     */
    omit?: OpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpinionInclude<ExtArgs> | null
    /**
     * Filter, which Opinion to fetch.
     */
    where?: OpinionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Opinions to fetch.
     */
    orderBy?: OpinionOrderByWithRelationInput | OpinionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Opinions.
     */
    cursor?: OpinionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Opinions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Opinions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Opinions.
     */
    distinct?: OpinionScalarFieldEnum | OpinionScalarFieldEnum[]
  }

  /**
   * Opinion findMany
   */
  export type OpinionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opinion
     */
    select?: OpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opinion
     */
    omit?: OpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpinionInclude<ExtArgs> | null
    /**
     * Filter, which Opinions to fetch.
     */
    where?: OpinionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Opinions to fetch.
     */
    orderBy?: OpinionOrderByWithRelationInput | OpinionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Opinions.
     */
    cursor?: OpinionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Opinions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Opinions.
     */
    skip?: number
    distinct?: OpinionScalarFieldEnum | OpinionScalarFieldEnum[]
  }

  /**
   * Opinion create
   */
  export type OpinionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opinion
     */
    select?: OpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opinion
     */
    omit?: OpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpinionInclude<ExtArgs> | null
    /**
     * The data needed to create a Opinion.
     */
    data: XOR<OpinionCreateInput, OpinionUncheckedCreateInput>
  }

  /**
   * Opinion createMany
   */
  export type OpinionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Opinions.
     */
    data: OpinionCreateManyInput | OpinionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Opinion createManyAndReturn
   */
  export type OpinionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opinion
     */
    select?: OpinionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Opinion
     */
    omit?: OpinionOmit<ExtArgs> | null
    /**
     * The data used to create many Opinions.
     */
    data: OpinionCreateManyInput | OpinionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpinionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Opinion update
   */
  export type OpinionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opinion
     */
    select?: OpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opinion
     */
    omit?: OpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpinionInclude<ExtArgs> | null
    /**
     * The data needed to update a Opinion.
     */
    data: XOR<OpinionUpdateInput, OpinionUncheckedUpdateInput>
    /**
     * Choose, which Opinion to update.
     */
    where: OpinionWhereUniqueInput
  }

  /**
   * Opinion updateMany
   */
  export type OpinionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Opinions.
     */
    data: XOR<OpinionUpdateManyMutationInput, OpinionUncheckedUpdateManyInput>
    /**
     * Filter which Opinions to update
     */
    where?: OpinionWhereInput
    /**
     * Limit how many Opinions to update.
     */
    limit?: number
  }

  /**
   * Opinion updateManyAndReturn
   */
  export type OpinionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opinion
     */
    select?: OpinionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Opinion
     */
    omit?: OpinionOmit<ExtArgs> | null
    /**
     * The data used to update Opinions.
     */
    data: XOR<OpinionUpdateManyMutationInput, OpinionUncheckedUpdateManyInput>
    /**
     * Filter which Opinions to update
     */
    where?: OpinionWhereInput
    /**
     * Limit how many Opinions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpinionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Opinion upsert
   */
  export type OpinionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opinion
     */
    select?: OpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opinion
     */
    omit?: OpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpinionInclude<ExtArgs> | null
    /**
     * The filter to search for the Opinion to update in case it exists.
     */
    where: OpinionWhereUniqueInput
    /**
     * In case the Opinion found by the `where` argument doesn't exist, create a new Opinion with this data.
     */
    create: XOR<OpinionCreateInput, OpinionUncheckedCreateInput>
    /**
     * In case the Opinion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OpinionUpdateInput, OpinionUncheckedUpdateInput>
  }

  /**
   * Opinion delete
   */
  export type OpinionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opinion
     */
    select?: OpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opinion
     */
    omit?: OpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpinionInclude<ExtArgs> | null
    /**
     * Filter which Opinion to delete.
     */
    where: OpinionWhereUniqueInput
  }

  /**
   * Opinion deleteMany
   */
  export type OpinionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Opinions to delete
     */
    where?: OpinionWhereInput
    /**
     * Limit how many Opinions to delete.
     */
    limit?: number
  }

  /**
   * Opinion.media
   */
  export type Opinion$mediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Media
     */
    omit?: MediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaInclude<ExtArgs> | null
    where?: MediaWhereInput
    orderBy?: MediaOrderByWithRelationInput | MediaOrderByWithRelationInput[]
    cursor?: MediaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaScalarFieldEnum | MediaScalarFieldEnum[]
  }

  /**
   * Opinion without action
   */
  export type OpinionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opinion
     */
    select?: OpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opinion
     */
    omit?: OpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpinionInclude<ExtArgs> | null
  }


  /**
   * Model Media
   */

  export type AggregateMedia = {
    _count: MediaCountAggregateOutputType | null
    _avg: MediaAvgAggregateOutputType | null
    _sum: MediaSumAggregateOutputType | null
    _min: MediaMinAggregateOutputType | null
    _max: MediaMaxAggregateOutputType | null
  }

  export type MediaAvgAggregateOutputType = {
    id: number | null
    editorialId: number | null
    opinionId: number | null
  }

  export type MediaSumAggregateOutputType = {
    id: number | null
    editorialId: number | null
    opinionId: number | null
  }

  export type MediaMinAggregateOutputType = {
    id: number | null
    url: string | null
    tipo: $Enums.MediaTipo | null
    descripcion: string | null
    editorialId: number | null
    opinionId: number | null
  }

  export type MediaMaxAggregateOutputType = {
    id: number | null
    url: string | null
    tipo: $Enums.MediaTipo | null
    descripcion: string | null
    editorialId: number | null
    opinionId: number | null
  }

  export type MediaCountAggregateOutputType = {
    id: number
    url: number
    tipo: number
    descripcion: number
    editorialId: number
    opinionId: number
    _all: number
  }


  export type MediaAvgAggregateInputType = {
    id?: true
    editorialId?: true
    opinionId?: true
  }

  export type MediaSumAggregateInputType = {
    id?: true
    editorialId?: true
    opinionId?: true
  }

  export type MediaMinAggregateInputType = {
    id?: true
    url?: true
    tipo?: true
    descripcion?: true
    editorialId?: true
    opinionId?: true
  }

  export type MediaMaxAggregateInputType = {
    id?: true
    url?: true
    tipo?: true
    descripcion?: true
    editorialId?: true
    opinionId?: true
  }

  export type MediaCountAggregateInputType = {
    id?: true
    url?: true
    tipo?: true
    descripcion?: true
    editorialId?: true
    opinionId?: true
    _all?: true
  }

  export type MediaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Media to aggregate.
     */
    where?: MediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Media to fetch.
     */
    orderBy?: MediaOrderByWithRelationInput | MediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Media from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Media.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Media
    **/
    _count?: true | MediaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MediaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MediaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MediaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MediaMaxAggregateInputType
  }

  export type GetMediaAggregateType<T extends MediaAggregateArgs> = {
        [P in keyof T & keyof AggregateMedia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedia[P]>
      : GetScalarType<T[P], AggregateMedia[P]>
  }




  export type MediaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaWhereInput
    orderBy?: MediaOrderByWithAggregationInput | MediaOrderByWithAggregationInput[]
    by: MediaScalarFieldEnum[] | MediaScalarFieldEnum
    having?: MediaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MediaCountAggregateInputType | true
    _avg?: MediaAvgAggregateInputType
    _sum?: MediaSumAggregateInputType
    _min?: MediaMinAggregateInputType
    _max?: MediaMaxAggregateInputType
  }

  export type MediaGroupByOutputType = {
    id: number
    url: string
    tipo: $Enums.MediaTipo
    descripcion: string | null
    editorialId: number | null
    opinionId: number | null
    _count: MediaCountAggregateOutputType | null
    _avg: MediaAvgAggregateOutputType | null
    _sum: MediaSumAggregateOutputType | null
    _min: MediaMinAggregateOutputType | null
    _max: MediaMaxAggregateOutputType | null
  }

  type GetMediaGroupByPayload<T extends MediaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MediaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MediaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MediaGroupByOutputType[P]>
            : GetScalarType<T[P], MediaGroupByOutputType[P]>
        }
      >
    >


  export type MediaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    tipo?: boolean
    descripcion?: boolean
    editorialId?: boolean
    opinionId?: boolean
    noticiaMedia?: boolean | Media$noticiaMediaArgs<ExtArgs>
    editorial?: boolean | Media$editorialArgs<ExtArgs>
    opinion?: boolean | Media$opinionArgs<ExtArgs>
    _count?: boolean | MediaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["media"]>

  export type MediaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    tipo?: boolean
    descripcion?: boolean
    editorialId?: boolean
    opinionId?: boolean
    editorial?: boolean | Media$editorialArgs<ExtArgs>
    opinion?: boolean | Media$opinionArgs<ExtArgs>
  }, ExtArgs["result"]["media"]>

  export type MediaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    tipo?: boolean
    descripcion?: boolean
    editorialId?: boolean
    opinionId?: boolean
    editorial?: boolean | Media$editorialArgs<ExtArgs>
    opinion?: boolean | Media$opinionArgs<ExtArgs>
  }, ExtArgs["result"]["media"]>

  export type MediaSelectScalar = {
    id?: boolean
    url?: boolean
    tipo?: boolean
    descripcion?: boolean
    editorialId?: boolean
    opinionId?: boolean
  }

  export type MediaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "url" | "tipo" | "descripcion" | "editorialId" | "opinionId", ExtArgs["result"]["media"]>
  export type MediaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    noticiaMedia?: boolean | Media$noticiaMediaArgs<ExtArgs>
    editorial?: boolean | Media$editorialArgs<ExtArgs>
    opinion?: boolean | Media$opinionArgs<ExtArgs>
    _count?: boolean | MediaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MediaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    editorial?: boolean | Media$editorialArgs<ExtArgs>
    opinion?: boolean | Media$opinionArgs<ExtArgs>
  }
  export type MediaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    editorial?: boolean | Media$editorialArgs<ExtArgs>
    opinion?: boolean | Media$opinionArgs<ExtArgs>
  }

  export type $MediaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Media"
    objects: {
      noticiaMedia: Prisma.$NoticiaMediaPayload<ExtArgs>[]
      editorial: Prisma.$EditorialPayload<ExtArgs> | null
      opinion: Prisma.$OpinionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      url: string
      tipo: $Enums.MediaTipo
      descripcion: string | null
      editorialId: number | null
      opinionId: number | null
    }, ExtArgs["result"]["media"]>
    composites: {}
  }

  type MediaGetPayload<S extends boolean | null | undefined | MediaDefaultArgs> = $Result.GetResult<Prisma.$MediaPayload, S>

  type MediaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MediaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MediaCountAggregateInputType | true
    }

  export interface MediaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Media'], meta: { name: 'Media' } }
    /**
     * Find zero or one Media that matches the filter.
     * @param {MediaFindUniqueArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MediaFindUniqueArgs>(args: SelectSubset<T, MediaFindUniqueArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Media that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MediaFindUniqueOrThrowArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MediaFindUniqueOrThrowArgs>(args: SelectSubset<T, MediaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Media that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaFindFirstArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MediaFindFirstArgs>(args?: SelectSubset<T, MediaFindFirstArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Media that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaFindFirstOrThrowArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MediaFindFirstOrThrowArgs>(args?: SelectSubset<T, MediaFindFirstOrThrowArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Media that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Media
     * const media = await prisma.media.findMany()
     * 
     * // Get first 10 Media
     * const media = await prisma.media.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mediaWithIdOnly = await prisma.media.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MediaFindManyArgs>(args?: SelectSubset<T, MediaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Media.
     * @param {MediaCreateArgs} args - Arguments to create a Media.
     * @example
     * // Create one Media
     * const Media = await prisma.media.create({
     *   data: {
     *     // ... data to create a Media
     *   }
     * })
     * 
     */
    create<T extends MediaCreateArgs>(args: SelectSubset<T, MediaCreateArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Media.
     * @param {MediaCreateManyArgs} args - Arguments to create many Media.
     * @example
     * // Create many Media
     * const media = await prisma.media.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MediaCreateManyArgs>(args?: SelectSubset<T, MediaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Media and returns the data saved in the database.
     * @param {MediaCreateManyAndReturnArgs} args - Arguments to create many Media.
     * @example
     * // Create many Media
     * const media = await prisma.media.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Media and only return the `id`
     * const mediaWithIdOnly = await prisma.media.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MediaCreateManyAndReturnArgs>(args?: SelectSubset<T, MediaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Media.
     * @param {MediaDeleteArgs} args - Arguments to delete one Media.
     * @example
     * // Delete one Media
     * const Media = await prisma.media.delete({
     *   where: {
     *     // ... filter to delete one Media
     *   }
     * })
     * 
     */
    delete<T extends MediaDeleteArgs>(args: SelectSubset<T, MediaDeleteArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Media.
     * @param {MediaUpdateArgs} args - Arguments to update one Media.
     * @example
     * // Update one Media
     * const media = await prisma.media.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MediaUpdateArgs>(args: SelectSubset<T, MediaUpdateArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Media.
     * @param {MediaDeleteManyArgs} args - Arguments to filter Media to delete.
     * @example
     * // Delete a few Media
     * const { count } = await prisma.media.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MediaDeleteManyArgs>(args?: SelectSubset<T, MediaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Media
     * const media = await prisma.media.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MediaUpdateManyArgs>(args: SelectSubset<T, MediaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Media and returns the data updated in the database.
     * @param {MediaUpdateManyAndReturnArgs} args - Arguments to update many Media.
     * @example
     * // Update many Media
     * const media = await prisma.media.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Media and only return the `id`
     * const mediaWithIdOnly = await prisma.media.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MediaUpdateManyAndReturnArgs>(args: SelectSubset<T, MediaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Media.
     * @param {MediaUpsertArgs} args - Arguments to update or create a Media.
     * @example
     * // Update or create a Media
     * const media = await prisma.media.upsert({
     *   create: {
     *     // ... data to create a Media
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Media we want to update
     *   }
     * })
     */
    upsert<T extends MediaUpsertArgs>(args: SelectSubset<T, MediaUpsertArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaCountArgs} args - Arguments to filter Media to count.
     * @example
     * // Count the number of Media
     * const count = await prisma.media.count({
     *   where: {
     *     // ... the filter for the Media we want to count
     *   }
     * })
    **/
    count<T extends MediaCountArgs>(
      args?: Subset<T, MediaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MediaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MediaAggregateArgs>(args: Subset<T, MediaAggregateArgs>): Prisma.PrismaPromise<GetMediaAggregateType<T>>

    /**
     * Group by Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MediaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MediaGroupByArgs['orderBy'] }
        : { orderBy?: MediaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Media model
   */
  readonly fields: MediaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Media.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MediaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    noticiaMedia<T extends Media$noticiaMediaArgs<ExtArgs> = {}>(args?: Subset<T, Media$noticiaMediaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NoticiaMediaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    editorial<T extends Media$editorialArgs<ExtArgs> = {}>(args?: Subset<T, Media$editorialArgs<ExtArgs>>): Prisma__EditorialClient<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    opinion<T extends Media$opinionArgs<ExtArgs> = {}>(args?: Subset<T, Media$opinionArgs<ExtArgs>>): Prisma__OpinionClient<$Result.GetResult<Prisma.$OpinionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Media model
   */
  interface MediaFieldRefs {
    readonly id: FieldRef<"Media", 'Int'>
    readonly url: FieldRef<"Media", 'String'>
    readonly tipo: FieldRef<"Media", 'MediaTipo'>
    readonly descripcion: FieldRef<"Media", 'String'>
    readonly editorialId: FieldRef<"Media", 'Int'>
    readonly opinionId: FieldRef<"Media", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Media findUnique
   */
  export type MediaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Media
     */
    omit?: MediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * Filter, which Media to fetch.
     */
    where: MediaWhereUniqueInput
  }

  /**
   * Media findUniqueOrThrow
   */
  export type MediaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Media
     */
    omit?: MediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * Filter, which Media to fetch.
     */
    where: MediaWhereUniqueInput
  }

  /**
   * Media findFirst
   */
  export type MediaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Media
     */
    omit?: MediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * Filter, which Media to fetch.
     */
    where?: MediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Media to fetch.
     */
    orderBy?: MediaOrderByWithRelationInput | MediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Media.
     */
    cursor?: MediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Media from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Media.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Media.
     */
    distinct?: MediaScalarFieldEnum | MediaScalarFieldEnum[]
  }

  /**
   * Media findFirstOrThrow
   */
  export type MediaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Media
     */
    omit?: MediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * Filter, which Media to fetch.
     */
    where?: MediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Media to fetch.
     */
    orderBy?: MediaOrderByWithRelationInput | MediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Media.
     */
    cursor?: MediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Media from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Media.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Media.
     */
    distinct?: MediaScalarFieldEnum | MediaScalarFieldEnum[]
  }

  /**
   * Media findMany
   */
  export type MediaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Media
     */
    omit?: MediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * Filter, which Media to fetch.
     */
    where?: MediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Media to fetch.
     */
    orderBy?: MediaOrderByWithRelationInput | MediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Media.
     */
    cursor?: MediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Media from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Media.
     */
    skip?: number
    distinct?: MediaScalarFieldEnum | MediaScalarFieldEnum[]
  }

  /**
   * Media create
   */
  export type MediaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Media
     */
    omit?: MediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * The data needed to create a Media.
     */
    data: XOR<MediaCreateInput, MediaUncheckedCreateInput>
  }

  /**
   * Media createMany
   */
  export type MediaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Media.
     */
    data: MediaCreateManyInput | MediaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Media createManyAndReturn
   */
  export type MediaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Media
     */
    omit?: MediaOmit<ExtArgs> | null
    /**
     * The data used to create many Media.
     */
    data: MediaCreateManyInput | MediaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Media update
   */
  export type MediaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Media
     */
    omit?: MediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * The data needed to update a Media.
     */
    data: XOR<MediaUpdateInput, MediaUncheckedUpdateInput>
    /**
     * Choose, which Media to update.
     */
    where: MediaWhereUniqueInput
  }

  /**
   * Media updateMany
   */
  export type MediaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Media.
     */
    data: XOR<MediaUpdateManyMutationInput, MediaUncheckedUpdateManyInput>
    /**
     * Filter which Media to update
     */
    where?: MediaWhereInput
    /**
     * Limit how many Media to update.
     */
    limit?: number
  }

  /**
   * Media updateManyAndReturn
   */
  export type MediaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Media
     */
    omit?: MediaOmit<ExtArgs> | null
    /**
     * The data used to update Media.
     */
    data: XOR<MediaUpdateManyMutationInput, MediaUncheckedUpdateManyInput>
    /**
     * Filter which Media to update
     */
    where?: MediaWhereInput
    /**
     * Limit how many Media to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Media upsert
   */
  export type MediaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Media
     */
    omit?: MediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * The filter to search for the Media to update in case it exists.
     */
    where: MediaWhereUniqueInput
    /**
     * In case the Media found by the `where` argument doesn't exist, create a new Media with this data.
     */
    create: XOR<MediaCreateInput, MediaUncheckedCreateInput>
    /**
     * In case the Media was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MediaUpdateInput, MediaUncheckedUpdateInput>
  }

  /**
   * Media delete
   */
  export type MediaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Media
     */
    omit?: MediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * Filter which Media to delete.
     */
    where: MediaWhereUniqueInput
  }

  /**
   * Media deleteMany
   */
  export type MediaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Media to delete
     */
    where?: MediaWhereInput
    /**
     * Limit how many Media to delete.
     */
    limit?: number
  }

  /**
   * Media.noticiaMedia
   */
  export type Media$noticiaMediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticiaMedia
     */
    select?: NoticiaMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NoticiaMedia
     */
    omit?: NoticiaMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaMediaInclude<ExtArgs> | null
    where?: NoticiaMediaWhereInput
    orderBy?: NoticiaMediaOrderByWithRelationInput | NoticiaMediaOrderByWithRelationInput[]
    cursor?: NoticiaMediaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoticiaMediaScalarFieldEnum | NoticiaMediaScalarFieldEnum[]
  }

  /**
   * Media.editorial
   */
  export type Media$editorialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
    where?: EditorialWhereInput
  }

  /**
   * Media.opinion
   */
  export type Media$opinionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opinion
     */
    select?: OpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opinion
     */
    omit?: OpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpinionInclude<ExtArgs> | null
    where?: OpinionWhereInput
  }

  /**
   * Media without action
   */
  export type MediaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Media
     */
    omit?: MediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaInclude<ExtArgs> | null
  }


  /**
   * Model Noticia
   */

  export type AggregateNoticia = {
    _count: NoticiaCountAggregateOutputType | null
    _avg: NoticiaAvgAggregateOutputType | null
    _sum: NoticiaSumAggregateOutputType | null
    _min: NoticiaMinAggregateOutputType | null
    _max: NoticiaMaxAggregateOutputType | null
  }

  export type NoticiaAvgAggregateOutputType = {
    id: number | null
    seccionId: number | null
  }

  export type NoticiaSumAggregateOutputType = {
    id: number | null
    seccionId: number | null
  }

  export type NoticiaMinAggregateOutputType = {
    id: number | null
    titulo: string | null
    contenido: string | null
    resumen: string | null
    autorTexto: string | null
    autorFoto: string | null
    destacada: boolean | null
    fechaPublicacion: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    seccionId: number | null
  }

  export type NoticiaMaxAggregateOutputType = {
    id: number | null
    titulo: string | null
    contenido: string | null
    resumen: string | null
    autorTexto: string | null
    autorFoto: string | null
    destacada: boolean | null
    fechaPublicacion: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    seccionId: number | null
  }

  export type NoticiaCountAggregateOutputType = {
    id: number
    titulo: number
    contenido: number
    resumen: number
    autorTexto: number
    autorFoto: number
    destacada: number
    fechaPublicacion: number
    createdAt: number
    updatedAt: number
    seccionId: number
    _all: number
  }


  export type NoticiaAvgAggregateInputType = {
    id?: true
    seccionId?: true
  }

  export type NoticiaSumAggregateInputType = {
    id?: true
    seccionId?: true
  }

  export type NoticiaMinAggregateInputType = {
    id?: true
    titulo?: true
    contenido?: true
    resumen?: true
    autorTexto?: true
    autorFoto?: true
    destacada?: true
    fechaPublicacion?: true
    createdAt?: true
    updatedAt?: true
    seccionId?: true
  }

  export type NoticiaMaxAggregateInputType = {
    id?: true
    titulo?: true
    contenido?: true
    resumen?: true
    autorTexto?: true
    autorFoto?: true
    destacada?: true
    fechaPublicacion?: true
    createdAt?: true
    updatedAt?: true
    seccionId?: true
  }

  export type NoticiaCountAggregateInputType = {
    id?: true
    titulo?: true
    contenido?: true
    resumen?: true
    autorTexto?: true
    autorFoto?: true
    destacada?: true
    fechaPublicacion?: true
    createdAt?: true
    updatedAt?: true
    seccionId?: true
    _all?: true
  }

  export type NoticiaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Noticia to aggregate.
     */
    where?: NoticiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Noticias to fetch.
     */
    orderBy?: NoticiaOrderByWithRelationInput | NoticiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoticiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Noticias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Noticias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Noticias
    **/
    _count?: true | NoticiaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NoticiaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NoticiaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoticiaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoticiaMaxAggregateInputType
  }

  export type GetNoticiaAggregateType<T extends NoticiaAggregateArgs> = {
        [P in keyof T & keyof AggregateNoticia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNoticia[P]>
      : GetScalarType<T[P], AggregateNoticia[P]>
  }




  export type NoticiaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoticiaWhereInput
    orderBy?: NoticiaOrderByWithAggregationInput | NoticiaOrderByWithAggregationInput[]
    by: NoticiaScalarFieldEnum[] | NoticiaScalarFieldEnum
    having?: NoticiaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoticiaCountAggregateInputType | true
    _avg?: NoticiaAvgAggregateInputType
    _sum?: NoticiaSumAggregateInputType
    _min?: NoticiaMinAggregateInputType
    _max?: NoticiaMaxAggregateInputType
  }

  export type NoticiaGroupByOutputType = {
    id: number
    titulo: string
    contenido: string
    resumen: string
    autorTexto: string
    autorFoto: string
    destacada: boolean
    fechaPublicacion: Date
    createdAt: Date
    updatedAt: Date
    seccionId: number | null
    _count: NoticiaCountAggregateOutputType | null
    _avg: NoticiaAvgAggregateOutputType | null
    _sum: NoticiaSumAggregateOutputType | null
    _min: NoticiaMinAggregateOutputType | null
    _max: NoticiaMaxAggregateOutputType | null
  }

  type GetNoticiaGroupByPayload<T extends NoticiaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NoticiaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoticiaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoticiaGroupByOutputType[P]>
            : GetScalarType<T[P], NoticiaGroupByOutputType[P]>
        }
      >
    >


  export type NoticiaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    contenido?: boolean
    resumen?: boolean
    autorTexto?: boolean
    autorFoto?: boolean
    destacada?: boolean
    fechaPublicacion?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    seccionId?: boolean
    seccion?: boolean | Noticia$seccionArgs<ExtArgs>
    noticiaMedia?: boolean | Noticia$noticiaMediaArgs<ExtArgs>
    _count?: boolean | NoticiaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["noticia"]>

  export type NoticiaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    contenido?: boolean
    resumen?: boolean
    autorTexto?: boolean
    autorFoto?: boolean
    destacada?: boolean
    fechaPublicacion?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    seccionId?: boolean
    seccion?: boolean | Noticia$seccionArgs<ExtArgs>
  }, ExtArgs["result"]["noticia"]>

  export type NoticiaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    contenido?: boolean
    resumen?: boolean
    autorTexto?: boolean
    autorFoto?: boolean
    destacada?: boolean
    fechaPublicacion?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    seccionId?: boolean
    seccion?: boolean | Noticia$seccionArgs<ExtArgs>
  }, ExtArgs["result"]["noticia"]>

  export type NoticiaSelectScalar = {
    id?: boolean
    titulo?: boolean
    contenido?: boolean
    resumen?: boolean
    autorTexto?: boolean
    autorFoto?: boolean
    destacada?: boolean
    fechaPublicacion?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    seccionId?: boolean
  }

  export type NoticiaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "titulo" | "contenido" | "resumen" | "autorTexto" | "autorFoto" | "destacada" | "fechaPublicacion" | "createdAt" | "updatedAt" | "seccionId", ExtArgs["result"]["noticia"]>
  export type NoticiaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seccion?: boolean | Noticia$seccionArgs<ExtArgs>
    noticiaMedia?: boolean | Noticia$noticiaMediaArgs<ExtArgs>
    _count?: boolean | NoticiaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NoticiaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seccion?: boolean | Noticia$seccionArgs<ExtArgs>
  }
  export type NoticiaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seccion?: boolean | Noticia$seccionArgs<ExtArgs>
  }

  export type $NoticiaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Noticia"
    objects: {
      seccion: Prisma.$SeccionPayload<ExtArgs> | null
      noticiaMedia: Prisma.$NoticiaMediaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titulo: string
      contenido: string
      resumen: string
      autorTexto: string
      autorFoto: string
      destacada: boolean
      fechaPublicacion: Date
      createdAt: Date
      updatedAt: Date
      seccionId: number | null
    }, ExtArgs["result"]["noticia"]>
    composites: {}
  }

  type NoticiaGetPayload<S extends boolean | null | undefined | NoticiaDefaultArgs> = $Result.GetResult<Prisma.$NoticiaPayload, S>

  type NoticiaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NoticiaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NoticiaCountAggregateInputType | true
    }

  export interface NoticiaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Noticia'], meta: { name: 'Noticia' } }
    /**
     * Find zero or one Noticia that matches the filter.
     * @param {NoticiaFindUniqueArgs} args - Arguments to find a Noticia
     * @example
     * // Get one Noticia
     * const noticia = await prisma.noticia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NoticiaFindUniqueArgs>(args: SelectSubset<T, NoticiaFindUniqueArgs<ExtArgs>>): Prisma__NoticiaClient<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Noticia that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NoticiaFindUniqueOrThrowArgs} args - Arguments to find a Noticia
     * @example
     * // Get one Noticia
     * const noticia = await prisma.noticia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NoticiaFindUniqueOrThrowArgs>(args: SelectSubset<T, NoticiaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NoticiaClient<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Noticia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaFindFirstArgs} args - Arguments to find a Noticia
     * @example
     * // Get one Noticia
     * const noticia = await prisma.noticia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NoticiaFindFirstArgs>(args?: SelectSubset<T, NoticiaFindFirstArgs<ExtArgs>>): Prisma__NoticiaClient<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Noticia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaFindFirstOrThrowArgs} args - Arguments to find a Noticia
     * @example
     * // Get one Noticia
     * const noticia = await prisma.noticia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NoticiaFindFirstOrThrowArgs>(args?: SelectSubset<T, NoticiaFindFirstOrThrowArgs<ExtArgs>>): Prisma__NoticiaClient<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Noticias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Noticias
     * const noticias = await prisma.noticia.findMany()
     * 
     * // Get first 10 Noticias
     * const noticias = await prisma.noticia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noticiaWithIdOnly = await prisma.noticia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NoticiaFindManyArgs>(args?: SelectSubset<T, NoticiaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Noticia.
     * @param {NoticiaCreateArgs} args - Arguments to create a Noticia.
     * @example
     * // Create one Noticia
     * const Noticia = await prisma.noticia.create({
     *   data: {
     *     // ... data to create a Noticia
     *   }
     * })
     * 
     */
    create<T extends NoticiaCreateArgs>(args: SelectSubset<T, NoticiaCreateArgs<ExtArgs>>): Prisma__NoticiaClient<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Noticias.
     * @param {NoticiaCreateManyArgs} args - Arguments to create many Noticias.
     * @example
     * // Create many Noticias
     * const noticia = await prisma.noticia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NoticiaCreateManyArgs>(args?: SelectSubset<T, NoticiaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Noticias and returns the data saved in the database.
     * @param {NoticiaCreateManyAndReturnArgs} args - Arguments to create many Noticias.
     * @example
     * // Create many Noticias
     * const noticia = await prisma.noticia.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Noticias and only return the `id`
     * const noticiaWithIdOnly = await prisma.noticia.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NoticiaCreateManyAndReturnArgs>(args?: SelectSubset<T, NoticiaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Noticia.
     * @param {NoticiaDeleteArgs} args - Arguments to delete one Noticia.
     * @example
     * // Delete one Noticia
     * const Noticia = await prisma.noticia.delete({
     *   where: {
     *     // ... filter to delete one Noticia
     *   }
     * })
     * 
     */
    delete<T extends NoticiaDeleteArgs>(args: SelectSubset<T, NoticiaDeleteArgs<ExtArgs>>): Prisma__NoticiaClient<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Noticia.
     * @param {NoticiaUpdateArgs} args - Arguments to update one Noticia.
     * @example
     * // Update one Noticia
     * const noticia = await prisma.noticia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NoticiaUpdateArgs>(args: SelectSubset<T, NoticiaUpdateArgs<ExtArgs>>): Prisma__NoticiaClient<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Noticias.
     * @param {NoticiaDeleteManyArgs} args - Arguments to filter Noticias to delete.
     * @example
     * // Delete a few Noticias
     * const { count } = await prisma.noticia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NoticiaDeleteManyArgs>(args?: SelectSubset<T, NoticiaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Noticias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Noticias
     * const noticia = await prisma.noticia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NoticiaUpdateManyArgs>(args: SelectSubset<T, NoticiaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Noticias and returns the data updated in the database.
     * @param {NoticiaUpdateManyAndReturnArgs} args - Arguments to update many Noticias.
     * @example
     * // Update many Noticias
     * const noticia = await prisma.noticia.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Noticias and only return the `id`
     * const noticiaWithIdOnly = await prisma.noticia.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NoticiaUpdateManyAndReturnArgs>(args: SelectSubset<T, NoticiaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Noticia.
     * @param {NoticiaUpsertArgs} args - Arguments to update or create a Noticia.
     * @example
     * // Update or create a Noticia
     * const noticia = await prisma.noticia.upsert({
     *   create: {
     *     // ... data to create a Noticia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Noticia we want to update
     *   }
     * })
     */
    upsert<T extends NoticiaUpsertArgs>(args: SelectSubset<T, NoticiaUpsertArgs<ExtArgs>>): Prisma__NoticiaClient<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Noticias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaCountArgs} args - Arguments to filter Noticias to count.
     * @example
     * // Count the number of Noticias
     * const count = await prisma.noticia.count({
     *   where: {
     *     // ... the filter for the Noticias we want to count
     *   }
     * })
    **/
    count<T extends NoticiaCountArgs>(
      args?: Subset<T, NoticiaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoticiaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Noticia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoticiaAggregateArgs>(args: Subset<T, NoticiaAggregateArgs>): Prisma.PrismaPromise<GetNoticiaAggregateType<T>>

    /**
     * Group by Noticia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoticiaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoticiaGroupByArgs['orderBy'] }
        : { orderBy?: NoticiaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoticiaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoticiaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Noticia model
   */
  readonly fields: NoticiaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Noticia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NoticiaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    seccion<T extends Noticia$seccionArgs<ExtArgs> = {}>(args?: Subset<T, Noticia$seccionArgs<ExtArgs>>): Prisma__SeccionClient<$Result.GetResult<Prisma.$SeccionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    noticiaMedia<T extends Noticia$noticiaMediaArgs<ExtArgs> = {}>(args?: Subset<T, Noticia$noticiaMediaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NoticiaMediaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Noticia model
   */
  interface NoticiaFieldRefs {
    readonly id: FieldRef<"Noticia", 'Int'>
    readonly titulo: FieldRef<"Noticia", 'String'>
    readonly contenido: FieldRef<"Noticia", 'String'>
    readonly resumen: FieldRef<"Noticia", 'String'>
    readonly autorTexto: FieldRef<"Noticia", 'String'>
    readonly autorFoto: FieldRef<"Noticia", 'String'>
    readonly destacada: FieldRef<"Noticia", 'Boolean'>
    readonly fechaPublicacion: FieldRef<"Noticia", 'DateTime'>
    readonly createdAt: FieldRef<"Noticia", 'DateTime'>
    readonly updatedAt: FieldRef<"Noticia", 'DateTime'>
    readonly seccionId: FieldRef<"Noticia", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Noticia findUnique
   */
  export type NoticiaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
    /**
     * Filter, which Noticia to fetch.
     */
    where: NoticiaWhereUniqueInput
  }

  /**
   * Noticia findUniqueOrThrow
   */
  export type NoticiaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
    /**
     * Filter, which Noticia to fetch.
     */
    where: NoticiaWhereUniqueInput
  }

  /**
   * Noticia findFirst
   */
  export type NoticiaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
    /**
     * Filter, which Noticia to fetch.
     */
    where?: NoticiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Noticias to fetch.
     */
    orderBy?: NoticiaOrderByWithRelationInput | NoticiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Noticias.
     */
    cursor?: NoticiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Noticias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Noticias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Noticias.
     */
    distinct?: NoticiaScalarFieldEnum | NoticiaScalarFieldEnum[]
  }

  /**
   * Noticia findFirstOrThrow
   */
  export type NoticiaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
    /**
     * Filter, which Noticia to fetch.
     */
    where?: NoticiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Noticias to fetch.
     */
    orderBy?: NoticiaOrderByWithRelationInput | NoticiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Noticias.
     */
    cursor?: NoticiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Noticias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Noticias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Noticias.
     */
    distinct?: NoticiaScalarFieldEnum | NoticiaScalarFieldEnum[]
  }

  /**
   * Noticia findMany
   */
  export type NoticiaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
    /**
     * Filter, which Noticias to fetch.
     */
    where?: NoticiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Noticias to fetch.
     */
    orderBy?: NoticiaOrderByWithRelationInput | NoticiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Noticias.
     */
    cursor?: NoticiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Noticias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Noticias.
     */
    skip?: number
    distinct?: NoticiaScalarFieldEnum | NoticiaScalarFieldEnum[]
  }

  /**
   * Noticia create
   */
  export type NoticiaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
    /**
     * The data needed to create a Noticia.
     */
    data: XOR<NoticiaCreateInput, NoticiaUncheckedCreateInput>
  }

  /**
   * Noticia createMany
   */
  export type NoticiaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Noticias.
     */
    data: NoticiaCreateManyInput | NoticiaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Noticia createManyAndReturn
   */
  export type NoticiaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * The data used to create many Noticias.
     */
    data: NoticiaCreateManyInput | NoticiaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Noticia update
   */
  export type NoticiaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
    /**
     * The data needed to update a Noticia.
     */
    data: XOR<NoticiaUpdateInput, NoticiaUncheckedUpdateInput>
    /**
     * Choose, which Noticia to update.
     */
    where: NoticiaWhereUniqueInput
  }

  /**
   * Noticia updateMany
   */
  export type NoticiaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Noticias.
     */
    data: XOR<NoticiaUpdateManyMutationInput, NoticiaUncheckedUpdateManyInput>
    /**
     * Filter which Noticias to update
     */
    where?: NoticiaWhereInput
    /**
     * Limit how many Noticias to update.
     */
    limit?: number
  }

  /**
   * Noticia updateManyAndReturn
   */
  export type NoticiaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * The data used to update Noticias.
     */
    data: XOR<NoticiaUpdateManyMutationInput, NoticiaUncheckedUpdateManyInput>
    /**
     * Filter which Noticias to update
     */
    where?: NoticiaWhereInput
    /**
     * Limit how many Noticias to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Noticia upsert
   */
  export type NoticiaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
    /**
     * The filter to search for the Noticia to update in case it exists.
     */
    where: NoticiaWhereUniqueInput
    /**
     * In case the Noticia found by the `where` argument doesn't exist, create a new Noticia with this data.
     */
    create: XOR<NoticiaCreateInput, NoticiaUncheckedCreateInput>
    /**
     * In case the Noticia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoticiaUpdateInput, NoticiaUncheckedUpdateInput>
  }

  /**
   * Noticia delete
   */
  export type NoticiaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
    /**
     * Filter which Noticia to delete.
     */
    where: NoticiaWhereUniqueInput
  }

  /**
   * Noticia deleteMany
   */
  export type NoticiaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Noticias to delete
     */
    where?: NoticiaWhereInput
    /**
     * Limit how many Noticias to delete.
     */
    limit?: number
  }

  /**
   * Noticia.seccion
   */
  export type Noticia$seccionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seccion
     */
    select?: SeccionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seccion
     */
    omit?: SeccionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeccionInclude<ExtArgs> | null
    where?: SeccionWhereInput
  }

  /**
   * Noticia.noticiaMedia
   */
  export type Noticia$noticiaMediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticiaMedia
     */
    select?: NoticiaMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NoticiaMedia
     */
    omit?: NoticiaMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaMediaInclude<ExtArgs> | null
    where?: NoticiaMediaWhereInput
    orderBy?: NoticiaMediaOrderByWithRelationInput | NoticiaMediaOrderByWithRelationInput[]
    cursor?: NoticiaMediaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoticiaMediaScalarFieldEnum | NoticiaMediaScalarFieldEnum[]
  }

  /**
   * Noticia without action
   */
  export type NoticiaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
  }


  /**
   * Model NoticiaMedia
   */

  export type AggregateNoticiaMedia = {
    _count: NoticiaMediaCountAggregateOutputType | null
    _avg: NoticiaMediaAvgAggregateOutputType | null
    _sum: NoticiaMediaSumAggregateOutputType | null
    _min: NoticiaMediaMinAggregateOutputType | null
    _max: NoticiaMediaMaxAggregateOutputType | null
  }

  export type NoticiaMediaAvgAggregateOutputType = {
    noticiaId: number | null
    mediaId: number | null
  }

  export type NoticiaMediaSumAggregateOutputType = {
    noticiaId: number | null
    mediaId: number | null
  }

  export type NoticiaMediaMinAggregateOutputType = {
    noticiaId: number | null
    mediaId: number | null
  }

  export type NoticiaMediaMaxAggregateOutputType = {
    noticiaId: number | null
    mediaId: number | null
  }

  export type NoticiaMediaCountAggregateOutputType = {
    noticiaId: number
    mediaId: number
    _all: number
  }


  export type NoticiaMediaAvgAggregateInputType = {
    noticiaId?: true
    mediaId?: true
  }

  export type NoticiaMediaSumAggregateInputType = {
    noticiaId?: true
    mediaId?: true
  }

  export type NoticiaMediaMinAggregateInputType = {
    noticiaId?: true
    mediaId?: true
  }

  export type NoticiaMediaMaxAggregateInputType = {
    noticiaId?: true
    mediaId?: true
  }

  export type NoticiaMediaCountAggregateInputType = {
    noticiaId?: true
    mediaId?: true
    _all?: true
  }

  export type NoticiaMediaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NoticiaMedia to aggregate.
     */
    where?: NoticiaMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NoticiaMedias to fetch.
     */
    orderBy?: NoticiaMediaOrderByWithRelationInput | NoticiaMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoticiaMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NoticiaMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NoticiaMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NoticiaMedias
    **/
    _count?: true | NoticiaMediaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NoticiaMediaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NoticiaMediaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoticiaMediaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoticiaMediaMaxAggregateInputType
  }

  export type GetNoticiaMediaAggregateType<T extends NoticiaMediaAggregateArgs> = {
        [P in keyof T & keyof AggregateNoticiaMedia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNoticiaMedia[P]>
      : GetScalarType<T[P], AggregateNoticiaMedia[P]>
  }




  export type NoticiaMediaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoticiaMediaWhereInput
    orderBy?: NoticiaMediaOrderByWithAggregationInput | NoticiaMediaOrderByWithAggregationInput[]
    by: NoticiaMediaScalarFieldEnum[] | NoticiaMediaScalarFieldEnum
    having?: NoticiaMediaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoticiaMediaCountAggregateInputType | true
    _avg?: NoticiaMediaAvgAggregateInputType
    _sum?: NoticiaMediaSumAggregateInputType
    _min?: NoticiaMediaMinAggregateInputType
    _max?: NoticiaMediaMaxAggregateInputType
  }

  export type NoticiaMediaGroupByOutputType = {
    noticiaId: number
    mediaId: number
    _count: NoticiaMediaCountAggregateOutputType | null
    _avg: NoticiaMediaAvgAggregateOutputType | null
    _sum: NoticiaMediaSumAggregateOutputType | null
    _min: NoticiaMediaMinAggregateOutputType | null
    _max: NoticiaMediaMaxAggregateOutputType | null
  }

  type GetNoticiaMediaGroupByPayload<T extends NoticiaMediaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NoticiaMediaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoticiaMediaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoticiaMediaGroupByOutputType[P]>
            : GetScalarType<T[P], NoticiaMediaGroupByOutputType[P]>
        }
      >
    >


  export type NoticiaMediaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    noticiaId?: boolean
    mediaId?: boolean
    noticia?: boolean | NoticiaDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["noticiaMedia"]>

  export type NoticiaMediaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    noticiaId?: boolean
    mediaId?: boolean
    noticia?: boolean | NoticiaDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["noticiaMedia"]>

  export type NoticiaMediaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    noticiaId?: boolean
    mediaId?: boolean
    noticia?: boolean | NoticiaDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["noticiaMedia"]>

  export type NoticiaMediaSelectScalar = {
    noticiaId?: boolean
    mediaId?: boolean
  }

  export type NoticiaMediaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"noticiaId" | "mediaId", ExtArgs["result"]["noticiaMedia"]>
  export type NoticiaMediaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    noticia?: boolean | NoticiaDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }
  export type NoticiaMediaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    noticia?: boolean | NoticiaDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }
  export type NoticiaMediaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    noticia?: boolean | NoticiaDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }

  export type $NoticiaMediaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NoticiaMedia"
    objects: {
      noticia: Prisma.$NoticiaPayload<ExtArgs>
      media: Prisma.$MediaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      noticiaId: number
      mediaId: number
    }, ExtArgs["result"]["noticiaMedia"]>
    composites: {}
  }

  type NoticiaMediaGetPayload<S extends boolean | null | undefined | NoticiaMediaDefaultArgs> = $Result.GetResult<Prisma.$NoticiaMediaPayload, S>

  type NoticiaMediaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NoticiaMediaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NoticiaMediaCountAggregateInputType | true
    }

  export interface NoticiaMediaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NoticiaMedia'], meta: { name: 'NoticiaMedia' } }
    /**
     * Find zero or one NoticiaMedia that matches the filter.
     * @param {NoticiaMediaFindUniqueArgs} args - Arguments to find a NoticiaMedia
     * @example
     * // Get one NoticiaMedia
     * const noticiaMedia = await prisma.noticiaMedia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NoticiaMediaFindUniqueArgs>(args: SelectSubset<T, NoticiaMediaFindUniqueArgs<ExtArgs>>): Prisma__NoticiaMediaClient<$Result.GetResult<Prisma.$NoticiaMediaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NoticiaMedia that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NoticiaMediaFindUniqueOrThrowArgs} args - Arguments to find a NoticiaMedia
     * @example
     * // Get one NoticiaMedia
     * const noticiaMedia = await prisma.noticiaMedia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NoticiaMediaFindUniqueOrThrowArgs>(args: SelectSubset<T, NoticiaMediaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NoticiaMediaClient<$Result.GetResult<Prisma.$NoticiaMediaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NoticiaMedia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaMediaFindFirstArgs} args - Arguments to find a NoticiaMedia
     * @example
     * // Get one NoticiaMedia
     * const noticiaMedia = await prisma.noticiaMedia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NoticiaMediaFindFirstArgs>(args?: SelectSubset<T, NoticiaMediaFindFirstArgs<ExtArgs>>): Prisma__NoticiaMediaClient<$Result.GetResult<Prisma.$NoticiaMediaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NoticiaMedia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaMediaFindFirstOrThrowArgs} args - Arguments to find a NoticiaMedia
     * @example
     * // Get one NoticiaMedia
     * const noticiaMedia = await prisma.noticiaMedia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NoticiaMediaFindFirstOrThrowArgs>(args?: SelectSubset<T, NoticiaMediaFindFirstOrThrowArgs<ExtArgs>>): Prisma__NoticiaMediaClient<$Result.GetResult<Prisma.$NoticiaMediaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NoticiaMedias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaMediaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NoticiaMedias
     * const noticiaMedias = await prisma.noticiaMedia.findMany()
     * 
     * // Get first 10 NoticiaMedias
     * const noticiaMedias = await prisma.noticiaMedia.findMany({ take: 10 })
     * 
     * // Only select the `noticiaId`
     * const noticiaMediaWithNoticiaIdOnly = await prisma.noticiaMedia.findMany({ select: { noticiaId: true } })
     * 
     */
    findMany<T extends NoticiaMediaFindManyArgs>(args?: SelectSubset<T, NoticiaMediaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NoticiaMediaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NoticiaMedia.
     * @param {NoticiaMediaCreateArgs} args - Arguments to create a NoticiaMedia.
     * @example
     * // Create one NoticiaMedia
     * const NoticiaMedia = await prisma.noticiaMedia.create({
     *   data: {
     *     // ... data to create a NoticiaMedia
     *   }
     * })
     * 
     */
    create<T extends NoticiaMediaCreateArgs>(args: SelectSubset<T, NoticiaMediaCreateArgs<ExtArgs>>): Prisma__NoticiaMediaClient<$Result.GetResult<Prisma.$NoticiaMediaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NoticiaMedias.
     * @param {NoticiaMediaCreateManyArgs} args - Arguments to create many NoticiaMedias.
     * @example
     * // Create many NoticiaMedias
     * const noticiaMedia = await prisma.noticiaMedia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NoticiaMediaCreateManyArgs>(args?: SelectSubset<T, NoticiaMediaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NoticiaMedias and returns the data saved in the database.
     * @param {NoticiaMediaCreateManyAndReturnArgs} args - Arguments to create many NoticiaMedias.
     * @example
     * // Create many NoticiaMedias
     * const noticiaMedia = await prisma.noticiaMedia.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NoticiaMedias and only return the `noticiaId`
     * const noticiaMediaWithNoticiaIdOnly = await prisma.noticiaMedia.createManyAndReturn({
     *   select: { noticiaId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NoticiaMediaCreateManyAndReturnArgs>(args?: SelectSubset<T, NoticiaMediaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NoticiaMediaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NoticiaMedia.
     * @param {NoticiaMediaDeleteArgs} args - Arguments to delete one NoticiaMedia.
     * @example
     * // Delete one NoticiaMedia
     * const NoticiaMedia = await prisma.noticiaMedia.delete({
     *   where: {
     *     // ... filter to delete one NoticiaMedia
     *   }
     * })
     * 
     */
    delete<T extends NoticiaMediaDeleteArgs>(args: SelectSubset<T, NoticiaMediaDeleteArgs<ExtArgs>>): Prisma__NoticiaMediaClient<$Result.GetResult<Prisma.$NoticiaMediaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NoticiaMedia.
     * @param {NoticiaMediaUpdateArgs} args - Arguments to update one NoticiaMedia.
     * @example
     * // Update one NoticiaMedia
     * const noticiaMedia = await prisma.noticiaMedia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NoticiaMediaUpdateArgs>(args: SelectSubset<T, NoticiaMediaUpdateArgs<ExtArgs>>): Prisma__NoticiaMediaClient<$Result.GetResult<Prisma.$NoticiaMediaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NoticiaMedias.
     * @param {NoticiaMediaDeleteManyArgs} args - Arguments to filter NoticiaMedias to delete.
     * @example
     * // Delete a few NoticiaMedias
     * const { count } = await prisma.noticiaMedia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NoticiaMediaDeleteManyArgs>(args?: SelectSubset<T, NoticiaMediaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NoticiaMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaMediaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NoticiaMedias
     * const noticiaMedia = await prisma.noticiaMedia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NoticiaMediaUpdateManyArgs>(args: SelectSubset<T, NoticiaMediaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NoticiaMedias and returns the data updated in the database.
     * @param {NoticiaMediaUpdateManyAndReturnArgs} args - Arguments to update many NoticiaMedias.
     * @example
     * // Update many NoticiaMedias
     * const noticiaMedia = await prisma.noticiaMedia.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NoticiaMedias and only return the `noticiaId`
     * const noticiaMediaWithNoticiaIdOnly = await prisma.noticiaMedia.updateManyAndReturn({
     *   select: { noticiaId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NoticiaMediaUpdateManyAndReturnArgs>(args: SelectSubset<T, NoticiaMediaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NoticiaMediaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NoticiaMedia.
     * @param {NoticiaMediaUpsertArgs} args - Arguments to update or create a NoticiaMedia.
     * @example
     * // Update or create a NoticiaMedia
     * const noticiaMedia = await prisma.noticiaMedia.upsert({
     *   create: {
     *     // ... data to create a NoticiaMedia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NoticiaMedia we want to update
     *   }
     * })
     */
    upsert<T extends NoticiaMediaUpsertArgs>(args: SelectSubset<T, NoticiaMediaUpsertArgs<ExtArgs>>): Prisma__NoticiaMediaClient<$Result.GetResult<Prisma.$NoticiaMediaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NoticiaMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaMediaCountArgs} args - Arguments to filter NoticiaMedias to count.
     * @example
     * // Count the number of NoticiaMedias
     * const count = await prisma.noticiaMedia.count({
     *   where: {
     *     // ... the filter for the NoticiaMedias we want to count
     *   }
     * })
    **/
    count<T extends NoticiaMediaCountArgs>(
      args?: Subset<T, NoticiaMediaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoticiaMediaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NoticiaMedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaMediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoticiaMediaAggregateArgs>(args: Subset<T, NoticiaMediaAggregateArgs>): Prisma.PrismaPromise<GetNoticiaMediaAggregateType<T>>

    /**
     * Group by NoticiaMedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaMediaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoticiaMediaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoticiaMediaGroupByArgs['orderBy'] }
        : { orderBy?: NoticiaMediaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoticiaMediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoticiaMediaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NoticiaMedia model
   */
  readonly fields: NoticiaMediaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NoticiaMedia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NoticiaMediaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    noticia<T extends NoticiaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NoticiaDefaultArgs<ExtArgs>>): Prisma__NoticiaClient<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    media<T extends MediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MediaDefaultArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NoticiaMedia model
   */
  interface NoticiaMediaFieldRefs {
    readonly noticiaId: FieldRef<"NoticiaMedia", 'Int'>
    readonly mediaId: FieldRef<"NoticiaMedia", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * NoticiaMedia findUnique
   */
  export type NoticiaMediaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticiaMedia
     */
    select?: NoticiaMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NoticiaMedia
     */
    omit?: NoticiaMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaMediaInclude<ExtArgs> | null
    /**
     * Filter, which NoticiaMedia to fetch.
     */
    where: NoticiaMediaWhereUniqueInput
  }

  /**
   * NoticiaMedia findUniqueOrThrow
   */
  export type NoticiaMediaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticiaMedia
     */
    select?: NoticiaMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NoticiaMedia
     */
    omit?: NoticiaMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaMediaInclude<ExtArgs> | null
    /**
     * Filter, which NoticiaMedia to fetch.
     */
    where: NoticiaMediaWhereUniqueInput
  }

  /**
   * NoticiaMedia findFirst
   */
  export type NoticiaMediaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticiaMedia
     */
    select?: NoticiaMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NoticiaMedia
     */
    omit?: NoticiaMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaMediaInclude<ExtArgs> | null
    /**
     * Filter, which NoticiaMedia to fetch.
     */
    where?: NoticiaMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NoticiaMedias to fetch.
     */
    orderBy?: NoticiaMediaOrderByWithRelationInput | NoticiaMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NoticiaMedias.
     */
    cursor?: NoticiaMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NoticiaMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NoticiaMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NoticiaMedias.
     */
    distinct?: NoticiaMediaScalarFieldEnum | NoticiaMediaScalarFieldEnum[]
  }

  /**
   * NoticiaMedia findFirstOrThrow
   */
  export type NoticiaMediaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticiaMedia
     */
    select?: NoticiaMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NoticiaMedia
     */
    omit?: NoticiaMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaMediaInclude<ExtArgs> | null
    /**
     * Filter, which NoticiaMedia to fetch.
     */
    where?: NoticiaMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NoticiaMedias to fetch.
     */
    orderBy?: NoticiaMediaOrderByWithRelationInput | NoticiaMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NoticiaMedias.
     */
    cursor?: NoticiaMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NoticiaMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NoticiaMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NoticiaMedias.
     */
    distinct?: NoticiaMediaScalarFieldEnum | NoticiaMediaScalarFieldEnum[]
  }

  /**
   * NoticiaMedia findMany
   */
  export type NoticiaMediaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticiaMedia
     */
    select?: NoticiaMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NoticiaMedia
     */
    omit?: NoticiaMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaMediaInclude<ExtArgs> | null
    /**
     * Filter, which NoticiaMedias to fetch.
     */
    where?: NoticiaMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NoticiaMedias to fetch.
     */
    orderBy?: NoticiaMediaOrderByWithRelationInput | NoticiaMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NoticiaMedias.
     */
    cursor?: NoticiaMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NoticiaMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NoticiaMedias.
     */
    skip?: number
    distinct?: NoticiaMediaScalarFieldEnum | NoticiaMediaScalarFieldEnum[]
  }

  /**
   * NoticiaMedia create
   */
  export type NoticiaMediaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticiaMedia
     */
    select?: NoticiaMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NoticiaMedia
     */
    omit?: NoticiaMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaMediaInclude<ExtArgs> | null
    /**
     * The data needed to create a NoticiaMedia.
     */
    data: XOR<NoticiaMediaCreateInput, NoticiaMediaUncheckedCreateInput>
  }

  /**
   * NoticiaMedia createMany
   */
  export type NoticiaMediaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NoticiaMedias.
     */
    data: NoticiaMediaCreateManyInput | NoticiaMediaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NoticiaMedia createManyAndReturn
   */
  export type NoticiaMediaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticiaMedia
     */
    select?: NoticiaMediaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NoticiaMedia
     */
    omit?: NoticiaMediaOmit<ExtArgs> | null
    /**
     * The data used to create many NoticiaMedias.
     */
    data: NoticiaMediaCreateManyInput | NoticiaMediaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaMediaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NoticiaMedia update
   */
  export type NoticiaMediaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticiaMedia
     */
    select?: NoticiaMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NoticiaMedia
     */
    omit?: NoticiaMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaMediaInclude<ExtArgs> | null
    /**
     * The data needed to update a NoticiaMedia.
     */
    data: XOR<NoticiaMediaUpdateInput, NoticiaMediaUncheckedUpdateInput>
    /**
     * Choose, which NoticiaMedia to update.
     */
    where: NoticiaMediaWhereUniqueInput
  }

  /**
   * NoticiaMedia updateMany
   */
  export type NoticiaMediaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NoticiaMedias.
     */
    data: XOR<NoticiaMediaUpdateManyMutationInput, NoticiaMediaUncheckedUpdateManyInput>
    /**
     * Filter which NoticiaMedias to update
     */
    where?: NoticiaMediaWhereInput
    /**
     * Limit how many NoticiaMedias to update.
     */
    limit?: number
  }

  /**
   * NoticiaMedia updateManyAndReturn
   */
  export type NoticiaMediaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticiaMedia
     */
    select?: NoticiaMediaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NoticiaMedia
     */
    omit?: NoticiaMediaOmit<ExtArgs> | null
    /**
     * The data used to update NoticiaMedias.
     */
    data: XOR<NoticiaMediaUpdateManyMutationInput, NoticiaMediaUncheckedUpdateManyInput>
    /**
     * Filter which NoticiaMedias to update
     */
    where?: NoticiaMediaWhereInput
    /**
     * Limit how many NoticiaMedias to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaMediaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NoticiaMedia upsert
   */
  export type NoticiaMediaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticiaMedia
     */
    select?: NoticiaMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NoticiaMedia
     */
    omit?: NoticiaMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaMediaInclude<ExtArgs> | null
    /**
     * The filter to search for the NoticiaMedia to update in case it exists.
     */
    where: NoticiaMediaWhereUniqueInput
    /**
     * In case the NoticiaMedia found by the `where` argument doesn't exist, create a new NoticiaMedia with this data.
     */
    create: XOR<NoticiaMediaCreateInput, NoticiaMediaUncheckedCreateInput>
    /**
     * In case the NoticiaMedia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoticiaMediaUpdateInput, NoticiaMediaUncheckedUpdateInput>
  }

  /**
   * NoticiaMedia delete
   */
  export type NoticiaMediaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticiaMedia
     */
    select?: NoticiaMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NoticiaMedia
     */
    omit?: NoticiaMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaMediaInclude<ExtArgs> | null
    /**
     * Filter which NoticiaMedia to delete.
     */
    where: NoticiaMediaWhereUniqueInput
  }

  /**
   * NoticiaMedia deleteMany
   */
  export type NoticiaMediaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NoticiaMedias to delete
     */
    where?: NoticiaMediaWhereInput
    /**
     * Limit how many NoticiaMedias to delete.
     */
    limit?: number
  }

  /**
   * NoticiaMedia without action
   */
  export type NoticiaMediaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticiaMedia
     */
    select?: NoticiaMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NoticiaMedia
     */
    omit?: NoticiaMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaMediaInclude<ExtArgs> | null
  }


  /**
   * Model PDF
   */

  export type AggregatePDF = {
    _count: PDFCountAggregateOutputType | null
    _avg: PDFAvgAggregateOutputType | null
    _sum: PDFSumAggregateOutputType | null
    _min: PDFMinAggregateOutputType | null
    _max: PDFMaxAggregateOutputType | null
  }

  export type PDFAvgAggregateOutputType = {
    id: number | null
  }

  export type PDFSumAggregateOutputType = {
    id: number | null
  }

  export type PDFMinAggregateOutputType = {
    id: number | null
    url: string | null
    fecha: Date | null
    descripcion: string | null
  }

  export type PDFMaxAggregateOutputType = {
    id: number | null
    url: string | null
    fecha: Date | null
    descripcion: string | null
  }

  export type PDFCountAggregateOutputType = {
    id: number
    url: number
    fecha: number
    descripcion: number
    _all: number
  }


  export type PDFAvgAggregateInputType = {
    id?: true
  }

  export type PDFSumAggregateInputType = {
    id?: true
  }

  export type PDFMinAggregateInputType = {
    id?: true
    url?: true
    fecha?: true
    descripcion?: true
  }

  export type PDFMaxAggregateInputType = {
    id?: true
    url?: true
    fecha?: true
    descripcion?: true
  }

  export type PDFCountAggregateInputType = {
    id?: true
    url?: true
    fecha?: true
    descripcion?: true
    _all?: true
  }

  export type PDFAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PDF to aggregate.
     */
    where?: PDFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PDFS to fetch.
     */
    orderBy?: PDFOrderByWithRelationInput | PDFOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PDFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PDFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PDFS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PDFS
    **/
    _count?: true | PDFCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PDFAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PDFSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PDFMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PDFMaxAggregateInputType
  }

  export type GetPDFAggregateType<T extends PDFAggregateArgs> = {
        [P in keyof T & keyof AggregatePDF]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePDF[P]>
      : GetScalarType<T[P], AggregatePDF[P]>
  }




  export type PDFGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PDFWhereInput
    orderBy?: PDFOrderByWithAggregationInput | PDFOrderByWithAggregationInput[]
    by: PDFScalarFieldEnum[] | PDFScalarFieldEnum
    having?: PDFScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PDFCountAggregateInputType | true
    _avg?: PDFAvgAggregateInputType
    _sum?: PDFSumAggregateInputType
    _min?: PDFMinAggregateInputType
    _max?: PDFMaxAggregateInputType
  }

  export type PDFGroupByOutputType = {
    id: number
    url: string
    fecha: Date
    descripcion: string | null
    _count: PDFCountAggregateOutputType | null
    _avg: PDFAvgAggregateOutputType | null
    _sum: PDFSumAggregateOutputType | null
    _min: PDFMinAggregateOutputType | null
    _max: PDFMaxAggregateOutputType | null
  }

  type GetPDFGroupByPayload<T extends PDFGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PDFGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PDFGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PDFGroupByOutputType[P]>
            : GetScalarType<T[P], PDFGroupByOutputType[P]>
        }
      >
    >


  export type PDFSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    fecha?: boolean
    descripcion?: boolean
  }, ExtArgs["result"]["pDF"]>

  export type PDFSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    fecha?: boolean
    descripcion?: boolean
  }, ExtArgs["result"]["pDF"]>

  export type PDFSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    fecha?: boolean
    descripcion?: boolean
  }, ExtArgs["result"]["pDF"]>

  export type PDFSelectScalar = {
    id?: boolean
    url?: boolean
    fecha?: boolean
    descripcion?: boolean
  }

  export type PDFOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "url" | "fecha" | "descripcion", ExtArgs["result"]["pDF"]>

  export type $PDFPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PDF"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      url: string
      fecha: Date
      descripcion: string | null
    }, ExtArgs["result"]["pDF"]>
    composites: {}
  }

  type PDFGetPayload<S extends boolean | null | undefined | PDFDefaultArgs> = $Result.GetResult<Prisma.$PDFPayload, S>

  type PDFCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PDFFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PDFCountAggregateInputType | true
    }

  export interface PDFDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PDF'], meta: { name: 'PDF' } }
    /**
     * Find zero or one PDF that matches the filter.
     * @param {PDFFindUniqueArgs} args - Arguments to find a PDF
     * @example
     * // Get one PDF
     * const pDF = await prisma.pDF.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PDFFindUniqueArgs>(args: SelectSubset<T, PDFFindUniqueArgs<ExtArgs>>): Prisma__PDFClient<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PDF that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PDFFindUniqueOrThrowArgs} args - Arguments to find a PDF
     * @example
     * // Get one PDF
     * const pDF = await prisma.pDF.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PDFFindUniqueOrThrowArgs>(args: SelectSubset<T, PDFFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PDFClient<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PDF that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PDFFindFirstArgs} args - Arguments to find a PDF
     * @example
     * // Get one PDF
     * const pDF = await prisma.pDF.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PDFFindFirstArgs>(args?: SelectSubset<T, PDFFindFirstArgs<ExtArgs>>): Prisma__PDFClient<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PDF that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PDFFindFirstOrThrowArgs} args - Arguments to find a PDF
     * @example
     * // Get one PDF
     * const pDF = await prisma.pDF.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PDFFindFirstOrThrowArgs>(args?: SelectSubset<T, PDFFindFirstOrThrowArgs<ExtArgs>>): Prisma__PDFClient<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PDFS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PDFFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PDFS
     * const pDFS = await prisma.pDF.findMany()
     * 
     * // Get first 10 PDFS
     * const pDFS = await prisma.pDF.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pDFWithIdOnly = await prisma.pDF.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PDFFindManyArgs>(args?: SelectSubset<T, PDFFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PDF.
     * @param {PDFCreateArgs} args - Arguments to create a PDF.
     * @example
     * // Create one PDF
     * const PDF = await prisma.pDF.create({
     *   data: {
     *     // ... data to create a PDF
     *   }
     * })
     * 
     */
    create<T extends PDFCreateArgs>(args: SelectSubset<T, PDFCreateArgs<ExtArgs>>): Prisma__PDFClient<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PDFS.
     * @param {PDFCreateManyArgs} args - Arguments to create many PDFS.
     * @example
     * // Create many PDFS
     * const pDF = await prisma.pDF.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PDFCreateManyArgs>(args?: SelectSubset<T, PDFCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PDFS and returns the data saved in the database.
     * @param {PDFCreateManyAndReturnArgs} args - Arguments to create many PDFS.
     * @example
     * // Create many PDFS
     * const pDF = await prisma.pDF.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PDFS and only return the `id`
     * const pDFWithIdOnly = await prisma.pDF.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PDFCreateManyAndReturnArgs>(args?: SelectSubset<T, PDFCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PDF.
     * @param {PDFDeleteArgs} args - Arguments to delete one PDF.
     * @example
     * // Delete one PDF
     * const PDF = await prisma.pDF.delete({
     *   where: {
     *     // ... filter to delete one PDF
     *   }
     * })
     * 
     */
    delete<T extends PDFDeleteArgs>(args: SelectSubset<T, PDFDeleteArgs<ExtArgs>>): Prisma__PDFClient<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PDF.
     * @param {PDFUpdateArgs} args - Arguments to update one PDF.
     * @example
     * // Update one PDF
     * const pDF = await prisma.pDF.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PDFUpdateArgs>(args: SelectSubset<T, PDFUpdateArgs<ExtArgs>>): Prisma__PDFClient<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PDFS.
     * @param {PDFDeleteManyArgs} args - Arguments to filter PDFS to delete.
     * @example
     * // Delete a few PDFS
     * const { count } = await prisma.pDF.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PDFDeleteManyArgs>(args?: SelectSubset<T, PDFDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PDFS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PDFUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PDFS
     * const pDF = await prisma.pDF.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PDFUpdateManyArgs>(args: SelectSubset<T, PDFUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PDFS and returns the data updated in the database.
     * @param {PDFUpdateManyAndReturnArgs} args - Arguments to update many PDFS.
     * @example
     * // Update many PDFS
     * const pDF = await prisma.pDF.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PDFS and only return the `id`
     * const pDFWithIdOnly = await prisma.pDF.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PDFUpdateManyAndReturnArgs>(args: SelectSubset<T, PDFUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PDF.
     * @param {PDFUpsertArgs} args - Arguments to update or create a PDF.
     * @example
     * // Update or create a PDF
     * const pDF = await prisma.pDF.upsert({
     *   create: {
     *     // ... data to create a PDF
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PDF we want to update
     *   }
     * })
     */
    upsert<T extends PDFUpsertArgs>(args: SelectSubset<T, PDFUpsertArgs<ExtArgs>>): Prisma__PDFClient<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PDFS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PDFCountArgs} args - Arguments to filter PDFS to count.
     * @example
     * // Count the number of PDFS
     * const count = await prisma.pDF.count({
     *   where: {
     *     // ... the filter for the PDFS we want to count
     *   }
     * })
    **/
    count<T extends PDFCountArgs>(
      args?: Subset<T, PDFCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PDFCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PDF.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PDFAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PDFAggregateArgs>(args: Subset<T, PDFAggregateArgs>): Prisma.PrismaPromise<GetPDFAggregateType<T>>

    /**
     * Group by PDF.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PDFGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PDFGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PDFGroupByArgs['orderBy'] }
        : { orderBy?: PDFGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PDFGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPDFGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PDF model
   */
  readonly fields: PDFFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PDF.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PDFClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PDF model
   */
  interface PDFFieldRefs {
    readonly id: FieldRef<"PDF", 'Int'>
    readonly url: FieldRef<"PDF", 'String'>
    readonly fecha: FieldRef<"PDF", 'DateTime'>
    readonly descripcion: FieldRef<"PDF", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PDF findUnique
   */
  export type PDFFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PDF
     */
    omit?: PDFOmit<ExtArgs> | null
    /**
     * Filter, which PDF to fetch.
     */
    where: PDFWhereUniqueInput
  }

  /**
   * PDF findUniqueOrThrow
   */
  export type PDFFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PDF
     */
    omit?: PDFOmit<ExtArgs> | null
    /**
     * Filter, which PDF to fetch.
     */
    where: PDFWhereUniqueInput
  }

  /**
   * PDF findFirst
   */
  export type PDFFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PDF
     */
    omit?: PDFOmit<ExtArgs> | null
    /**
     * Filter, which PDF to fetch.
     */
    where?: PDFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PDFS to fetch.
     */
    orderBy?: PDFOrderByWithRelationInput | PDFOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PDFS.
     */
    cursor?: PDFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PDFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PDFS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PDFS.
     */
    distinct?: PDFScalarFieldEnum | PDFScalarFieldEnum[]
  }

  /**
   * PDF findFirstOrThrow
   */
  export type PDFFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PDF
     */
    omit?: PDFOmit<ExtArgs> | null
    /**
     * Filter, which PDF to fetch.
     */
    where?: PDFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PDFS to fetch.
     */
    orderBy?: PDFOrderByWithRelationInput | PDFOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PDFS.
     */
    cursor?: PDFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PDFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PDFS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PDFS.
     */
    distinct?: PDFScalarFieldEnum | PDFScalarFieldEnum[]
  }

  /**
   * PDF findMany
   */
  export type PDFFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PDF
     */
    omit?: PDFOmit<ExtArgs> | null
    /**
     * Filter, which PDFS to fetch.
     */
    where?: PDFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PDFS to fetch.
     */
    orderBy?: PDFOrderByWithRelationInput | PDFOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PDFS.
     */
    cursor?: PDFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PDFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PDFS.
     */
    skip?: number
    distinct?: PDFScalarFieldEnum | PDFScalarFieldEnum[]
  }

  /**
   * PDF create
   */
  export type PDFCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PDF
     */
    omit?: PDFOmit<ExtArgs> | null
    /**
     * The data needed to create a PDF.
     */
    data: XOR<PDFCreateInput, PDFUncheckedCreateInput>
  }

  /**
   * PDF createMany
   */
  export type PDFCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PDFS.
     */
    data: PDFCreateManyInput | PDFCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PDF createManyAndReturn
   */
  export type PDFCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PDF
     */
    omit?: PDFOmit<ExtArgs> | null
    /**
     * The data used to create many PDFS.
     */
    data: PDFCreateManyInput | PDFCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PDF update
   */
  export type PDFUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PDF
     */
    omit?: PDFOmit<ExtArgs> | null
    /**
     * The data needed to update a PDF.
     */
    data: XOR<PDFUpdateInput, PDFUncheckedUpdateInput>
    /**
     * Choose, which PDF to update.
     */
    where: PDFWhereUniqueInput
  }

  /**
   * PDF updateMany
   */
  export type PDFUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PDFS.
     */
    data: XOR<PDFUpdateManyMutationInput, PDFUncheckedUpdateManyInput>
    /**
     * Filter which PDFS to update
     */
    where?: PDFWhereInput
    /**
     * Limit how many PDFS to update.
     */
    limit?: number
  }

  /**
   * PDF updateManyAndReturn
   */
  export type PDFUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PDF
     */
    omit?: PDFOmit<ExtArgs> | null
    /**
     * The data used to update PDFS.
     */
    data: XOR<PDFUpdateManyMutationInput, PDFUncheckedUpdateManyInput>
    /**
     * Filter which PDFS to update
     */
    where?: PDFWhereInput
    /**
     * Limit how many PDFS to update.
     */
    limit?: number
  }

  /**
   * PDF upsert
   */
  export type PDFUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PDF
     */
    omit?: PDFOmit<ExtArgs> | null
    /**
     * The filter to search for the PDF to update in case it exists.
     */
    where: PDFWhereUniqueInput
    /**
     * In case the PDF found by the `where` argument doesn't exist, create a new PDF with this data.
     */
    create: XOR<PDFCreateInput, PDFUncheckedCreateInput>
    /**
     * In case the PDF was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PDFUpdateInput, PDFUncheckedUpdateInput>
  }

  /**
   * PDF delete
   */
  export type PDFDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PDF
     */
    omit?: PDFOmit<ExtArgs> | null
    /**
     * Filter which PDF to delete.
     */
    where: PDFWhereUniqueInput
  }

  /**
   * PDF deleteMany
   */
  export type PDFDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PDFS to delete
     */
    where?: PDFWhereInput
    /**
     * Limit how many PDFS to delete.
     */
    limit?: number
  }

  /**
   * PDF without action
   */
  export type PDFDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PDF
     */
    omit?: PDFOmit<ExtArgs> | null
  }


  /**
   * Model View
   */

  export type AggregateView = {
    _count: ViewCountAggregateOutputType | null
    _avg: ViewAvgAggregateOutputType | null
    _sum: ViewSumAggregateOutputType | null
    _min: ViewMinAggregateOutputType | null
    _max: ViewMaxAggregateOutputType | null
  }

  export type ViewAvgAggregateOutputType = {
    id: number | null
  }

  export type ViewSumAggregateOutputType = {
    id: number | null
  }

  export type ViewMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    descripcion: string | null
    tipo: string | null
    activo: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ViewMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    descripcion: string | null
    tipo: string | null
    activo: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ViewCountAggregateOutputType = {
    id: number
    nombre: number
    descripcion: number
    tipo: number
    configuracion: number
    activo: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ViewAvgAggregateInputType = {
    id?: true
  }

  export type ViewSumAggregateInputType = {
    id?: true
  }

  export type ViewMinAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    tipo?: true
    activo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ViewMaxAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    tipo?: true
    activo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ViewCountAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    tipo?: true
    configuracion?: true
    activo?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ViewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which View to aggregate.
     */
    where?: ViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Views to fetch.
     */
    orderBy?: ViewOrderByWithRelationInput | ViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Views from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Views.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Views
    **/
    _count?: true | ViewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ViewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ViewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ViewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ViewMaxAggregateInputType
  }

  export type GetViewAggregateType<T extends ViewAggregateArgs> = {
        [P in keyof T & keyof AggregateView]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateView[P]>
      : GetScalarType<T[P], AggregateView[P]>
  }




  export type ViewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ViewWhereInput
    orderBy?: ViewOrderByWithAggregationInput | ViewOrderByWithAggregationInput[]
    by: ViewScalarFieldEnum[] | ViewScalarFieldEnum
    having?: ViewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ViewCountAggregateInputType | true
    _avg?: ViewAvgAggregateInputType
    _sum?: ViewSumAggregateInputType
    _min?: ViewMinAggregateInputType
    _max?: ViewMaxAggregateInputType
  }

  export type ViewGroupByOutputType = {
    id: number
    nombre: string
    descripcion: string | null
    tipo: string
    configuracion: JsonValue
    activo: boolean
    createdAt: Date
    updatedAt: Date
    _count: ViewCountAggregateOutputType | null
    _avg: ViewAvgAggregateOutputType | null
    _sum: ViewSumAggregateOutputType | null
    _min: ViewMinAggregateOutputType | null
    _max: ViewMaxAggregateOutputType | null
  }

  type GetViewGroupByPayload<T extends ViewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ViewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ViewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ViewGroupByOutputType[P]>
            : GetScalarType<T[P], ViewGroupByOutputType[P]>
        }
      >
    >


  export type ViewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    tipo?: boolean
    configuracion?: boolean
    activo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["view"]>

  export type ViewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    tipo?: boolean
    configuracion?: boolean
    activo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["view"]>

  export type ViewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    tipo?: boolean
    configuracion?: boolean
    activo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["view"]>

  export type ViewSelectScalar = {
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    tipo?: boolean
    configuracion?: boolean
    activo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ViewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "descripcion" | "tipo" | "configuracion" | "activo" | "createdAt" | "updatedAt", ExtArgs["result"]["view"]>

  export type $ViewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "View"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      descripcion: string | null
      tipo: string
      configuracion: Prisma.JsonValue
      activo: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["view"]>
    composites: {}
  }

  type ViewGetPayload<S extends boolean | null | undefined | ViewDefaultArgs> = $Result.GetResult<Prisma.$ViewPayload, S>

  type ViewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ViewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ViewCountAggregateInputType | true
    }

  export interface ViewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['View'], meta: { name: 'View' } }
    /**
     * Find zero or one View that matches the filter.
     * @param {ViewFindUniqueArgs} args - Arguments to find a View
     * @example
     * // Get one View
     * const view = await prisma.view.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ViewFindUniqueArgs>(args: SelectSubset<T, ViewFindUniqueArgs<ExtArgs>>): Prisma__ViewClient<$Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one View that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ViewFindUniqueOrThrowArgs} args - Arguments to find a View
     * @example
     * // Get one View
     * const view = await prisma.view.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ViewFindUniqueOrThrowArgs>(args: SelectSubset<T, ViewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ViewClient<$Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first View that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewFindFirstArgs} args - Arguments to find a View
     * @example
     * // Get one View
     * const view = await prisma.view.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ViewFindFirstArgs>(args?: SelectSubset<T, ViewFindFirstArgs<ExtArgs>>): Prisma__ViewClient<$Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first View that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewFindFirstOrThrowArgs} args - Arguments to find a View
     * @example
     * // Get one View
     * const view = await prisma.view.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ViewFindFirstOrThrowArgs>(args?: SelectSubset<T, ViewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ViewClient<$Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Views that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Views
     * const views = await prisma.view.findMany()
     * 
     * // Get first 10 Views
     * const views = await prisma.view.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const viewWithIdOnly = await prisma.view.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ViewFindManyArgs>(args?: SelectSubset<T, ViewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a View.
     * @param {ViewCreateArgs} args - Arguments to create a View.
     * @example
     * // Create one View
     * const View = await prisma.view.create({
     *   data: {
     *     // ... data to create a View
     *   }
     * })
     * 
     */
    create<T extends ViewCreateArgs>(args: SelectSubset<T, ViewCreateArgs<ExtArgs>>): Prisma__ViewClient<$Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Views.
     * @param {ViewCreateManyArgs} args - Arguments to create many Views.
     * @example
     * // Create many Views
     * const view = await prisma.view.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ViewCreateManyArgs>(args?: SelectSubset<T, ViewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Views and returns the data saved in the database.
     * @param {ViewCreateManyAndReturnArgs} args - Arguments to create many Views.
     * @example
     * // Create many Views
     * const view = await prisma.view.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Views and only return the `id`
     * const viewWithIdOnly = await prisma.view.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ViewCreateManyAndReturnArgs>(args?: SelectSubset<T, ViewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a View.
     * @param {ViewDeleteArgs} args - Arguments to delete one View.
     * @example
     * // Delete one View
     * const View = await prisma.view.delete({
     *   where: {
     *     // ... filter to delete one View
     *   }
     * })
     * 
     */
    delete<T extends ViewDeleteArgs>(args: SelectSubset<T, ViewDeleteArgs<ExtArgs>>): Prisma__ViewClient<$Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one View.
     * @param {ViewUpdateArgs} args - Arguments to update one View.
     * @example
     * // Update one View
     * const view = await prisma.view.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ViewUpdateArgs>(args: SelectSubset<T, ViewUpdateArgs<ExtArgs>>): Prisma__ViewClient<$Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Views.
     * @param {ViewDeleteManyArgs} args - Arguments to filter Views to delete.
     * @example
     * // Delete a few Views
     * const { count } = await prisma.view.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ViewDeleteManyArgs>(args?: SelectSubset<T, ViewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Views.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Views
     * const view = await prisma.view.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ViewUpdateManyArgs>(args: SelectSubset<T, ViewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Views and returns the data updated in the database.
     * @param {ViewUpdateManyAndReturnArgs} args - Arguments to update many Views.
     * @example
     * // Update many Views
     * const view = await prisma.view.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Views and only return the `id`
     * const viewWithIdOnly = await prisma.view.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ViewUpdateManyAndReturnArgs>(args: SelectSubset<T, ViewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one View.
     * @param {ViewUpsertArgs} args - Arguments to update or create a View.
     * @example
     * // Update or create a View
     * const view = await prisma.view.upsert({
     *   create: {
     *     // ... data to create a View
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the View we want to update
     *   }
     * })
     */
    upsert<T extends ViewUpsertArgs>(args: SelectSubset<T, ViewUpsertArgs<ExtArgs>>): Prisma__ViewClient<$Result.GetResult<Prisma.$ViewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Views.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewCountArgs} args - Arguments to filter Views to count.
     * @example
     * // Count the number of Views
     * const count = await prisma.view.count({
     *   where: {
     *     // ... the filter for the Views we want to count
     *   }
     * })
    **/
    count<T extends ViewCountArgs>(
      args?: Subset<T, ViewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ViewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a View.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ViewAggregateArgs>(args: Subset<T, ViewAggregateArgs>): Prisma.PrismaPromise<GetViewAggregateType<T>>

    /**
     * Group by View.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ViewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ViewGroupByArgs['orderBy'] }
        : { orderBy?: ViewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ViewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetViewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the View model
   */
  readonly fields: ViewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for View.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ViewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the View model
   */
  interface ViewFieldRefs {
    readonly id: FieldRef<"View", 'Int'>
    readonly nombre: FieldRef<"View", 'String'>
    readonly descripcion: FieldRef<"View", 'String'>
    readonly tipo: FieldRef<"View", 'String'>
    readonly configuracion: FieldRef<"View", 'Json'>
    readonly activo: FieldRef<"View", 'Boolean'>
    readonly createdAt: FieldRef<"View", 'DateTime'>
    readonly updatedAt: FieldRef<"View", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * View findUnique
   */
  export type ViewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the View
     */
    select?: ViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the View
     */
    omit?: ViewOmit<ExtArgs> | null
    /**
     * Filter, which View to fetch.
     */
    where: ViewWhereUniqueInput
  }

  /**
   * View findUniqueOrThrow
   */
  export type ViewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the View
     */
    select?: ViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the View
     */
    omit?: ViewOmit<ExtArgs> | null
    /**
     * Filter, which View to fetch.
     */
    where: ViewWhereUniqueInput
  }

  /**
   * View findFirst
   */
  export type ViewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the View
     */
    select?: ViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the View
     */
    omit?: ViewOmit<ExtArgs> | null
    /**
     * Filter, which View to fetch.
     */
    where?: ViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Views to fetch.
     */
    orderBy?: ViewOrderByWithRelationInput | ViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Views.
     */
    cursor?: ViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Views from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Views.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Views.
     */
    distinct?: ViewScalarFieldEnum | ViewScalarFieldEnum[]
  }

  /**
   * View findFirstOrThrow
   */
  export type ViewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the View
     */
    select?: ViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the View
     */
    omit?: ViewOmit<ExtArgs> | null
    /**
     * Filter, which View to fetch.
     */
    where?: ViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Views to fetch.
     */
    orderBy?: ViewOrderByWithRelationInput | ViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Views.
     */
    cursor?: ViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Views from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Views.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Views.
     */
    distinct?: ViewScalarFieldEnum | ViewScalarFieldEnum[]
  }

  /**
   * View findMany
   */
  export type ViewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the View
     */
    select?: ViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the View
     */
    omit?: ViewOmit<ExtArgs> | null
    /**
     * Filter, which Views to fetch.
     */
    where?: ViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Views to fetch.
     */
    orderBy?: ViewOrderByWithRelationInput | ViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Views.
     */
    cursor?: ViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Views from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Views.
     */
    skip?: number
    distinct?: ViewScalarFieldEnum | ViewScalarFieldEnum[]
  }

  /**
   * View create
   */
  export type ViewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the View
     */
    select?: ViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the View
     */
    omit?: ViewOmit<ExtArgs> | null
    /**
     * The data needed to create a View.
     */
    data: XOR<ViewCreateInput, ViewUncheckedCreateInput>
  }

  /**
   * View createMany
   */
  export type ViewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Views.
     */
    data: ViewCreateManyInput | ViewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * View createManyAndReturn
   */
  export type ViewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the View
     */
    select?: ViewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the View
     */
    omit?: ViewOmit<ExtArgs> | null
    /**
     * The data used to create many Views.
     */
    data: ViewCreateManyInput | ViewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * View update
   */
  export type ViewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the View
     */
    select?: ViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the View
     */
    omit?: ViewOmit<ExtArgs> | null
    /**
     * The data needed to update a View.
     */
    data: XOR<ViewUpdateInput, ViewUncheckedUpdateInput>
    /**
     * Choose, which View to update.
     */
    where: ViewWhereUniqueInput
  }

  /**
   * View updateMany
   */
  export type ViewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Views.
     */
    data: XOR<ViewUpdateManyMutationInput, ViewUncheckedUpdateManyInput>
    /**
     * Filter which Views to update
     */
    where?: ViewWhereInput
    /**
     * Limit how many Views to update.
     */
    limit?: number
  }

  /**
   * View updateManyAndReturn
   */
  export type ViewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the View
     */
    select?: ViewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the View
     */
    omit?: ViewOmit<ExtArgs> | null
    /**
     * The data used to update Views.
     */
    data: XOR<ViewUpdateManyMutationInput, ViewUncheckedUpdateManyInput>
    /**
     * Filter which Views to update
     */
    where?: ViewWhereInput
    /**
     * Limit how many Views to update.
     */
    limit?: number
  }

  /**
   * View upsert
   */
  export type ViewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the View
     */
    select?: ViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the View
     */
    omit?: ViewOmit<ExtArgs> | null
    /**
     * The filter to search for the View to update in case it exists.
     */
    where: ViewWhereUniqueInput
    /**
     * In case the View found by the `where` argument doesn't exist, create a new View with this data.
     */
    create: XOR<ViewCreateInput, ViewUncheckedCreateInput>
    /**
     * In case the View was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ViewUpdateInput, ViewUncheckedUpdateInput>
  }

  /**
   * View delete
   */
  export type ViewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the View
     */
    select?: ViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the View
     */
    omit?: ViewOmit<ExtArgs> | null
    /**
     * Filter which View to delete.
     */
    where: ViewWhereUniqueInput
  }

  /**
   * View deleteMany
   */
  export type ViewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Views to delete
     */
    where?: ViewWhereInput
    /**
     * Limit how many Views to delete.
     */
    limit?: number
  }

  /**
   * View without action
   */
  export type ViewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the View
     */
    select?: ViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the View
     */
    omit?: ViewOmit<ExtArgs> | null
  }


  /**
   * Model ContenidoDestacado
   */

  export type AggregateContenidoDestacado = {
    _count: ContenidoDestacadoCountAggregateOutputType | null
    _avg: ContenidoDestacadoAvgAggregateOutputType | null
    _sum: ContenidoDestacadoSumAggregateOutputType | null
    _min: ContenidoDestacadoMinAggregateOutputType | null
    _max: ContenidoDestacadoMaxAggregateOutputType | null
  }

  export type ContenidoDestacadoAvgAggregateOutputType = {
    id: number | null
  }

  export type ContenidoDestacadoSumAggregateOutputType = {
    id: number | null
  }

  export type ContenidoDestacadoMinAggregateOutputType = {
    id: number | null
    media: string | null
    url: string | null
    fechaInicio: Date | null
    fechaFin: Date | null
    titulo: string | null
    ubicacion: string | null
    visible: boolean | null
  }

  export type ContenidoDestacadoMaxAggregateOutputType = {
    id: number | null
    media: string | null
    url: string | null
    fechaInicio: Date | null
    fechaFin: Date | null
    titulo: string | null
    ubicacion: string | null
    visible: boolean | null
  }

  export type ContenidoDestacadoCountAggregateOutputType = {
    id: number
    media: number
    url: number
    fechaInicio: number
    fechaFin: number
    titulo: number
    ubicacion: number
    visible: number
    _all: number
  }


  export type ContenidoDestacadoAvgAggregateInputType = {
    id?: true
  }

  export type ContenidoDestacadoSumAggregateInputType = {
    id?: true
  }

  export type ContenidoDestacadoMinAggregateInputType = {
    id?: true
    media?: true
    url?: true
    fechaInicio?: true
    fechaFin?: true
    titulo?: true
    ubicacion?: true
    visible?: true
  }

  export type ContenidoDestacadoMaxAggregateInputType = {
    id?: true
    media?: true
    url?: true
    fechaInicio?: true
    fechaFin?: true
    titulo?: true
    ubicacion?: true
    visible?: true
  }

  export type ContenidoDestacadoCountAggregateInputType = {
    id?: true
    media?: true
    url?: true
    fechaInicio?: true
    fechaFin?: true
    titulo?: true
    ubicacion?: true
    visible?: true
    _all?: true
  }

  export type ContenidoDestacadoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContenidoDestacado to aggregate.
     */
    where?: ContenidoDestacadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContenidoDestacados to fetch.
     */
    orderBy?: ContenidoDestacadoOrderByWithRelationInput | ContenidoDestacadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContenidoDestacadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContenidoDestacados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContenidoDestacados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContenidoDestacados
    **/
    _count?: true | ContenidoDestacadoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContenidoDestacadoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContenidoDestacadoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContenidoDestacadoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContenidoDestacadoMaxAggregateInputType
  }

  export type GetContenidoDestacadoAggregateType<T extends ContenidoDestacadoAggregateArgs> = {
        [P in keyof T & keyof AggregateContenidoDestacado]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContenidoDestacado[P]>
      : GetScalarType<T[P], AggregateContenidoDestacado[P]>
  }




  export type ContenidoDestacadoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContenidoDestacadoWhereInput
    orderBy?: ContenidoDestacadoOrderByWithAggregationInput | ContenidoDestacadoOrderByWithAggregationInput[]
    by: ContenidoDestacadoScalarFieldEnum[] | ContenidoDestacadoScalarFieldEnum
    having?: ContenidoDestacadoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContenidoDestacadoCountAggregateInputType | true
    _avg?: ContenidoDestacadoAvgAggregateInputType
    _sum?: ContenidoDestacadoSumAggregateInputType
    _min?: ContenidoDestacadoMinAggregateInputType
    _max?: ContenidoDestacadoMaxAggregateInputType
  }

  export type ContenidoDestacadoGroupByOutputType = {
    id: number
    media: string
    url: string | null
    fechaInicio: Date | null
    fechaFin: Date | null
    titulo: string | null
    ubicacion: string
    visible: boolean
    _count: ContenidoDestacadoCountAggregateOutputType | null
    _avg: ContenidoDestacadoAvgAggregateOutputType | null
    _sum: ContenidoDestacadoSumAggregateOutputType | null
    _min: ContenidoDestacadoMinAggregateOutputType | null
    _max: ContenidoDestacadoMaxAggregateOutputType | null
  }

  type GetContenidoDestacadoGroupByPayload<T extends ContenidoDestacadoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContenidoDestacadoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContenidoDestacadoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContenidoDestacadoGroupByOutputType[P]>
            : GetScalarType<T[P], ContenidoDestacadoGroupByOutputType[P]>
        }
      >
    >


  export type ContenidoDestacadoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    media?: boolean
    url?: boolean
    fechaInicio?: boolean
    fechaFin?: boolean
    titulo?: boolean
    ubicacion?: boolean
    visible?: boolean
  }, ExtArgs["result"]["contenidoDestacado"]>

  export type ContenidoDestacadoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    media?: boolean
    url?: boolean
    fechaInicio?: boolean
    fechaFin?: boolean
    titulo?: boolean
    ubicacion?: boolean
    visible?: boolean
  }, ExtArgs["result"]["contenidoDestacado"]>

  export type ContenidoDestacadoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    media?: boolean
    url?: boolean
    fechaInicio?: boolean
    fechaFin?: boolean
    titulo?: boolean
    ubicacion?: boolean
    visible?: boolean
  }, ExtArgs["result"]["contenidoDestacado"]>

  export type ContenidoDestacadoSelectScalar = {
    id?: boolean
    media?: boolean
    url?: boolean
    fechaInicio?: boolean
    fechaFin?: boolean
    titulo?: boolean
    ubicacion?: boolean
    visible?: boolean
  }

  export type ContenidoDestacadoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "media" | "url" | "fechaInicio" | "fechaFin" | "titulo" | "ubicacion" | "visible", ExtArgs["result"]["contenidoDestacado"]>

  export type $ContenidoDestacadoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContenidoDestacado"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      media: string
      url: string | null
      fechaInicio: Date | null
      fechaFin: Date | null
      titulo: string | null
      ubicacion: string
      visible: boolean
    }, ExtArgs["result"]["contenidoDestacado"]>
    composites: {}
  }

  type ContenidoDestacadoGetPayload<S extends boolean | null | undefined | ContenidoDestacadoDefaultArgs> = $Result.GetResult<Prisma.$ContenidoDestacadoPayload, S>

  type ContenidoDestacadoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContenidoDestacadoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContenidoDestacadoCountAggregateInputType | true
    }

  export interface ContenidoDestacadoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContenidoDestacado'], meta: { name: 'ContenidoDestacado' } }
    /**
     * Find zero or one ContenidoDestacado that matches the filter.
     * @param {ContenidoDestacadoFindUniqueArgs} args - Arguments to find a ContenidoDestacado
     * @example
     * // Get one ContenidoDestacado
     * const contenidoDestacado = await prisma.contenidoDestacado.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContenidoDestacadoFindUniqueArgs>(args: SelectSubset<T, ContenidoDestacadoFindUniqueArgs<ExtArgs>>): Prisma__ContenidoDestacadoClient<$Result.GetResult<Prisma.$ContenidoDestacadoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContenidoDestacado that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContenidoDestacadoFindUniqueOrThrowArgs} args - Arguments to find a ContenidoDestacado
     * @example
     * // Get one ContenidoDestacado
     * const contenidoDestacado = await prisma.contenidoDestacado.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContenidoDestacadoFindUniqueOrThrowArgs>(args: SelectSubset<T, ContenidoDestacadoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContenidoDestacadoClient<$Result.GetResult<Prisma.$ContenidoDestacadoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContenidoDestacado that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContenidoDestacadoFindFirstArgs} args - Arguments to find a ContenidoDestacado
     * @example
     * // Get one ContenidoDestacado
     * const contenidoDestacado = await prisma.contenidoDestacado.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContenidoDestacadoFindFirstArgs>(args?: SelectSubset<T, ContenidoDestacadoFindFirstArgs<ExtArgs>>): Prisma__ContenidoDestacadoClient<$Result.GetResult<Prisma.$ContenidoDestacadoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContenidoDestacado that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContenidoDestacadoFindFirstOrThrowArgs} args - Arguments to find a ContenidoDestacado
     * @example
     * // Get one ContenidoDestacado
     * const contenidoDestacado = await prisma.contenidoDestacado.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContenidoDestacadoFindFirstOrThrowArgs>(args?: SelectSubset<T, ContenidoDestacadoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContenidoDestacadoClient<$Result.GetResult<Prisma.$ContenidoDestacadoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContenidoDestacados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContenidoDestacadoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContenidoDestacados
     * const contenidoDestacados = await prisma.contenidoDestacado.findMany()
     * 
     * // Get first 10 ContenidoDestacados
     * const contenidoDestacados = await prisma.contenidoDestacado.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contenidoDestacadoWithIdOnly = await prisma.contenidoDestacado.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContenidoDestacadoFindManyArgs>(args?: SelectSubset<T, ContenidoDestacadoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContenidoDestacadoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContenidoDestacado.
     * @param {ContenidoDestacadoCreateArgs} args - Arguments to create a ContenidoDestacado.
     * @example
     * // Create one ContenidoDestacado
     * const ContenidoDestacado = await prisma.contenidoDestacado.create({
     *   data: {
     *     // ... data to create a ContenidoDestacado
     *   }
     * })
     * 
     */
    create<T extends ContenidoDestacadoCreateArgs>(args: SelectSubset<T, ContenidoDestacadoCreateArgs<ExtArgs>>): Prisma__ContenidoDestacadoClient<$Result.GetResult<Prisma.$ContenidoDestacadoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContenidoDestacados.
     * @param {ContenidoDestacadoCreateManyArgs} args - Arguments to create many ContenidoDestacados.
     * @example
     * // Create many ContenidoDestacados
     * const contenidoDestacado = await prisma.contenidoDestacado.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContenidoDestacadoCreateManyArgs>(args?: SelectSubset<T, ContenidoDestacadoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContenidoDestacados and returns the data saved in the database.
     * @param {ContenidoDestacadoCreateManyAndReturnArgs} args - Arguments to create many ContenidoDestacados.
     * @example
     * // Create many ContenidoDestacados
     * const contenidoDestacado = await prisma.contenidoDestacado.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContenidoDestacados and only return the `id`
     * const contenidoDestacadoWithIdOnly = await prisma.contenidoDestacado.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContenidoDestacadoCreateManyAndReturnArgs>(args?: SelectSubset<T, ContenidoDestacadoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContenidoDestacadoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ContenidoDestacado.
     * @param {ContenidoDestacadoDeleteArgs} args - Arguments to delete one ContenidoDestacado.
     * @example
     * // Delete one ContenidoDestacado
     * const ContenidoDestacado = await prisma.contenidoDestacado.delete({
     *   where: {
     *     // ... filter to delete one ContenidoDestacado
     *   }
     * })
     * 
     */
    delete<T extends ContenidoDestacadoDeleteArgs>(args: SelectSubset<T, ContenidoDestacadoDeleteArgs<ExtArgs>>): Prisma__ContenidoDestacadoClient<$Result.GetResult<Prisma.$ContenidoDestacadoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContenidoDestacado.
     * @param {ContenidoDestacadoUpdateArgs} args - Arguments to update one ContenidoDestacado.
     * @example
     * // Update one ContenidoDestacado
     * const contenidoDestacado = await prisma.contenidoDestacado.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContenidoDestacadoUpdateArgs>(args: SelectSubset<T, ContenidoDestacadoUpdateArgs<ExtArgs>>): Prisma__ContenidoDestacadoClient<$Result.GetResult<Prisma.$ContenidoDestacadoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContenidoDestacados.
     * @param {ContenidoDestacadoDeleteManyArgs} args - Arguments to filter ContenidoDestacados to delete.
     * @example
     * // Delete a few ContenidoDestacados
     * const { count } = await prisma.contenidoDestacado.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContenidoDestacadoDeleteManyArgs>(args?: SelectSubset<T, ContenidoDestacadoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContenidoDestacados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContenidoDestacadoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContenidoDestacados
     * const contenidoDestacado = await prisma.contenidoDestacado.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContenidoDestacadoUpdateManyArgs>(args: SelectSubset<T, ContenidoDestacadoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContenidoDestacados and returns the data updated in the database.
     * @param {ContenidoDestacadoUpdateManyAndReturnArgs} args - Arguments to update many ContenidoDestacados.
     * @example
     * // Update many ContenidoDestacados
     * const contenidoDestacado = await prisma.contenidoDestacado.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ContenidoDestacados and only return the `id`
     * const contenidoDestacadoWithIdOnly = await prisma.contenidoDestacado.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContenidoDestacadoUpdateManyAndReturnArgs>(args: SelectSubset<T, ContenidoDestacadoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContenidoDestacadoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ContenidoDestacado.
     * @param {ContenidoDestacadoUpsertArgs} args - Arguments to update or create a ContenidoDestacado.
     * @example
     * // Update or create a ContenidoDestacado
     * const contenidoDestacado = await prisma.contenidoDestacado.upsert({
     *   create: {
     *     // ... data to create a ContenidoDestacado
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContenidoDestacado we want to update
     *   }
     * })
     */
    upsert<T extends ContenidoDestacadoUpsertArgs>(args: SelectSubset<T, ContenidoDestacadoUpsertArgs<ExtArgs>>): Prisma__ContenidoDestacadoClient<$Result.GetResult<Prisma.$ContenidoDestacadoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContenidoDestacados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContenidoDestacadoCountArgs} args - Arguments to filter ContenidoDestacados to count.
     * @example
     * // Count the number of ContenidoDestacados
     * const count = await prisma.contenidoDestacado.count({
     *   where: {
     *     // ... the filter for the ContenidoDestacados we want to count
     *   }
     * })
    **/
    count<T extends ContenidoDestacadoCountArgs>(
      args?: Subset<T, ContenidoDestacadoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContenidoDestacadoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContenidoDestacado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContenidoDestacadoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContenidoDestacadoAggregateArgs>(args: Subset<T, ContenidoDestacadoAggregateArgs>): Prisma.PrismaPromise<GetContenidoDestacadoAggregateType<T>>

    /**
     * Group by ContenidoDestacado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContenidoDestacadoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContenidoDestacadoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContenidoDestacadoGroupByArgs['orderBy'] }
        : { orderBy?: ContenidoDestacadoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContenidoDestacadoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContenidoDestacadoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContenidoDestacado model
   */
  readonly fields: ContenidoDestacadoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContenidoDestacado.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContenidoDestacadoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContenidoDestacado model
   */
  interface ContenidoDestacadoFieldRefs {
    readonly id: FieldRef<"ContenidoDestacado", 'Int'>
    readonly media: FieldRef<"ContenidoDestacado", 'String'>
    readonly url: FieldRef<"ContenidoDestacado", 'String'>
    readonly fechaInicio: FieldRef<"ContenidoDestacado", 'DateTime'>
    readonly fechaFin: FieldRef<"ContenidoDestacado", 'DateTime'>
    readonly titulo: FieldRef<"ContenidoDestacado", 'String'>
    readonly ubicacion: FieldRef<"ContenidoDestacado", 'String'>
    readonly visible: FieldRef<"ContenidoDestacado", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ContenidoDestacado findUnique
   */
  export type ContenidoDestacadoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContenidoDestacado
     */
    select?: ContenidoDestacadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContenidoDestacado
     */
    omit?: ContenidoDestacadoOmit<ExtArgs> | null
    /**
     * Filter, which ContenidoDestacado to fetch.
     */
    where: ContenidoDestacadoWhereUniqueInput
  }

  /**
   * ContenidoDestacado findUniqueOrThrow
   */
  export type ContenidoDestacadoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContenidoDestacado
     */
    select?: ContenidoDestacadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContenidoDestacado
     */
    omit?: ContenidoDestacadoOmit<ExtArgs> | null
    /**
     * Filter, which ContenidoDestacado to fetch.
     */
    where: ContenidoDestacadoWhereUniqueInput
  }

  /**
   * ContenidoDestacado findFirst
   */
  export type ContenidoDestacadoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContenidoDestacado
     */
    select?: ContenidoDestacadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContenidoDestacado
     */
    omit?: ContenidoDestacadoOmit<ExtArgs> | null
    /**
     * Filter, which ContenidoDestacado to fetch.
     */
    where?: ContenidoDestacadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContenidoDestacados to fetch.
     */
    orderBy?: ContenidoDestacadoOrderByWithRelationInput | ContenidoDestacadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContenidoDestacados.
     */
    cursor?: ContenidoDestacadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContenidoDestacados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContenidoDestacados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContenidoDestacados.
     */
    distinct?: ContenidoDestacadoScalarFieldEnum | ContenidoDestacadoScalarFieldEnum[]
  }

  /**
   * ContenidoDestacado findFirstOrThrow
   */
  export type ContenidoDestacadoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContenidoDestacado
     */
    select?: ContenidoDestacadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContenidoDestacado
     */
    omit?: ContenidoDestacadoOmit<ExtArgs> | null
    /**
     * Filter, which ContenidoDestacado to fetch.
     */
    where?: ContenidoDestacadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContenidoDestacados to fetch.
     */
    orderBy?: ContenidoDestacadoOrderByWithRelationInput | ContenidoDestacadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContenidoDestacados.
     */
    cursor?: ContenidoDestacadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContenidoDestacados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContenidoDestacados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContenidoDestacados.
     */
    distinct?: ContenidoDestacadoScalarFieldEnum | ContenidoDestacadoScalarFieldEnum[]
  }

  /**
   * ContenidoDestacado findMany
   */
  export type ContenidoDestacadoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContenidoDestacado
     */
    select?: ContenidoDestacadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContenidoDestacado
     */
    omit?: ContenidoDestacadoOmit<ExtArgs> | null
    /**
     * Filter, which ContenidoDestacados to fetch.
     */
    where?: ContenidoDestacadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContenidoDestacados to fetch.
     */
    orderBy?: ContenidoDestacadoOrderByWithRelationInput | ContenidoDestacadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContenidoDestacados.
     */
    cursor?: ContenidoDestacadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContenidoDestacados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContenidoDestacados.
     */
    skip?: number
    distinct?: ContenidoDestacadoScalarFieldEnum | ContenidoDestacadoScalarFieldEnum[]
  }

  /**
   * ContenidoDestacado create
   */
  export type ContenidoDestacadoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContenidoDestacado
     */
    select?: ContenidoDestacadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContenidoDestacado
     */
    omit?: ContenidoDestacadoOmit<ExtArgs> | null
    /**
     * The data needed to create a ContenidoDestacado.
     */
    data: XOR<ContenidoDestacadoCreateInput, ContenidoDestacadoUncheckedCreateInput>
  }

  /**
   * ContenidoDestacado createMany
   */
  export type ContenidoDestacadoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContenidoDestacados.
     */
    data: ContenidoDestacadoCreateManyInput | ContenidoDestacadoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContenidoDestacado createManyAndReturn
   */
  export type ContenidoDestacadoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContenidoDestacado
     */
    select?: ContenidoDestacadoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContenidoDestacado
     */
    omit?: ContenidoDestacadoOmit<ExtArgs> | null
    /**
     * The data used to create many ContenidoDestacados.
     */
    data: ContenidoDestacadoCreateManyInput | ContenidoDestacadoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContenidoDestacado update
   */
  export type ContenidoDestacadoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContenidoDestacado
     */
    select?: ContenidoDestacadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContenidoDestacado
     */
    omit?: ContenidoDestacadoOmit<ExtArgs> | null
    /**
     * The data needed to update a ContenidoDestacado.
     */
    data: XOR<ContenidoDestacadoUpdateInput, ContenidoDestacadoUncheckedUpdateInput>
    /**
     * Choose, which ContenidoDestacado to update.
     */
    where: ContenidoDestacadoWhereUniqueInput
  }

  /**
   * ContenidoDestacado updateMany
   */
  export type ContenidoDestacadoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContenidoDestacados.
     */
    data: XOR<ContenidoDestacadoUpdateManyMutationInput, ContenidoDestacadoUncheckedUpdateManyInput>
    /**
     * Filter which ContenidoDestacados to update
     */
    where?: ContenidoDestacadoWhereInput
    /**
     * Limit how many ContenidoDestacados to update.
     */
    limit?: number
  }

  /**
   * ContenidoDestacado updateManyAndReturn
   */
  export type ContenidoDestacadoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContenidoDestacado
     */
    select?: ContenidoDestacadoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContenidoDestacado
     */
    omit?: ContenidoDestacadoOmit<ExtArgs> | null
    /**
     * The data used to update ContenidoDestacados.
     */
    data: XOR<ContenidoDestacadoUpdateManyMutationInput, ContenidoDestacadoUncheckedUpdateManyInput>
    /**
     * Filter which ContenidoDestacados to update
     */
    where?: ContenidoDestacadoWhereInput
    /**
     * Limit how many ContenidoDestacados to update.
     */
    limit?: number
  }

  /**
   * ContenidoDestacado upsert
   */
  export type ContenidoDestacadoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContenidoDestacado
     */
    select?: ContenidoDestacadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContenidoDestacado
     */
    omit?: ContenidoDestacadoOmit<ExtArgs> | null
    /**
     * The filter to search for the ContenidoDestacado to update in case it exists.
     */
    where: ContenidoDestacadoWhereUniqueInput
    /**
     * In case the ContenidoDestacado found by the `where` argument doesn't exist, create a new ContenidoDestacado with this data.
     */
    create: XOR<ContenidoDestacadoCreateInput, ContenidoDestacadoUncheckedCreateInput>
    /**
     * In case the ContenidoDestacado was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContenidoDestacadoUpdateInput, ContenidoDestacadoUncheckedUpdateInput>
  }

  /**
   * ContenidoDestacado delete
   */
  export type ContenidoDestacadoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContenidoDestacado
     */
    select?: ContenidoDestacadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContenidoDestacado
     */
    omit?: ContenidoDestacadoOmit<ExtArgs> | null
    /**
     * Filter which ContenidoDestacado to delete.
     */
    where: ContenidoDestacadoWhereUniqueInput
  }

  /**
   * ContenidoDestacado deleteMany
   */
  export type ContenidoDestacadoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContenidoDestacados to delete
     */
    where?: ContenidoDestacadoWhereInput
    /**
     * Limit how many ContenidoDestacados to delete.
     */
    limit?: number
  }

  /**
   * ContenidoDestacado without action
   */
  export type ContenidoDestacadoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContenidoDestacado
     */
    select?: ContenidoDestacadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContenidoDestacado
     */
    omit?: ContenidoDestacadoOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SeccionScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre'
  };

  export type SeccionScalarFieldEnum = (typeof SeccionScalarFieldEnum)[keyof typeof SeccionScalarFieldEnum]


  export const RolScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre'
  };

  export type RolScalarFieldEnum = (typeof RolScalarFieldEnum)[keyof typeof RolScalarFieldEnum]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    createdAt: 'createdAt'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const UsuarioRolScalarFieldEnum: {
    usuarioId: 'usuarioId',
    rolId: 'rolId'
  };

  export type UsuarioRolScalarFieldEnum = (typeof UsuarioRolScalarFieldEnum)[keyof typeof UsuarioRolScalarFieldEnum]


  export const ColumnistaScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    bio: 'bio',
    fotoUrl: 'fotoUrl',
    redes: 'redes',
    createdAt: 'createdAt'
  };

  export type ColumnistaScalarFieldEnum = (typeof ColumnistaScalarFieldEnum)[keyof typeof ColumnistaScalarFieldEnum]


  export const EditorialScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    contenido: 'contenido',
    fecha: 'fecha',
    autor: 'autor'
  };

  export type EditorialScalarFieldEnum = (typeof EditorialScalarFieldEnum)[keyof typeof EditorialScalarFieldEnum]


  export const OpinionScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    contenido: 'contenido',
    fecha: 'fecha',
    columnistaId: 'columnistaId',
    destacado: 'destacado'
  };

  export type OpinionScalarFieldEnum = (typeof OpinionScalarFieldEnum)[keyof typeof OpinionScalarFieldEnum]


  export const MediaScalarFieldEnum: {
    id: 'id',
    url: 'url',
    tipo: 'tipo',
    descripcion: 'descripcion',
    editorialId: 'editorialId',
    opinionId: 'opinionId'
  };

  export type MediaScalarFieldEnum = (typeof MediaScalarFieldEnum)[keyof typeof MediaScalarFieldEnum]


  export const NoticiaScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    contenido: 'contenido',
    resumen: 'resumen',
    autorTexto: 'autorTexto',
    autorFoto: 'autorFoto',
    destacada: 'destacada',
    fechaPublicacion: 'fechaPublicacion',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    seccionId: 'seccionId'
  };

  export type NoticiaScalarFieldEnum = (typeof NoticiaScalarFieldEnum)[keyof typeof NoticiaScalarFieldEnum]


  export const NoticiaMediaScalarFieldEnum: {
    noticiaId: 'noticiaId',
    mediaId: 'mediaId'
  };

  export type NoticiaMediaScalarFieldEnum = (typeof NoticiaMediaScalarFieldEnum)[keyof typeof NoticiaMediaScalarFieldEnum]


  export const PDFScalarFieldEnum: {
    id: 'id',
    url: 'url',
    fecha: 'fecha',
    descripcion: 'descripcion'
  };

  export type PDFScalarFieldEnum = (typeof PDFScalarFieldEnum)[keyof typeof PDFScalarFieldEnum]


  export const ViewScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    descripcion: 'descripcion',
    tipo: 'tipo',
    configuracion: 'configuracion',
    activo: 'activo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ViewScalarFieldEnum = (typeof ViewScalarFieldEnum)[keyof typeof ViewScalarFieldEnum]


  export const ContenidoDestacadoScalarFieldEnum: {
    id: 'id',
    media: 'media',
    url: 'url',
    fechaInicio: 'fechaInicio',
    fechaFin: 'fechaFin',
    titulo: 'titulo',
    ubicacion: 'ubicacion',
    visible: 'visible'
  };

  export type ContenidoDestacadoScalarFieldEnum = (typeof ContenidoDestacadoScalarFieldEnum)[keyof typeof ContenidoDestacadoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'MediaTipo'
   */
  export type EnumMediaTipoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MediaTipo'>
    


  /**
   * Reference to a field of type 'MediaTipo[]'
   */
  export type ListEnumMediaTipoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MediaTipo[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type SeccionWhereInput = {
    AND?: SeccionWhereInput | SeccionWhereInput[]
    OR?: SeccionWhereInput[]
    NOT?: SeccionWhereInput | SeccionWhereInput[]
    id?: IntFilter<"Seccion"> | number
    nombre?: StringFilter<"Seccion"> | string
    noticias?: NoticiaListRelationFilter
  }

  export type SeccionOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    noticias?: NoticiaOrderByRelationAggregateInput
  }

  export type SeccionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nombre?: string
    AND?: SeccionWhereInput | SeccionWhereInput[]
    OR?: SeccionWhereInput[]
    NOT?: SeccionWhereInput | SeccionWhereInput[]
    noticias?: NoticiaListRelationFilter
  }, "id" | "nombre">

  export type SeccionOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    _count?: SeccionCountOrderByAggregateInput
    _avg?: SeccionAvgOrderByAggregateInput
    _max?: SeccionMaxOrderByAggregateInput
    _min?: SeccionMinOrderByAggregateInput
    _sum?: SeccionSumOrderByAggregateInput
  }

  export type SeccionScalarWhereWithAggregatesInput = {
    AND?: SeccionScalarWhereWithAggregatesInput | SeccionScalarWhereWithAggregatesInput[]
    OR?: SeccionScalarWhereWithAggregatesInput[]
    NOT?: SeccionScalarWhereWithAggregatesInput | SeccionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Seccion"> | number
    nombre?: StringWithAggregatesFilter<"Seccion"> | string
  }

  export type RolWhereInput = {
    AND?: RolWhereInput | RolWhereInput[]
    OR?: RolWhereInput[]
    NOT?: RolWhereInput | RolWhereInput[]
    id?: IntFilter<"Rol"> | number
    nombre?: StringFilter<"Rol"> | string
    usuarioRoles?: UsuarioRolListRelationFilter
  }

  export type RolOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    usuarioRoles?: UsuarioRolOrderByRelationAggregateInput
  }

  export type RolWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nombre?: string
    AND?: RolWhereInput | RolWhereInput[]
    OR?: RolWhereInput[]
    NOT?: RolWhereInput | RolWhereInput[]
    usuarioRoles?: UsuarioRolListRelationFilter
  }, "id" | "nombre">

  export type RolOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    _count?: RolCountOrderByAggregateInput
    _avg?: RolAvgOrderByAggregateInput
    _max?: RolMaxOrderByAggregateInput
    _min?: RolMinOrderByAggregateInput
    _sum?: RolSumOrderByAggregateInput
  }

  export type RolScalarWhereWithAggregatesInput = {
    AND?: RolScalarWhereWithAggregatesInput | RolScalarWhereWithAggregatesInput[]
    OR?: RolScalarWhereWithAggregatesInput[]
    NOT?: RolScalarWhereWithAggregatesInput | RolScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Rol"> | number
    nombre?: StringWithAggregatesFilter<"Rol"> | string
  }

  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    username?: StringFilter<"Usuario"> | string
    password?: StringFilter<"Usuario"> | string
    createdAt?: DateTimeFilter<"Usuario"> | Date | string
    usuarioRoles?: UsuarioRolListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    usuarioRoles?: UsuarioRolOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    password?: StringFilter<"Usuario"> | string
    createdAt?: DateTimeFilter<"Usuario"> | Date | string
    usuarioRoles?: UsuarioRolListRelationFilter
  }, "id" | "username">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    username?: StringWithAggregatesFilter<"Usuario"> | string
    password?: StringWithAggregatesFilter<"Usuario"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Usuario"> | Date | string
  }

  export type UsuarioRolWhereInput = {
    AND?: UsuarioRolWhereInput | UsuarioRolWhereInput[]
    OR?: UsuarioRolWhereInput[]
    NOT?: UsuarioRolWhereInput | UsuarioRolWhereInput[]
    usuarioId?: IntFilter<"UsuarioRol"> | number
    rolId?: IntFilter<"UsuarioRol"> | number
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    rol?: XOR<RolScalarRelationFilter, RolWhereInput>
  }

  export type UsuarioRolOrderByWithRelationInput = {
    usuarioId?: SortOrder
    rolId?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    rol?: RolOrderByWithRelationInput
  }

  export type UsuarioRolWhereUniqueInput = Prisma.AtLeast<{
    usuarioId_rolId?: UsuarioRolUsuarioIdRolIdCompoundUniqueInput
    AND?: UsuarioRolWhereInput | UsuarioRolWhereInput[]
    OR?: UsuarioRolWhereInput[]
    NOT?: UsuarioRolWhereInput | UsuarioRolWhereInput[]
    usuarioId?: IntFilter<"UsuarioRol"> | number
    rolId?: IntFilter<"UsuarioRol"> | number
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    rol?: XOR<RolScalarRelationFilter, RolWhereInput>
  }, "usuarioId_rolId">

  export type UsuarioRolOrderByWithAggregationInput = {
    usuarioId?: SortOrder
    rolId?: SortOrder
    _count?: UsuarioRolCountOrderByAggregateInput
    _avg?: UsuarioRolAvgOrderByAggregateInput
    _max?: UsuarioRolMaxOrderByAggregateInput
    _min?: UsuarioRolMinOrderByAggregateInput
    _sum?: UsuarioRolSumOrderByAggregateInput
  }

  export type UsuarioRolScalarWhereWithAggregatesInput = {
    AND?: UsuarioRolScalarWhereWithAggregatesInput | UsuarioRolScalarWhereWithAggregatesInput[]
    OR?: UsuarioRolScalarWhereWithAggregatesInput[]
    NOT?: UsuarioRolScalarWhereWithAggregatesInput | UsuarioRolScalarWhereWithAggregatesInput[]
    usuarioId?: IntWithAggregatesFilter<"UsuarioRol"> | number
    rolId?: IntWithAggregatesFilter<"UsuarioRol"> | number
  }

  export type ColumnistaWhereInput = {
    AND?: ColumnistaWhereInput | ColumnistaWhereInput[]
    OR?: ColumnistaWhereInput[]
    NOT?: ColumnistaWhereInput | ColumnistaWhereInput[]
    id?: IntFilter<"Columnista"> | number
    nombre?: StringFilter<"Columnista"> | string
    bio?: StringFilter<"Columnista"> | string
    fotoUrl?: StringNullableFilter<"Columnista"> | string | null
    redes?: JsonNullableFilter<"Columnista">
    createdAt?: DateTimeFilter<"Columnista"> | Date | string
    opiniones?: OpinionListRelationFilter
  }

  export type ColumnistaOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    bio?: SortOrder
    fotoUrl?: SortOrderInput | SortOrder
    redes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    opiniones?: OpinionOrderByRelationAggregateInput
  }

  export type ColumnistaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ColumnistaWhereInput | ColumnistaWhereInput[]
    OR?: ColumnistaWhereInput[]
    NOT?: ColumnistaWhereInput | ColumnistaWhereInput[]
    nombre?: StringFilter<"Columnista"> | string
    bio?: StringFilter<"Columnista"> | string
    fotoUrl?: StringNullableFilter<"Columnista"> | string | null
    redes?: JsonNullableFilter<"Columnista">
    createdAt?: DateTimeFilter<"Columnista"> | Date | string
    opiniones?: OpinionListRelationFilter
  }, "id">

  export type ColumnistaOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    bio?: SortOrder
    fotoUrl?: SortOrderInput | SortOrder
    redes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ColumnistaCountOrderByAggregateInput
    _avg?: ColumnistaAvgOrderByAggregateInput
    _max?: ColumnistaMaxOrderByAggregateInput
    _min?: ColumnistaMinOrderByAggregateInput
    _sum?: ColumnistaSumOrderByAggregateInput
  }

  export type ColumnistaScalarWhereWithAggregatesInput = {
    AND?: ColumnistaScalarWhereWithAggregatesInput | ColumnistaScalarWhereWithAggregatesInput[]
    OR?: ColumnistaScalarWhereWithAggregatesInput[]
    NOT?: ColumnistaScalarWhereWithAggregatesInput | ColumnistaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Columnista"> | number
    nombre?: StringWithAggregatesFilter<"Columnista"> | string
    bio?: StringWithAggregatesFilter<"Columnista"> | string
    fotoUrl?: StringNullableWithAggregatesFilter<"Columnista"> | string | null
    redes?: JsonNullableWithAggregatesFilter<"Columnista">
    createdAt?: DateTimeWithAggregatesFilter<"Columnista"> | Date | string
  }

  export type EditorialWhereInput = {
    AND?: EditorialWhereInput | EditorialWhereInput[]
    OR?: EditorialWhereInput[]
    NOT?: EditorialWhereInput | EditorialWhereInput[]
    id?: IntFilter<"Editorial"> | number
    titulo?: StringFilter<"Editorial"> | string
    contenido?: StringFilter<"Editorial"> | string
    fecha?: DateTimeFilter<"Editorial"> | Date | string
    autor?: StringNullableFilter<"Editorial"> | string | null
    media?: MediaListRelationFilter
  }

  export type EditorialOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    contenido?: SortOrder
    fecha?: SortOrder
    autor?: SortOrderInput | SortOrder
    media?: MediaOrderByRelationAggregateInput
  }

  export type EditorialWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EditorialWhereInput | EditorialWhereInput[]
    OR?: EditorialWhereInput[]
    NOT?: EditorialWhereInput | EditorialWhereInput[]
    titulo?: StringFilter<"Editorial"> | string
    contenido?: StringFilter<"Editorial"> | string
    fecha?: DateTimeFilter<"Editorial"> | Date | string
    autor?: StringNullableFilter<"Editorial"> | string | null
    media?: MediaListRelationFilter
  }, "id">

  export type EditorialOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    contenido?: SortOrder
    fecha?: SortOrder
    autor?: SortOrderInput | SortOrder
    _count?: EditorialCountOrderByAggregateInput
    _avg?: EditorialAvgOrderByAggregateInput
    _max?: EditorialMaxOrderByAggregateInput
    _min?: EditorialMinOrderByAggregateInput
    _sum?: EditorialSumOrderByAggregateInput
  }

  export type EditorialScalarWhereWithAggregatesInput = {
    AND?: EditorialScalarWhereWithAggregatesInput | EditorialScalarWhereWithAggregatesInput[]
    OR?: EditorialScalarWhereWithAggregatesInput[]
    NOT?: EditorialScalarWhereWithAggregatesInput | EditorialScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Editorial"> | number
    titulo?: StringWithAggregatesFilter<"Editorial"> | string
    contenido?: StringWithAggregatesFilter<"Editorial"> | string
    fecha?: DateTimeWithAggregatesFilter<"Editorial"> | Date | string
    autor?: StringNullableWithAggregatesFilter<"Editorial"> | string | null
  }

  export type OpinionWhereInput = {
    AND?: OpinionWhereInput | OpinionWhereInput[]
    OR?: OpinionWhereInput[]
    NOT?: OpinionWhereInput | OpinionWhereInput[]
    id?: IntFilter<"Opinion"> | number
    titulo?: StringFilter<"Opinion"> | string
    contenido?: StringFilter<"Opinion"> | string
    fecha?: DateTimeFilter<"Opinion"> | Date | string
    columnistaId?: IntFilter<"Opinion"> | number
    destacado?: BoolFilter<"Opinion"> | boolean
    columnista?: XOR<ColumnistaScalarRelationFilter, ColumnistaWhereInput>
    media?: MediaListRelationFilter
  }

  export type OpinionOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    contenido?: SortOrder
    fecha?: SortOrder
    columnistaId?: SortOrder
    destacado?: SortOrder
    columnista?: ColumnistaOrderByWithRelationInput
    media?: MediaOrderByRelationAggregateInput
  }

  export type OpinionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OpinionWhereInput | OpinionWhereInput[]
    OR?: OpinionWhereInput[]
    NOT?: OpinionWhereInput | OpinionWhereInput[]
    titulo?: StringFilter<"Opinion"> | string
    contenido?: StringFilter<"Opinion"> | string
    fecha?: DateTimeFilter<"Opinion"> | Date | string
    columnistaId?: IntFilter<"Opinion"> | number
    destacado?: BoolFilter<"Opinion"> | boolean
    columnista?: XOR<ColumnistaScalarRelationFilter, ColumnistaWhereInput>
    media?: MediaListRelationFilter
  }, "id">

  export type OpinionOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    contenido?: SortOrder
    fecha?: SortOrder
    columnistaId?: SortOrder
    destacado?: SortOrder
    _count?: OpinionCountOrderByAggregateInput
    _avg?: OpinionAvgOrderByAggregateInput
    _max?: OpinionMaxOrderByAggregateInput
    _min?: OpinionMinOrderByAggregateInput
    _sum?: OpinionSumOrderByAggregateInput
  }

  export type OpinionScalarWhereWithAggregatesInput = {
    AND?: OpinionScalarWhereWithAggregatesInput | OpinionScalarWhereWithAggregatesInput[]
    OR?: OpinionScalarWhereWithAggregatesInput[]
    NOT?: OpinionScalarWhereWithAggregatesInput | OpinionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Opinion"> | number
    titulo?: StringWithAggregatesFilter<"Opinion"> | string
    contenido?: StringWithAggregatesFilter<"Opinion"> | string
    fecha?: DateTimeWithAggregatesFilter<"Opinion"> | Date | string
    columnistaId?: IntWithAggregatesFilter<"Opinion"> | number
    destacado?: BoolWithAggregatesFilter<"Opinion"> | boolean
  }

  export type MediaWhereInput = {
    AND?: MediaWhereInput | MediaWhereInput[]
    OR?: MediaWhereInput[]
    NOT?: MediaWhereInput | MediaWhereInput[]
    id?: IntFilter<"Media"> | number
    url?: StringFilter<"Media"> | string
    tipo?: EnumMediaTipoFilter<"Media"> | $Enums.MediaTipo
    descripcion?: StringNullableFilter<"Media"> | string | null
    editorialId?: IntNullableFilter<"Media"> | number | null
    opinionId?: IntNullableFilter<"Media"> | number | null
    noticiaMedia?: NoticiaMediaListRelationFilter
    editorial?: XOR<EditorialNullableScalarRelationFilter, EditorialWhereInput> | null
    opinion?: XOR<OpinionNullableScalarRelationFilter, OpinionWhereInput> | null
  }

  export type MediaOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    tipo?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    editorialId?: SortOrderInput | SortOrder
    opinionId?: SortOrderInput | SortOrder
    noticiaMedia?: NoticiaMediaOrderByRelationAggregateInput
    editorial?: EditorialOrderByWithRelationInput
    opinion?: OpinionOrderByWithRelationInput
  }

  export type MediaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MediaWhereInput | MediaWhereInput[]
    OR?: MediaWhereInput[]
    NOT?: MediaWhereInput | MediaWhereInput[]
    url?: StringFilter<"Media"> | string
    tipo?: EnumMediaTipoFilter<"Media"> | $Enums.MediaTipo
    descripcion?: StringNullableFilter<"Media"> | string | null
    editorialId?: IntNullableFilter<"Media"> | number | null
    opinionId?: IntNullableFilter<"Media"> | number | null
    noticiaMedia?: NoticiaMediaListRelationFilter
    editorial?: XOR<EditorialNullableScalarRelationFilter, EditorialWhereInput> | null
    opinion?: XOR<OpinionNullableScalarRelationFilter, OpinionWhereInput> | null
  }, "id">

  export type MediaOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    tipo?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    editorialId?: SortOrderInput | SortOrder
    opinionId?: SortOrderInput | SortOrder
    _count?: MediaCountOrderByAggregateInput
    _avg?: MediaAvgOrderByAggregateInput
    _max?: MediaMaxOrderByAggregateInput
    _min?: MediaMinOrderByAggregateInput
    _sum?: MediaSumOrderByAggregateInput
  }

  export type MediaScalarWhereWithAggregatesInput = {
    AND?: MediaScalarWhereWithAggregatesInput | MediaScalarWhereWithAggregatesInput[]
    OR?: MediaScalarWhereWithAggregatesInput[]
    NOT?: MediaScalarWhereWithAggregatesInput | MediaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Media"> | number
    url?: StringWithAggregatesFilter<"Media"> | string
    tipo?: EnumMediaTipoWithAggregatesFilter<"Media"> | $Enums.MediaTipo
    descripcion?: StringNullableWithAggregatesFilter<"Media"> | string | null
    editorialId?: IntNullableWithAggregatesFilter<"Media"> | number | null
    opinionId?: IntNullableWithAggregatesFilter<"Media"> | number | null
  }

  export type NoticiaWhereInput = {
    AND?: NoticiaWhereInput | NoticiaWhereInput[]
    OR?: NoticiaWhereInput[]
    NOT?: NoticiaWhereInput | NoticiaWhereInput[]
    id?: IntFilter<"Noticia"> | number
    titulo?: StringFilter<"Noticia"> | string
    contenido?: StringFilter<"Noticia"> | string
    resumen?: StringFilter<"Noticia"> | string
    autorTexto?: StringFilter<"Noticia"> | string
    autorFoto?: StringFilter<"Noticia"> | string
    destacada?: BoolFilter<"Noticia"> | boolean
    fechaPublicacion?: DateTimeFilter<"Noticia"> | Date | string
    createdAt?: DateTimeFilter<"Noticia"> | Date | string
    updatedAt?: DateTimeFilter<"Noticia"> | Date | string
    seccionId?: IntNullableFilter<"Noticia"> | number | null
    seccion?: XOR<SeccionNullableScalarRelationFilter, SeccionWhereInput> | null
    noticiaMedia?: NoticiaMediaListRelationFilter
  }

  export type NoticiaOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    contenido?: SortOrder
    resumen?: SortOrder
    autorTexto?: SortOrder
    autorFoto?: SortOrder
    destacada?: SortOrder
    fechaPublicacion?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    seccionId?: SortOrderInput | SortOrder
    seccion?: SeccionOrderByWithRelationInput
    noticiaMedia?: NoticiaMediaOrderByRelationAggregateInput
  }

  export type NoticiaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NoticiaWhereInput | NoticiaWhereInput[]
    OR?: NoticiaWhereInput[]
    NOT?: NoticiaWhereInput | NoticiaWhereInput[]
    titulo?: StringFilter<"Noticia"> | string
    contenido?: StringFilter<"Noticia"> | string
    resumen?: StringFilter<"Noticia"> | string
    autorTexto?: StringFilter<"Noticia"> | string
    autorFoto?: StringFilter<"Noticia"> | string
    destacada?: BoolFilter<"Noticia"> | boolean
    fechaPublicacion?: DateTimeFilter<"Noticia"> | Date | string
    createdAt?: DateTimeFilter<"Noticia"> | Date | string
    updatedAt?: DateTimeFilter<"Noticia"> | Date | string
    seccionId?: IntNullableFilter<"Noticia"> | number | null
    seccion?: XOR<SeccionNullableScalarRelationFilter, SeccionWhereInput> | null
    noticiaMedia?: NoticiaMediaListRelationFilter
  }, "id">

  export type NoticiaOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    contenido?: SortOrder
    resumen?: SortOrder
    autorTexto?: SortOrder
    autorFoto?: SortOrder
    destacada?: SortOrder
    fechaPublicacion?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    seccionId?: SortOrderInput | SortOrder
    _count?: NoticiaCountOrderByAggregateInput
    _avg?: NoticiaAvgOrderByAggregateInput
    _max?: NoticiaMaxOrderByAggregateInput
    _min?: NoticiaMinOrderByAggregateInput
    _sum?: NoticiaSumOrderByAggregateInput
  }

  export type NoticiaScalarWhereWithAggregatesInput = {
    AND?: NoticiaScalarWhereWithAggregatesInput | NoticiaScalarWhereWithAggregatesInput[]
    OR?: NoticiaScalarWhereWithAggregatesInput[]
    NOT?: NoticiaScalarWhereWithAggregatesInput | NoticiaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Noticia"> | number
    titulo?: StringWithAggregatesFilter<"Noticia"> | string
    contenido?: StringWithAggregatesFilter<"Noticia"> | string
    resumen?: StringWithAggregatesFilter<"Noticia"> | string
    autorTexto?: StringWithAggregatesFilter<"Noticia"> | string
    autorFoto?: StringWithAggregatesFilter<"Noticia"> | string
    destacada?: BoolWithAggregatesFilter<"Noticia"> | boolean
    fechaPublicacion?: DateTimeWithAggregatesFilter<"Noticia"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Noticia"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Noticia"> | Date | string
    seccionId?: IntNullableWithAggregatesFilter<"Noticia"> | number | null
  }

  export type NoticiaMediaWhereInput = {
    AND?: NoticiaMediaWhereInput | NoticiaMediaWhereInput[]
    OR?: NoticiaMediaWhereInput[]
    NOT?: NoticiaMediaWhereInput | NoticiaMediaWhereInput[]
    noticiaId?: IntFilter<"NoticiaMedia"> | number
    mediaId?: IntFilter<"NoticiaMedia"> | number
    noticia?: XOR<NoticiaScalarRelationFilter, NoticiaWhereInput>
    media?: XOR<MediaScalarRelationFilter, MediaWhereInput>
  }

  export type NoticiaMediaOrderByWithRelationInput = {
    noticiaId?: SortOrder
    mediaId?: SortOrder
    noticia?: NoticiaOrderByWithRelationInput
    media?: MediaOrderByWithRelationInput
  }

  export type NoticiaMediaWhereUniqueInput = Prisma.AtLeast<{
    noticiaId_mediaId?: NoticiaMediaNoticiaIdMediaIdCompoundUniqueInput
    AND?: NoticiaMediaWhereInput | NoticiaMediaWhereInput[]
    OR?: NoticiaMediaWhereInput[]
    NOT?: NoticiaMediaWhereInput | NoticiaMediaWhereInput[]
    noticiaId?: IntFilter<"NoticiaMedia"> | number
    mediaId?: IntFilter<"NoticiaMedia"> | number
    noticia?: XOR<NoticiaScalarRelationFilter, NoticiaWhereInput>
    media?: XOR<MediaScalarRelationFilter, MediaWhereInput>
  }, "noticiaId_mediaId">

  export type NoticiaMediaOrderByWithAggregationInput = {
    noticiaId?: SortOrder
    mediaId?: SortOrder
    _count?: NoticiaMediaCountOrderByAggregateInput
    _avg?: NoticiaMediaAvgOrderByAggregateInput
    _max?: NoticiaMediaMaxOrderByAggregateInput
    _min?: NoticiaMediaMinOrderByAggregateInput
    _sum?: NoticiaMediaSumOrderByAggregateInput
  }

  export type NoticiaMediaScalarWhereWithAggregatesInput = {
    AND?: NoticiaMediaScalarWhereWithAggregatesInput | NoticiaMediaScalarWhereWithAggregatesInput[]
    OR?: NoticiaMediaScalarWhereWithAggregatesInput[]
    NOT?: NoticiaMediaScalarWhereWithAggregatesInput | NoticiaMediaScalarWhereWithAggregatesInput[]
    noticiaId?: IntWithAggregatesFilter<"NoticiaMedia"> | number
    mediaId?: IntWithAggregatesFilter<"NoticiaMedia"> | number
  }

  export type PDFWhereInput = {
    AND?: PDFWhereInput | PDFWhereInput[]
    OR?: PDFWhereInput[]
    NOT?: PDFWhereInput | PDFWhereInput[]
    id?: IntFilter<"PDF"> | number
    url?: StringFilter<"PDF"> | string
    fecha?: DateTimeFilter<"PDF"> | Date | string
    descripcion?: StringNullableFilter<"PDF"> | string | null
  }

  export type PDFOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    fecha?: SortOrder
    descripcion?: SortOrderInput | SortOrder
  }

  export type PDFWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PDFWhereInput | PDFWhereInput[]
    OR?: PDFWhereInput[]
    NOT?: PDFWhereInput | PDFWhereInput[]
    url?: StringFilter<"PDF"> | string
    fecha?: DateTimeFilter<"PDF"> | Date | string
    descripcion?: StringNullableFilter<"PDF"> | string | null
  }, "id">

  export type PDFOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    fecha?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    _count?: PDFCountOrderByAggregateInput
    _avg?: PDFAvgOrderByAggregateInput
    _max?: PDFMaxOrderByAggregateInput
    _min?: PDFMinOrderByAggregateInput
    _sum?: PDFSumOrderByAggregateInput
  }

  export type PDFScalarWhereWithAggregatesInput = {
    AND?: PDFScalarWhereWithAggregatesInput | PDFScalarWhereWithAggregatesInput[]
    OR?: PDFScalarWhereWithAggregatesInput[]
    NOT?: PDFScalarWhereWithAggregatesInput | PDFScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PDF"> | number
    url?: StringWithAggregatesFilter<"PDF"> | string
    fecha?: DateTimeWithAggregatesFilter<"PDF"> | Date | string
    descripcion?: StringNullableWithAggregatesFilter<"PDF"> | string | null
  }

  export type ViewWhereInput = {
    AND?: ViewWhereInput | ViewWhereInput[]
    OR?: ViewWhereInput[]
    NOT?: ViewWhereInput | ViewWhereInput[]
    id?: IntFilter<"View"> | number
    nombre?: StringFilter<"View"> | string
    descripcion?: StringNullableFilter<"View"> | string | null
    tipo?: StringFilter<"View"> | string
    configuracion?: JsonFilter<"View">
    activo?: BoolFilter<"View"> | boolean
    createdAt?: DateTimeFilter<"View"> | Date | string
    updatedAt?: DateTimeFilter<"View"> | Date | string
  }

  export type ViewOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    tipo?: SortOrder
    configuracion?: SortOrder
    activo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ViewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ViewWhereInput | ViewWhereInput[]
    OR?: ViewWhereInput[]
    NOT?: ViewWhereInput | ViewWhereInput[]
    nombre?: StringFilter<"View"> | string
    descripcion?: StringNullableFilter<"View"> | string | null
    tipo?: StringFilter<"View"> | string
    configuracion?: JsonFilter<"View">
    activo?: BoolFilter<"View"> | boolean
    createdAt?: DateTimeFilter<"View"> | Date | string
    updatedAt?: DateTimeFilter<"View"> | Date | string
  }, "id">

  export type ViewOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    tipo?: SortOrder
    configuracion?: SortOrder
    activo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ViewCountOrderByAggregateInput
    _avg?: ViewAvgOrderByAggregateInput
    _max?: ViewMaxOrderByAggregateInput
    _min?: ViewMinOrderByAggregateInput
    _sum?: ViewSumOrderByAggregateInput
  }

  export type ViewScalarWhereWithAggregatesInput = {
    AND?: ViewScalarWhereWithAggregatesInput | ViewScalarWhereWithAggregatesInput[]
    OR?: ViewScalarWhereWithAggregatesInput[]
    NOT?: ViewScalarWhereWithAggregatesInput | ViewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"View"> | number
    nombre?: StringWithAggregatesFilter<"View"> | string
    descripcion?: StringNullableWithAggregatesFilter<"View"> | string | null
    tipo?: StringWithAggregatesFilter<"View"> | string
    configuracion?: JsonWithAggregatesFilter<"View">
    activo?: BoolWithAggregatesFilter<"View"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"View"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"View"> | Date | string
  }

  export type ContenidoDestacadoWhereInput = {
    AND?: ContenidoDestacadoWhereInput | ContenidoDestacadoWhereInput[]
    OR?: ContenidoDestacadoWhereInput[]
    NOT?: ContenidoDestacadoWhereInput | ContenidoDestacadoWhereInput[]
    id?: IntFilter<"ContenidoDestacado"> | number
    media?: StringFilter<"ContenidoDestacado"> | string
    url?: StringNullableFilter<"ContenidoDestacado"> | string | null
    fechaInicio?: DateTimeNullableFilter<"ContenidoDestacado"> | Date | string | null
    fechaFin?: DateTimeNullableFilter<"ContenidoDestacado"> | Date | string | null
    titulo?: StringNullableFilter<"ContenidoDestacado"> | string | null
    ubicacion?: StringFilter<"ContenidoDestacado"> | string
    visible?: BoolFilter<"ContenidoDestacado"> | boolean
  }

  export type ContenidoDestacadoOrderByWithRelationInput = {
    id?: SortOrder
    media?: SortOrder
    url?: SortOrderInput | SortOrder
    fechaInicio?: SortOrderInput | SortOrder
    fechaFin?: SortOrderInput | SortOrder
    titulo?: SortOrderInput | SortOrder
    ubicacion?: SortOrder
    visible?: SortOrder
  }

  export type ContenidoDestacadoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContenidoDestacadoWhereInput | ContenidoDestacadoWhereInput[]
    OR?: ContenidoDestacadoWhereInput[]
    NOT?: ContenidoDestacadoWhereInput | ContenidoDestacadoWhereInput[]
    media?: StringFilter<"ContenidoDestacado"> | string
    url?: StringNullableFilter<"ContenidoDestacado"> | string | null
    fechaInicio?: DateTimeNullableFilter<"ContenidoDestacado"> | Date | string | null
    fechaFin?: DateTimeNullableFilter<"ContenidoDestacado"> | Date | string | null
    titulo?: StringNullableFilter<"ContenidoDestacado"> | string | null
    ubicacion?: StringFilter<"ContenidoDestacado"> | string
    visible?: BoolFilter<"ContenidoDestacado"> | boolean
  }, "id">

  export type ContenidoDestacadoOrderByWithAggregationInput = {
    id?: SortOrder
    media?: SortOrder
    url?: SortOrderInput | SortOrder
    fechaInicio?: SortOrderInput | SortOrder
    fechaFin?: SortOrderInput | SortOrder
    titulo?: SortOrderInput | SortOrder
    ubicacion?: SortOrder
    visible?: SortOrder
    _count?: ContenidoDestacadoCountOrderByAggregateInput
    _avg?: ContenidoDestacadoAvgOrderByAggregateInput
    _max?: ContenidoDestacadoMaxOrderByAggregateInput
    _min?: ContenidoDestacadoMinOrderByAggregateInput
    _sum?: ContenidoDestacadoSumOrderByAggregateInput
  }

  export type ContenidoDestacadoScalarWhereWithAggregatesInput = {
    AND?: ContenidoDestacadoScalarWhereWithAggregatesInput | ContenidoDestacadoScalarWhereWithAggregatesInput[]
    OR?: ContenidoDestacadoScalarWhereWithAggregatesInput[]
    NOT?: ContenidoDestacadoScalarWhereWithAggregatesInput | ContenidoDestacadoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ContenidoDestacado"> | number
    media?: StringWithAggregatesFilter<"ContenidoDestacado"> | string
    url?: StringNullableWithAggregatesFilter<"ContenidoDestacado"> | string | null
    fechaInicio?: DateTimeNullableWithAggregatesFilter<"ContenidoDestacado"> | Date | string | null
    fechaFin?: DateTimeNullableWithAggregatesFilter<"ContenidoDestacado"> | Date | string | null
    titulo?: StringNullableWithAggregatesFilter<"ContenidoDestacado"> | string | null
    ubicacion?: StringWithAggregatesFilter<"ContenidoDestacado"> | string
    visible?: BoolWithAggregatesFilter<"ContenidoDestacado"> | boolean
  }

  export type SeccionCreateInput = {
    nombre: string
    noticias?: NoticiaCreateNestedManyWithoutSeccionInput
  }

  export type SeccionUncheckedCreateInput = {
    id?: number
    nombre: string
    noticias?: NoticiaUncheckedCreateNestedManyWithoutSeccionInput
  }

  export type SeccionUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    noticias?: NoticiaUpdateManyWithoutSeccionNestedInput
  }

  export type SeccionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    noticias?: NoticiaUncheckedUpdateManyWithoutSeccionNestedInput
  }

  export type SeccionCreateManyInput = {
    id?: number
    nombre: string
  }

  export type SeccionUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type SeccionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type RolCreateInput = {
    nombre: string
    usuarioRoles?: UsuarioRolCreateNestedManyWithoutRolInput
  }

  export type RolUncheckedCreateInput = {
    id?: number
    nombre: string
    usuarioRoles?: UsuarioRolUncheckedCreateNestedManyWithoutRolInput
  }

  export type RolUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    usuarioRoles?: UsuarioRolUpdateManyWithoutRolNestedInput
  }

  export type RolUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    usuarioRoles?: UsuarioRolUncheckedUpdateManyWithoutRolNestedInput
  }

  export type RolCreateManyInput = {
    id?: number
    nombre: string
  }

  export type RolUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type RolUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioCreateInput = {
    username: string
    password: string
    createdAt?: Date | string
    usuarioRoles?: UsuarioRolCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    createdAt?: Date | string
    usuarioRoles?: UsuarioRolUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioRoles?: UsuarioRolUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioRoles?: UsuarioRolUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: number
    username: string
    password: string
    createdAt?: Date | string
  }

  export type UsuarioUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioRolCreateInput = {
    usuario: UsuarioCreateNestedOneWithoutUsuarioRolesInput
    rol: RolCreateNestedOneWithoutUsuarioRolesInput
  }

  export type UsuarioRolUncheckedCreateInput = {
    usuarioId: number
    rolId: number
  }

  export type UsuarioRolUpdateInput = {
    usuario?: UsuarioUpdateOneRequiredWithoutUsuarioRolesNestedInput
    rol?: RolUpdateOneRequiredWithoutUsuarioRolesNestedInput
  }

  export type UsuarioRolUncheckedUpdateInput = {
    usuarioId?: IntFieldUpdateOperationsInput | number
    rolId?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioRolCreateManyInput = {
    usuarioId: number
    rolId: number
  }

  export type UsuarioRolUpdateManyMutationInput = {

  }

  export type UsuarioRolUncheckedUpdateManyInput = {
    usuarioId?: IntFieldUpdateOperationsInput | number
    rolId?: IntFieldUpdateOperationsInput | number
  }

  export type ColumnistaCreateInput = {
    nombre: string
    bio: string
    fotoUrl?: string | null
    redes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    opiniones?: OpinionCreateNestedManyWithoutColumnistaInput
  }

  export type ColumnistaUncheckedCreateInput = {
    id?: number
    nombre: string
    bio: string
    fotoUrl?: string | null
    redes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    opiniones?: OpinionUncheckedCreateNestedManyWithoutColumnistaInput
  }

  export type ColumnistaUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    redes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    opiniones?: OpinionUpdateManyWithoutColumnistaNestedInput
  }

  export type ColumnistaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    redes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    opiniones?: OpinionUncheckedUpdateManyWithoutColumnistaNestedInput
  }

  export type ColumnistaCreateManyInput = {
    id?: number
    nombre: string
    bio: string
    fotoUrl?: string | null
    redes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ColumnistaUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    redes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColumnistaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    redes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EditorialCreateInput = {
    titulo: string
    contenido: string
    fecha?: Date | string
    autor?: string | null
    media?: MediaCreateNestedManyWithoutEditorialInput
  }

  export type EditorialUncheckedCreateInput = {
    id?: number
    titulo: string
    contenido: string
    fecha?: Date | string
    autor?: string | null
    media?: MediaUncheckedCreateNestedManyWithoutEditorialInput
  }

  export type EditorialUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    autor?: NullableStringFieldUpdateOperationsInput | string | null
    media?: MediaUpdateManyWithoutEditorialNestedInput
  }

  export type EditorialUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    autor?: NullableStringFieldUpdateOperationsInput | string | null
    media?: MediaUncheckedUpdateManyWithoutEditorialNestedInput
  }

  export type EditorialCreateManyInput = {
    id?: number
    titulo: string
    contenido: string
    fecha?: Date | string
    autor?: string | null
  }

  export type EditorialUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    autor?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EditorialUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    autor?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OpinionCreateInput = {
    titulo: string
    contenido: string
    fecha?: Date | string
    destacado?: boolean
    columnista: ColumnistaCreateNestedOneWithoutOpinionesInput
    media?: MediaCreateNestedManyWithoutOpinionInput
  }

  export type OpinionUncheckedCreateInput = {
    id?: number
    titulo: string
    contenido: string
    fecha?: Date | string
    columnistaId: number
    destacado?: boolean
    media?: MediaUncheckedCreateNestedManyWithoutOpinionInput
  }

  export type OpinionUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    destacado?: BoolFieldUpdateOperationsInput | boolean
    columnista?: ColumnistaUpdateOneRequiredWithoutOpinionesNestedInput
    media?: MediaUpdateManyWithoutOpinionNestedInput
  }

  export type OpinionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    columnistaId?: IntFieldUpdateOperationsInput | number
    destacado?: BoolFieldUpdateOperationsInput | boolean
    media?: MediaUncheckedUpdateManyWithoutOpinionNestedInput
  }

  export type OpinionCreateManyInput = {
    id?: number
    titulo: string
    contenido: string
    fecha?: Date | string
    columnistaId: number
    destacado?: boolean
  }

  export type OpinionUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    destacado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OpinionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    columnistaId?: IntFieldUpdateOperationsInput | number
    destacado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MediaCreateInput = {
    url: string
    tipo: $Enums.MediaTipo
    descripcion?: string | null
    noticiaMedia?: NoticiaMediaCreateNestedManyWithoutMediaInput
    editorial?: EditorialCreateNestedOneWithoutMediaInput
    opinion?: OpinionCreateNestedOneWithoutMediaInput
  }

  export type MediaUncheckedCreateInput = {
    id?: number
    url: string
    tipo: $Enums.MediaTipo
    descripcion?: string | null
    editorialId?: number | null
    opinionId?: number | null
    noticiaMedia?: NoticiaMediaUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    tipo?: EnumMediaTipoFieldUpdateOperationsInput | $Enums.MediaTipo
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    noticiaMedia?: NoticiaMediaUpdateManyWithoutMediaNestedInput
    editorial?: EditorialUpdateOneWithoutMediaNestedInput
    opinion?: OpinionUpdateOneWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    tipo?: EnumMediaTipoFieldUpdateOperationsInput | $Enums.MediaTipo
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    editorialId?: NullableIntFieldUpdateOperationsInput | number | null
    opinionId?: NullableIntFieldUpdateOperationsInput | number | null
    noticiaMedia?: NoticiaMediaUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type MediaCreateManyInput = {
    id?: number
    url: string
    tipo: $Enums.MediaTipo
    descripcion?: string | null
    editorialId?: number | null
    opinionId?: number | null
  }

  export type MediaUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
    tipo?: EnumMediaTipoFieldUpdateOperationsInput | $Enums.MediaTipo
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MediaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    tipo?: EnumMediaTipoFieldUpdateOperationsInput | $Enums.MediaTipo
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    editorialId?: NullableIntFieldUpdateOperationsInput | number | null
    opinionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NoticiaCreateInput = {
    titulo: string
    contenido: string
    resumen: string
    autorTexto: string
    autorFoto: string
    destacada?: boolean
    fechaPublicacion?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    seccion?: SeccionCreateNestedOneWithoutNoticiasInput
    noticiaMedia?: NoticiaMediaCreateNestedManyWithoutNoticiaInput
  }

  export type NoticiaUncheckedCreateInput = {
    id?: number
    titulo: string
    contenido: string
    resumen: string
    autorTexto: string
    autorFoto: string
    destacada?: boolean
    fechaPublicacion?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    seccionId?: number | null
    noticiaMedia?: NoticiaMediaUncheckedCreateNestedManyWithoutNoticiaInput
  }

  export type NoticiaUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    resumen?: StringFieldUpdateOperationsInput | string
    autorTexto?: StringFieldUpdateOperationsInput | string
    autorFoto?: StringFieldUpdateOperationsInput | string
    destacada?: BoolFieldUpdateOperationsInput | boolean
    fechaPublicacion?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seccion?: SeccionUpdateOneWithoutNoticiasNestedInput
    noticiaMedia?: NoticiaMediaUpdateManyWithoutNoticiaNestedInput
  }

  export type NoticiaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    resumen?: StringFieldUpdateOperationsInput | string
    autorTexto?: StringFieldUpdateOperationsInput | string
    autorFoto?: StringFieldUpdateOperationsInput | string
    destacada?: BoolFieldUpdateOperationsInput | boolean
    fechaPublicacion?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seccionId?: NullableIntFieldUpdateOperationsInput | number | null
    noticiaMedia?: NoticiaMediaUncheckedUpdateManyWithoutNoticiaNestedInput
  }

  export type NoticiaCreateManyInput = {
    id?: number
    titulo: string
    contenido: string
    resumen: string
    autorTexto: string
    autorFoto: string
    destacada?: boolean
    fechaPublicacion?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    seccionId?: number | null
  }

  export type NoticiaUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    resumen?: StringFieldUpdateOperationsInput | string
    autorTexto?: StringFieldUpdateOperationsInput | string
    autorFoto?: StringFieldUpdateOperationsInput | string
    destacada?: BoolFieldUpdateOperationsInput | boolean
    fechaPublicacion?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoticiaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    resumen?: StringFieldUpdateOperationsInput | string
    autorTexto?: StringFieldUpdateOperationsInput | string
    autorFoto?: StringFieldUpdateOperationsInput | string
    destacada?: BoolFieldUpdateOperationsInput | boolean
    fechaPublicacion?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seccionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NoticiaMediaCreateInput = {
    noticia: NoticiaCreateNestedOneWithoutNoticiaMediaInput
    media: MediaCreateNestedOneWithoutNoticiaMediaInput
  }

  export type NoticiaMediaUncheckedCreateInput = {
    noticiaId: number
    mediaId: number
  }

  export type NoticiaMediaUpdateInput = {
    noticia?: NoticiaUpdateOneRequiredWithoutNoticiaMediaNestedInput
    media?: MediaUpdateOneRequiredWithoutNoticiaMediaNestedInput
  }

  export type NoticiaMediaUncheckedUpdateInput = {
    noticiaId?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type NoticiaMediaCreateManyInput = {
    noticiaId: number
    mediaId: number
  }

  export type NoticiaMediaUpdateManyMutationInput = {

  }

  export type NoticiaMediaUncheckedUpdateManyInput = {
    noticiaId?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type PDFCreateInput = {
    url: string
    fecha: Date | string
    descripcion?: string | null
  }

  export type PDFUncheckedCreateInput = {
    id?: number
    url: string
    fecha: Date | string
    descripcion?: string | null
  }

  export type PDFUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PDFUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PDFCreateManyInput = {
    id?: number
    url: string
    fecha: Date | string
    descripcion?: string | null
  }

  export type PDFUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PDFUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ViewCreateInput = {
    nombre: string
    descripcion?: string | null
    tipo: string
    configuracion: JsonNullValueInput | InputJsonValue
    activo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ViewUncheckedCreateInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    tipo: string
    configuracion: JsonNullValueInput | InputJsonValue
    activo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ViewUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    configuracion?: JsonNullValueInput | InputJsonValue
    activo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ViewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    configuracion?: JsonNullValueInput | InputJsonValue
    activo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ViewCreateManyInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    tipo: string
    configuracion: JsonNullValueInput | InputJsonValue
    activo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ViewUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    configuracion?: JsonNullValueInput | InputJsonValue
    activo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ViewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    configuracion?: JsonNullValueInput | InputJsonValue
    activo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContenidoDestacadoCreateInput = {
    media: string
    url?: string | null
    fechaInicio?: Date | string | null
    fechaFin?: Date | string | null
    titulo?: string | null
    ubicacion: string
    visible?: boolean
  }

  export type ContenidoDestacadoUncheckedCreateInput = {
    id?: number
    media: string
    url?: string | null
    fechaInicio?: Date | string | null
    fechaFin?: Date | string | null
    titulo?: string | null
    ubicacion: string
    visible?: boolean
  }

  export type ContenidoDestacadoUpdateInput = {
    media?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    titulo?: NullableStringFieldUpdateOperationsInput | string | null
    ubicacion?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ContenidoDestacadoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    media?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    titulo?: NullableStringFieldUpdateOperationsInput | string | null
    ubicacion?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ContenidoDestacadoCreateManyInput = {
    id?: number
    media: string
    url?: string | null
    fechaInicio?: Date | string | null
    fechaFin?: Date | string | null
    titulo?: string | null
    ubicacion: string
    visible?: boolean
  }

  export type ContenidoDestacadoUpdateManyMutationInput = {
    media?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    titulo?: NullableStringFieldUpdateOperationsInput | string | null
    ubicacion?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ContenidoDestacadoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    media?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    titulo?: NullableStringFieldUpdateOperationsInput | string | null
    ubicacion?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NoticiaListRelationFilter = {
    every?: NoticiaWhereInput
    some?: NoticiaWhereInput
    none?: NoticiaWhereInput
  }

  export type NoticiaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SeccionCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type SeccionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SeccionMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type SeccionMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type SeccionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type UsuarioRolListRelationFilter = {
    every?: UsuarioRolWhereInput
    some?: UsuarioRolWhereInput
    none?: UsuarioRolWhereInput
  }

  export type UsuarioRolOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RolCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type RolAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RolMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type RolMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type RolSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UsuarioScalarRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type RolScalarRelationFilter = {
    is?: RolWhereInput
    isNot?: RolWhereInput
  }

  export type UsuarioRolUsuarioIdRolIdCompoundUniqueInput = {
    usuarioId: number
    rolId: number
  }

  export type UsuarioRolCountOrderByAggregateInput = {
    usuarioId?: SortOrder
    rolId?: SortOrder
  }

  export type UsuarioRolAvgOrderByAggregateInput = {
    usuarioId?: SortOrder
    rolId?: SortOrder
  }

  export type UsuarioRolMaxOrderByAggregateInput = {
    usuarioId?: SortOrder
    rolId?: SortOrder
  }

  export type UsuarioRolMinOrderByAggregateInput = {
    usuarioId?: SortOrder
    rolId?: SortOrder
  }

  export type UsuarioRolSumOrderByAggregateInput = {
    usuarioId?: SortOrder
    rolId?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type OpinionListRelationFilter = {
    every?: OpinionWhereInput
    some?: OpinionWhereInput
    none?: OpinionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type OpinionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ColumnistaCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    bio?: SortOrder
    fotoUrl?: SortOrder
    redes?: SortOrder
    createdAt?: SortOrder
  }

  export type ColumnistaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ColumnistaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    bio?: SortOrder
    fotoUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type ColumnistaMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    bio?: SortOrder
    fotoUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type ColumnistaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type MediaListRelationFilter = {
    every?: MediaWhereInput
    some?: MediaWhereInput
    none?: MediaWhereInput
  }

  export type MediaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EditorialCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    contenido?: SortOrder
    fecha?: SortOrder
    autor?: SortOrder
  }

  export type EditorialAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EditorialMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    contenido?: SortOrder
    fecha?: SortOrder
    autor?: SortOrder
  }

  export type EditorialMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    contenido?: SortOrder
    fecha?: SortOrder
    autor?: SortOrder
  }

  export type EditorialSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ColumnistaScalarRelationFilter = {
    is?: ColumnistaWhereInput
    isNot?: ColumnistaWhereInput
  }

  export type OpinionCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    contenido?: SortOrder
    fecha?: SortOrder
    columnistaId?: SortOrder
    destacado?: SortOrder
  }

  export type OpinionAvgOrderByAggregateInput = {
    id?: SortOrder
    columnistaId?: SortOrder
  }

  export type OpinionMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    contenido?: SortOrder
    fecha?: SortOrder
    columnistaId?: SortOrder
    destacado?: SortOrder
  }

  export type OpinionMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    contenido?: SortOrder
    fecha?: SortOrder
    columnistaId?: SortOrder
    destacado?: SortOrder
  }

  export type OpinionSumOrderByAggregateInput = {
    id?: SortOrder
    columnistaId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumMediaTipoFilter<$PrismaModel = never> = {
    equals?: $Enums.MediaTipo | EnumMediaTipoFieldRefInput<$PrismaModel>
    in?: $Enums.MediaTipo[] | ListEnumMediaTipoFieldRefInput<$PrismaModel>
    notIn?: $Enums.MediaTipo[] | ListEnumMediaTipoFieldRefInput<$PrismaModel>
    not?: NestedEnumMediaTipoFilter<$PrismaModel> | $Enums.MediaTipo
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NoticiaMediaListRelationFilter = {
    every?: NoticiaMediaWhereInput
    some?: NoticiaMediaWhereInput
    none?: NoticiaMediaWhereInput
  }

  export type EditorialNullableScalarRelationFilter = {
    is?: EditorialWhereInput | null
    isNot?: EditorialWhereInput | null
  }

  export type OpinionNullableScalarRelationFilter = {
    is?: OpinionWhereInput | null
    isNot?: OpinionWhereInput | null
  }

  export type NoticiaMediaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MediaCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    tipo?: SortOrder
    descripcion?: SortOrder
    editorialId?: SortOrder
    opinionId?: SortOrder
  }

  export type MediaAvgOrderByAggregateInput = {
    id?: SortOrder
    editorialId?: SortOrder
    opinionId?: SortOrder
  }

  export type MediaMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    tipo?: SortOrder
    descripcion?: SortOrder
    editorialId?: SortOrder
    opinionId?: SortOrder
  }

  export type MediaMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    tipo?: SortOrder
    descripcion?: SortOrder
    editorialId?: SortOrder
    opinionId?: SortOrder
  }

  export type MediaSumOrderByAggregateInput = {
    id?: SortOrder
    editorialId?: SortOrder
    opinionId?: SortOrder
  }

  export type EnumMediaTipoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MediaTipo | EnumMediaTipoFieldRefInput<$PrismaModel>
    in?: $Enums.MediaTipo[] | ListEnumMediaTipoFieldRefInput<$PrismaModel>
    notIn?: $Enums.MediaTipo[] | ListEnumMediaTipoFieldRefInput<$PrismaModel>
    not?: NestedEnumMediaTipoWithAggregatesFilter<$PrismaModel> | $Enums.MediaTipo
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMediaTipoFilter<$PrismaModel>
    _max?: NestedEnumMediaTipoFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SeccionNullableScalarRelationFilter = {
    is?: SeccionWhereInput | null
    isNot?: SeccionWhereInput | null
  }

  export type NoticiaCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    contenido?: SortOrder
    resumen?: SortOrder
    autorTexto?: SortOrder
    autorFoto?: SortOrder
    destacada?: SortOrder
    fechaPublicacion?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    seccionId?: SortOrder
  }

  export type NoticiaAvgOrderByAggregateInput = {
    id?: SortOrder
    seccionId?: SortOrder
  }

  export type NoticiaMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    contenido?: SortOrder
    resumen?: SortOrder
    autorTexto?: SortOrder
    autorFoto?: SortOrder
    destacada?: SortOrder
    fechaPublicacion?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    seccionId?: SortOrder
  }

  export type NoticiaMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    contenido?: SortOrder
    resumen?: SortOrder
    autorTexto?: SortOrder
    autorFoto?: SortOrder
    destacada?: SortOrder
    fechaPublicacion?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    seccionId?: SortOrder
  }

  export type NoticiaSumOrderByAggregateInput = {
    id?: SortOrder
    seccionId?: SortOrder
  }

  export type NoticiaScalarRelationFilter = {
    is?: NoticiaWhereInput
    isNot?: NoticiaWhereInput
  }

  export type MediaScalarRelationFilter = {
    is?: MediaWhereInput
    isNot?: MediaWhereInput
  }

  export type NoticiaMediaNoticiaIdMediaIdCompoundUniqueInput = {
    noticiaId: number
    mediaId: number
  }

  export type NoticiaMediaCountOrderByAggregateInput = {
    noticiaId?: SortOrder
    mediaId?: SortOrder
  }

  export type NoticiaMediaAvgOrderByAggregateInput = {
    noticiaId?: SortOrder
    mediaId?: SortOrder
  }

  export type NoticiaMediaMaxOrderByAggregateInput = {
    noticiaId?: SortOrder
    mediaId?: SortOrder
  }

  export type NoticiaMediaMinOrderByAggregateInput = {
    noticiaId?: SortOrder
    mediaId?: SortOrder
  }

  export type NoticiaMediaSumOrderByAggregateInput = {
    noticiaId?: SortOrder
    mediaId?: SortOrder
  }

  export type PDFCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    fecha?: SortOrder
    descripcion?: SortOrder
  }

  export type PDFAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PDFMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    fecha?: SortOrder
    descripcion?: SortOrder
  }

  export type PDFMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    fecha?: SortOrder
    descripcion?: SortOrder
  }

  export type PDFSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ViewCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    tipo?: SortOrder
    configuracion?: SortOrder
    activo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ViewAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ViewMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    tipo?: SortOrder
    activo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ViewMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    tipo?: SortOrder
    activo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ViewSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ContenidoDestacadoCountOrderByAggregateInput = {
    id?: SortOrder
    media?: SortOrder
    url?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    titulo?: SortOrder
    ubicacion?: SortOrder
    visible?: SortOrder
  }

  export type ContenidoDestacadoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ContenidoDestacadoMaxOrderByAggregateInput = {
    id?: SortOrder
    media?: SortOrder
    url?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    titulo?: SortOrder
    ubicacion?: SortOrder
    visible?: SortOrder
  }

  export type ContenidoDestacadoMinOrderByAggregateInput = {
    id?: SortOrder
    media?: SortOrder
    url?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    titulo?: SortOrder
    ubicacion?: SortOrder
    visible?: SortOrder
  }

  export type ContenidoDestacadoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NoticiaCreateNestedManyWithoutSeccionInput = {
    create?: XOR<NoticiaCreateWithoutSeccionInput, NoticiaUncheckedCreateWithoutSeccionInput> | NoticiaCreateWithoutSeccionInput[] | NoticiaUncheckedCreateWithoutSeccionInput[]
    connectOrCreate?: NoticiaCreateOrConnectWithoutSeccionInput | NoticiaCreateOrConnectWithoutSeccionInput[]
    createMany?: NoticiaCreateManySeccionInputEnvelope
    connect?: NoticiaWhereUniqueInput | NoticiaWhereUniqueInput[]
  }

  export type NoticiaUncheckedCreateNestedManyWithoutSeccionInput = {
    create?: XOR<NoticiaCreateWithoutSeccionInput, NoticiaUncheckedCreateWithoutSeccionInput> | NoticiaCreateWithoutSeccionInput[] | NoticiaUncheckedCreateWithoutSeccionInput[]
    connectOrCreate?: NoticiaCreateOrConnectWithoutSeccionInput | NoticiaCreateOrConnectWithoutSeccionInput[]
    createMany?: NoticiaCreateManySeccionInputEnvelope
    connect?: NoticiaWhereUniqueInput | NoticiaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NoticiaUpdateManyWithoutSeccionNestedInput = {
    create?: XOR<NoticiaCreateWithoutSeccionInput, NoticiaUncheckedCreateWithoutSeccionInput> | NoticiaCreateWithoutSeccionInput[] | NoticiaUncheckedCreateWithoutSeccionInput[]
    connectOrCreate?: NoticiaCreateOrConnectWithoutSeccionInput | NoticiaCreateOrConnectWithoutSeccionInput[]
    upsert?: NoticiaUpsertWithWhereUniqueWithoutSeccionInput | NoticiaUpsertWithWhereUniqueWithoutSeccionInput[]
    createMany?: NoticiaCreateManySeccionInputEnvelope
    set?: NoticiaWhereUniqueInput | NoticiaWhereUniqueInput[]
    disconnect?: NoticiaWhereUniqueInput | NoticiaWhereUniqueInput[]
    delete?: NoticiaWhereUniqueInput | NoticiaWhereUniqueInput[]
    connect?: NoticiaWhereUniqueInput | NoticiaWhereUniqueInput[]
    update?: NoticiaUpdateWithWhereUniqueWithoutSeccionInput | NoticiaUpdateWithWhereUniqueWithoutSeccionInput[]
    updateMany?: NoticiaUpdateManyWithWhereWithoutSeccionInput | NoticiaUpdateManyWithWhereWithoutSeccionInput[]
    deleteMany?: NoticiaScalarWhereInput | NoticiaScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NoticiaUncheckedUpdateManyWithoutSeccionNestedInput = {
    create?: XOR<NoticiaCreateWithoutSeccionInput, NoticiaUncheckedCreateWithoutSeccionInput> | NoticiaCreateWithoutSeccionInput[] | NoticiaUncheckedCreateWithoutSeccionInput[]
    connectOrCreate?: NoticiaCreateOrConnectWithoutSeccionInput | NoticiaCreateOrConnectWithoutSeccionInput[]
    upsert?: NoticiaUpsertWithWhereUniqueWithoutSeccionInput | NoticiaUpsertWithWhereUniqueWithoutSeccionInput[]
    createMany?: NoticiaCreateManySeccionInputEnvelope
    set?: NoticiaWhereUniqueInput | NoticiaWhereUniqueInput[]
    disconnect?: NoticiaWhereUniqueInput | NoticiaWhereUniqueInput[]
    delete?: NoticiaWhereUniqueInput | NoticiaWhereUniqueInput[]
    connect?: NoticiaWhereUniqueInput | NoticiaWhereUniqueInput[]
    update?: NoticiaUpdateWithWhereUniqueWithoutSeccionInput | NoticiaUpdateWithWhereUniqueWithoutSeccionInput[]
    updateMany?: NoticiaUpdateManyWithWhereWithoutSeccionInput | NoticiaUpdateManyWithWhereWithoutSeccionInput[]
    deleteMany?: NoticiaScalarWhereInput | NoticiaScalarWhereInput[]
  }

  export type UsuarioRolCreateNestedManyWithoutRolInput = {
    create?: XOR<UsuarioRolCreateWithoutRolInput, UsuarioRolUncheckedCreateWithoutRolInput> | UsuarioRolCreateWithoutRolInput[] | UsuarioRolUncheckedCreateWithoutRolInput[]
    connectOrCreate?: UsuarioRolCreateOrConnectWithoutRolInput | UsuarioRolCreateOrConnectWithoutRolInput[]
    createMany?: UsuarioRolCreateManyRolInputEnvelope
    connect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
  }

  export type UsuarioRolUncheckedCreateNestedManyWithoutRolInput = {
    create?: XOR<UsuarioRolCreateWithoutRolInput, UsuarioRolUncheckedCreateWithoutRolInput> | UsuarioRolCreateWithoutRolInput[] | UsuarioRolUncheckedCreateWithoutRolInput[]
    connectOrCreate?: UsuarioRolCreateOrConnectWithoutRolInput | UsuarioRolCreateOrConnectWithoutRolInput[]
    createMany?: UsuarioRolCreateManyRolInputEnvelope
    connect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
  }

  export type UsuarioRolUpdateManyWithoutRolNestedInput = {
    create?: XOR<UsuarioRolCreateWithoutRolInput, UsuarioRolUncheckedCreateWithoutRolInput> | UsuarioRolCreateWithoutRolInput[] | UsuarioRolUncheckedCreateWithoutRolInput[]
    connectOrCreate?: UsuarioRolCreateOrConnectWithoutRolInput | UsuarioRolCreateOrConnectWithoutRolInput[]
    upsert?: UsuarioRolUpsertWithWhereUniqueWithoutRolInput | UsuarioRolUpsertWithWhereUniqueWithoutRolInput[]
    createMany?: UsuarioRolCreateManyRolInputEnvelope
    set?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    disconnect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    delete?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    connect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    update?: UsuarioRolUpdateWithWhereUniqueWithoutRolInput | UsuarioRolUpdateWithWhereUniqueWithoutRolInput[]
    updateMany?: UsuarioRolUpdateManyWithWhereWithoutRolInput | UsuarioRolUpdateManyWithWhereWithoutRolInput[]
    deleteMany?: UsuarioRolScalarWhereInput | UsuarioRolScalarWhereInput[]
  }

  export type UsuarioRolUncheckedUpdateManyWithoutRolNestedInput = {
    create?: XOR<UsuarioRolCreateWithoutRolInput, UsuarioRolUncheckedCreateWithoutRolInput> | UsuarioRolCreateWithoutRolInput[] | UsuarioRolUncheckedCreateWithoutRolInput[]
    connectOrCreate?: UsuarioRolCreateOrConnectWithoutRolInput | UsuarioRolCreateOrConnectWithoutRolInput[]
    upsert?: UsuarioRolUpsertWithWhereUniqueWithoutRolInput | UsuarioRolUpsertWithWhereUniqueWithoutRolInput[]
    createMany?: UsuarioRolCreateManyRolInputEnvelope
    set?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    disconnect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    delete?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    connect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    update?: UsuarioRolUpdateWithWhereUniqueWithoutRolInput | UsuarioRolUpdateWithWhereUniqueWithoutRolInput[]
    updateMany?: UsuarioRolUpdateManyWithWhereWithoutRolInput | UsuarioRolUpdateManyWithWhereWithoutRolInput[]
    deleteMany?: UsuarioRolScalarWhereInput | UsuarioRolScalarWhereInput[]
  }

  export type UsuarioRolCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<UsuarioRolCreateWithoutUsuarioInput, UsuarioRolUncheckedCreateWithoutUsuarioInput> | UsuarioRolCreateWithoutUsuarioInput[] | UsuarioRolUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: UsuarioRolCreateOrConnectWithoutUsuarioInput | UsuarioRolCreateOrConnectWithoutUsuarioInput[]
    createMany?: UsuarioRolCreateManyUsuarioInputEnvelope
    connect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
  }

  export type UsuarioRolUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<UsuarioRolCreateWithoutUsuarioInput, UsuarioRolUncheckedCreateWithoutUsuarioInput> | UsuarioRolCreateWithoutUsuarioInput[] | UsuarioRolUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: UsuarioRolCreateOrConnectWithoutUsuarioInput | UsuarioRolCreateOrConnectWithoutUsuarioInput[]
    createMany?: UsuarioRolCreateManyUsuarioInputEnvelope
    connect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UsuarioRolUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<UsuarioRolCreateWithoutUsuarioInput, UsuarioRolUncheckedCreateWithoutUsuarioInput> | UsuarioRolCreateWithoutUsuarioInput[] | UsuarioRolUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: UsuarioRolCreateOrConnectWithoutUsuarioInput | UsuarioRolCreateOrConnectWithoutUsuarioInput[]
    upsert?: UsuarioRolUpsertWithWhereUniqueWithoutUsuarioInput | UsuarioRolUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: UsuarioRolCreateManyUsuarioInputEnvelope
    set?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    disconnect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    delete?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    connect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    update?: UsuarioRolUpdateWithWhereUniqueWithoutUsuarioInput | UsuarioRolUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: UsuarioRolUpdateManyWithWhereWithoutUsuarioInput | UsuarioRolUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: UsuarioRolScalarWhereInput | UsuarioRolScalarWhereInput[]
  }

  export type UsuarioRolUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<UsuarioRolCreateWithoutUsuarioInput, UsuarioRolUncheckedCreateWithoutUsuarioInput> | UsuarioRolCreateWithoutUsuarioInput[] | UsuarioRolUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: UsuarioRolCreateOrConnectWithoutUsuarioInput | UsuarioRolCreateOrConnectWithoutUsuarioInput[]
    upsert?: UsuarioRolUpsertWithWhereUniqueWithoutUsuarioInput | UsuarioRolUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: UsuarioRolCreateManyUsuarioInputEnvelope
    set?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    disconnect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    delete?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    connect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    update?: UsuarioRolUpdateWithWhereUniqueWithoutUsuarioInput | UsuarioRolUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: UsuarioRolUpdateManyWithWhereWithoutUsuarioInput | UsuarioRolUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: UsuarioRolScalarWhereInput | UsuarioRolScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutUsuarioRolesInput = {
    create?: XOR<UsuarioCreateWithoutUsuarioRolesInput, UsuarioUncheckedCreateWithoutUsuarioRolesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutUsuarioRolesInput
    connect?: UsuarioWhereUniqueInput
  }

  export type RolCreateNestedOneWithoutUsuarioRolesInput = {
    create?: XOR<RolCreateWithoutUsuarioRolesInput, RolUncheckedCreateWithoutUsuarioRolesInput>
    connectOrCreate?: RolCreateOrConnectWithoutUsuarioRolesInput
    connect?: RolWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutUsuarioRolesNestedInput = {
    create?: XOR<UsuarioCreateWithoutUsuarioRolesInput, UsuarioUncheckedCreateWithoutUsuarioRolesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutUsuarioRolesInput
    upsert?: UsuarioUpsertWithoutUsuarioRolesInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutUsuarioRolesInput, UsuarioUpdateWithoutUsuarioRolesInput>, UsuarioUncheckedUpdateWithoutUsuarioRolesInput>
  }

  export type RolUpdateOneRequiredWithoutUsuarioRolesNestedInput = {
    create?: XOR<RolCreateWithoutUsuarioRolesInput, RolUncheckedCreateWithoutUsuarioRolesInput>
    connectOrCreate?: RolCreateOrConnectWithoutUsuarioRolesInput
    upsert?: RolUpsertWithoutUsuarioRolesInput
    connect?: RolWhereUniqueInput
    update?: XOR<XOR<RolUpdateToOneWithWhereWithoutUsuarioRolesInput, RolUpdateWithoutUsuarioRolesInput>, RolUncheckedUpdateWithoutUsuarioRolesInput>
  }

  export type OpinionCreateNestedManyWithoutColumnistaInput = {
    create?: XOR<OpinionCreateWithoutColumnistaInput, OpinionUncheckedCreateWithoutColumnistaInput> | OpinionCreateWithoutColumnistaInput[] | OpinionUncheckedCreateWithoutColumnistaInput[]
    connectOrCreate?: OpinionCreateOrConnectWithoutColumnistaInput | OpinionCreateOrConnectWithoutColumnistaInput[]
    createMany?: OpinionCreateManyColumnistaInputEnvelope
    connect?: OpinionWhereUniqueInput | OpinionWhereUniqueInput[]
  }

  export type OpinionUncheckedCreateNestedManyWithoutColumnistaInput = {
    create?: XOR<OpinionCreateWithoutColumnistaInput, OpinionUncheckedCreateWithoutColumnistaInput> | OpinionCreateWithoutColumnistaInput[] | OpinionUncheckedCreateWithoutColumnistaInput[]
    connectOrCreate?: OpinionCreateOrConnectWithoutColumnistaInput | OpinionCreateOrConnectWithoutColumnistaInput[]
    createMany?: OpinionCreateManyColumnistaInputEnvelope
    connect?: OpinionWhereUniqueInput | OpinionWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type OpinionUpdateManyWithoutColumnistaNestedInput = {
    create?: XOR<OpinionCreateWithoutColumnistaInput, OpinionUncheckedCreateWithoutColumnistaInput> | OpinionCreateWithoutColumnistaInput[] | OpinionUncheckedCreateWithoutColumnistaInput[]
    connectOrCreate?: OpinionCreateOrConnectWithoutColumnistaInput | OpinionCreateOrConnectWithoutColumnistaInput[]
    upsert?: OpinionUpsertWithWhereUniqueWithoutColumnistaInput | OpinionUpsertWithWhereUniqueWithoutColumnistaInput[]
    createMany?: OpinionCreateManyColumnistaInputEnvelope
    set?: OpinionWhereUniqueInput | OpinionWhereUniqueInput[]
    disconnect?: OpinionWhereUniqueInput | OpinionWhereUniqueInput[]
    delete?: OpinionWhereUniqueInput | OpinionWhereUniqueInput[]
    connect?: OpinionWhereUniqueInput | OpinionWhereUniqueInput[]
    update?: OpinionUpdateWithWhereUniqueWithoutColumnistaInput | OpinionUpdateWithWhereUniqueWithoutColumnistaInput[]
    updateMany?: OpinionUpdateManyWithWhereWithoutColumnistaInput | OpinionUpdateManyWithWhereWithoutColumnistaInput[]
    deleteMany?: OpinionScalarWhereInput | OpinionScalarWhereInput[]
  }

  export type OpinionUncheckedUpdateManyWithoutColumnistaNestedInput = {
    create?: XOR<OpinionCreateWithoutColumnistaInput, OpinionUncheckedCreateWithoutColumnistaInput> | OpinionCreateWithoutColumnistaInput[] | OpinionUncheckedCreateWithoutColumnistaInput[]
    connectOrCreate?: OpinionCreateOrConnectWithoutColumnistaInput | OpinionCreateOrConnectWithoutColumnistaInput[]
    upsert?: OpinionUpsertWithWhereUniqueWithoutColumnistaInput | OpinionUpsertWithWhereUniqueWithoutColumnistaInput[]
    createMany?: OpinionCreateManyColumnistaInputEnvelope
    set?: OpinionWhereUniqueInput | OpinionWhereUniqueInput[]
    disconnect?: OpinionWhereUniqueInput | OpinionWhereUniqueInput[]
    delete?: OpinionWhereUniqueInput | OpinionWhereUniqueInput[]
    connect?: OpinionWhereUniqueInput | OpinionWhereUniqueInput[]
    update?: OpinionUpdateWithWhereUniqueWithoutColumnistaInput | OpinionUpdateWithWhereUniqueWithoutColumnistaInput[]
    updateMany?: OpinionUpdateManyWithWhereWithoutColumnistaInput | OpinionUpdateManyWithWhereWithoutColumnistaInput[]
    deleteMany?: OpinionScalarWhereInput | OpinionScalarWhereInput[]
  }

  export type MediaCreateNestedManyWithoutEditorialInput = {
    create?: XOR<MediaCreateWithoutEditorialInput, MediaUncheckedCreateWithoutEditorialInput> | MediaCreateWithoutEditorialInput[] | MediaUncheckedCreateWithoutEditorialInput[]
    connectOrCreate?: MediaCreateOrConnectWithoutEditorialInput | MediaCreateOrConnectWithoutEditorialInput[]
    createMany?: MediaCreateManyEditorialInputEnvelope
    connect?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
  }

  export type MediaUncheckedCreateNestedManyWithoutEditorialInput = {
    create?: XOR<MediaCreateWithoutEditorialInput, MediaUncheckedCreateWithoutEditorialInput> | MediaCreateWithoutEditorialInput[] | MediaUncheckedCreateWithoutEditorialInput[]
    connectOrCreate?: MediaCreateOrConnectWithoutEditorialInput | MediaCreateOrConnectWithoutEditorialInput[]
    createMany?: MediaCreateManyEditorialInputEnvelope
    connect?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
  }

  export type MediaUpdateManyWithoutEditorialNestedInput = {
    create?: XOR<MediaCreateWithoutEditorialInput, MediaUncheckedCreateWithoutEditorialInput> | MediaCreateWithoutEditorialInput[] | MediaUncheckedCreateWithoutEditorialInput[]
    connectOrCreate?: MediaCreateOrConnectWithoutEditorialInput | MediaCreateOrConnectWithoutEditorialInput[]
    upsert?: MediaUpsertWithWhereUniqueWithoutEditorialInput | MediaUpsertWithWhereUniqueWithoutEditorialInput[]
    createMany?: MediaCreateManyEditorialInputEnvelope
    set?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    disconnect?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    delete?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    connect?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    update?: MediaUpdateWithWhereUniqueWithoutEditorialInput | MediaUpdateWithWhereUniqueWithoutEditorialInput[]
    updateMany?: MediaUpdateManyWithWhereWithoutEditorialInput | MediaUpdateManyWithWhereWithoutEditorialInput[]
    deleteMany?: MediaScalarWhereInput | MediaScalarWhereInput[]
  }

  export type MediaUncheckedUpdateManyWithoutEditorialNestedInput = {
    create?: XOR<MediaCreateWithoutEditorialInput, MediaUncheckedCreateWithoutEditorialInput> | MediaCreateWithoutEditorialInput[] | MediaUncheckedCreateWithoutEditorialInput[]
    connectOrCreate?: MediaCreateOrConnectWithoutEditorialInput | MediaCreateOrConnectWithoutEditorialInput[]
    upsert?: MediaUpsertWithWhereUniqueWithoutEditorialInput | MediaUpsertWithWhereUniqueWithoutEditorialInput[]
    createMany?: MediaCreateManyEditorialInputEnvelope
    set?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    disconnect?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    delete?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    connect?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    update?: MediaUpdateWithWhereUniqueWithoutEditorialInput | MediaUpdateWithWhereUniqueWithoutEditorialInput[]
    updateMany?: MediaUpdateManyWithWhereWithoutEditorialInput | MediaUpdateManyWithWhereWithoutEditorialInput[]
    deleteMany?: MediaScalarWhereInput | MediaScalarWhereInput[]
  }

  export type ColumnistaCreateNestedOneWithoutOpinionesInput = {
    create?: XOR<ColumnistaCreateWithoutOpinionesInput, ColumnistaUncheckedCreateWithoutOpinionesInput>
    connectOrCreate?: ColumnistaCreateOrConnectWithoutOpinionesInput
    connect?: ColumnistaWhereUniqueInput
  }

  export type MediaCreateNestedManyWithoutOpinionInput = {
    create?: XOR<MediaCreateWithoutOpinionInput, MediaUncheckedCreateWithoutOpinionInput> | MediaCreateWithoutOpinionInput[] | MediaUncheckedCreateWithoutOpinionInput[]
    connectOrCreate?: MediaCreateOrConnectWithoutOpinionInput | MediaCreateOrConnectWithoutOpinionInput[]
    createMany?: MediaCreateManyOpinionInputEnvelope
    connect?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
  }

  export type MediaUncheckedCreateNestedManyWithoutOpinionInput = {
    create?: XOR<MediaCreateWithoutOpinionInput, MediaUncheckedCreateWithoutOpinionInput> | MediaCreateWithoutOpinionInput[] | MediaUncheckedCreateWithoutOpinionInput[]
    connectOrCreate?: MediaCreateOrConnectWithoutOpinionInput | MediaCreateOrConnectWithoutOpinionInput[]
    createMany?: MediaCreateManyOpinionInputEnvelope
    connect?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ColumnistaUpdateOneRequiredWithoutOpinionesNestedInput = {
    create?: XOR<ColumnistaCreateWithoutOpinionesInput, ColumnistaUncheckedCreateWithoutOpinionesInput>
    connectOrCreate?: ColumnistaCreateOrConnectWithoutOpinionesInput
    upsert?: ColumnistaUpsertWithoutOpinionesInput
    connect?: ColumnistaWhereUniqueInput
    update?: XOR<XOR<ColumnistaUpdateToOneWithWhereWithoutOpinionesInput, ColumnistaUpdateWithoutOpinionesInput>, ColumnistaUncheckedUpdateWithoutOpinionesInput>
  }

  export type MediaUpdateManyWithoutOpinionNestedInput = {
    create?: XOR<MediaCreateWithoutOpinionInput, MediaUncheckedCreateWithoutOpinionInput> | MediaCreateWithoutOpinionInput[] | MediaUncheckedCreateWithoutOpinionInput[]
    connectOrCreate?: MediaCreateOrConnectWithoutOpinionInput | MediaCreateOrConnectWithoutOpinionInput[]
    upsert?: MediaUpsertWithWhereUniqueWithoutOpinionInput | MediaUpsertWithWhereUniqueWithoutOpinionInput[]
    createMany?: MediaCreateManyOpinionInputEnvelope
    set?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    disconnect?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    delete?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    connect?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    update?: MediaUpdateWithWhereUniqueWithoutOpinionInput | MediaUpdateWithWhereUniqueWithoutOpinionInput[]
    updateMany?: MediaUpdateManyWithWhereWithoutOpinionInput | MediaUpdateManyWithWhereWithoutOpinionInput[]
    deleteMany?: MediaScalarWhereInput | MediaScalarWhereInput[]
  }

  export type MediaUncheckedUpdateManyWithoutOpinionNestedInput = {
    create?: XOR<MediaCreateWithoutOpinionInput, MediaUncheckedCreateWithoutOpinionInput> | MediaCreateWithoutOpinionInput[] | MediaUncheckedCreateWithoutOpinionInput[]
    connectOrCreate?: MediaCreateOrConnectWithoutOpinionInput | MediaCreateOrConnectWithoutOpinionInput[]
    upsert?: MediaUpsertWithWhereUniqueWithoutOpinionInput | MediaUpsertWithWhereUniqueWithoutOpinionInput[]
    createMany?: MediaCreateManyOpinionInputEnvelope
    set?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    disconnect?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    delete?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    connect?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    update?: MediaUpdateWithWhereUniqueWithoutOpinionInput | MediaUpdateWithWhereUniqueWithoutOpinionInput[]
    updateMany?: MediaUpdateManyWithWhereWithoutOpinionInput | MediaUpdateManyWithWhereWithoutOpinionInput[]
    deleteMany?: MediaScalarWhereInput | MediaScalarWhereInput[]
  }

  export type NoticiaMediaCreateNestedManyWithoutMediaInput = {
    create?: XOR<NoticiaMediaCreateWithoutMediaInput, NoticiaMediaUncheckedCreateWithoutMediaInput> | NoticiaMediaCreateWithoutMediaInput[] | NoticiaMediaUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: NoticiaMediaCreateOrConnectWithoutMediaInput | NoticiaMediaCreateOrConnectWithoutMediaInput[]
    createMany?: NoticiaMediaCreateManyMediaInputEnvelope
    connect?: NoticiaMediaWhereUniqueInput | NoticiaMediaWhereUniqueInput[]
  }

  export type EditorialCreateNestedOneWithoutMediaInput = {
    create?: XOR<EditorialCreateWithoutMediaInput, EditorialUncheckedCreateWithoutMediaInput>
    connectOrCreate?: EditorialCreateOrConnectWithoutMediaInput
    connect?: EditorialWhereUniqueInput
  }

  export type OpinionCreateNestedOneWithoutMediaInput = {
    create?: XOR<OpinionCreateWithoutMediaInput, OpinionUncheckedCreateWithoutMediaInput>
    connectOrCreate?: OpinionCreateOrConnectWithoutMediaInput
    connect?: OpinionWhereUniqueInput
  }

  export type NoticiaMediaUncheckedCreateNestedManyWithoutMediaInput = {
    create?: XOR<NoticiaMediaCreateWithoutMediaInput, NoticiaMediaUncheckedCreateWithoutMediaInput> | NoticiaMediaCreateWithoutMediaInput[] | NoticiaMediaUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: NoticiaMediaCreateOrConnectWithoutMediaInput | NoticiaMediaCreateOrConnectWithoutMediaInput[]
    createMany?: NoticiaMediaCreateManyMediaInputEnvelope
    connect?: NoticiaMediaWhereUniqueInput | NoticiaMediaWhereUniqueInput[]
  }

  export type EnumMediaTipoFieldUpdateOperationsInput = {
    set?: $Enums.MediaTipo
  }

  export type NoticiaMediaUpdateManyWithoutMediaNestedInput = {
    create?: XOR<NoticiaMediaCreateWithoutMediaInput, NoticiaMediaUncheckedCreateWithoutMediaInput> | NoticiaMediaCreateWithoutMediaInput[] | NoticiaMediaUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: NoticiaMediaCreateOrConnectWithoutMediaInput | NoticiaMediaCreateOrConnectWithoutMediaInput[]
    upsert?: NoticiaMediaUpsertWithWhereUniqueWithoutMediaInput | NoticiaMediaUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: NoticiaMediaCreateManyMediaInputEnvelope
    set?: NoticiaMediaWhereUniqueInput | NoticiaMediaWhereUniqueInput[]
    disconnect?: NoticiaMediaWhereUniqueInput | NoticiaMediaWhereUniqueInput[]
    delete?: NoticiaMediaWhereUniqueInput | NoticiaMediaWhereUniqueInput[]
    connect?: NoticiaMediaWhereUniqueInput | NoticiaMediaWhereUniqueInput[]
    update?: NoticiaMediaUpdateWithWhereUniqueWithoutMediaInput | NoticiaMediaUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: NoticiaMediaUpdateManyWithWhereWithoutMediaInput | NoticiaMediaUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: NoticiaMediaScalarWhereInput | NoticiaMediaScalarWhereInput[]
  }

  export type EditorialUpdateOneWithoutMediaNestedInput = {
    create?: XOR<EditorialCreateWithoutMediaInput, EditorialUncheckedCreateWithoutMediaInput>
    connectOrCreate?: EditorialCreateOrConnectWithoutMediaInput
    upsert?: EditorialUpsertWithoutMediaInput
    disconnect?: EditorialWhereInput | boolean
    delete?: EditorialWhereInput | boolean
    connect?: EditorialWhereUniqueInput
    update?: XOR<XOR<EditorialUpdateToOneWithWhereWithoutMediaInput, EditorialUpdateWithoutMediaInput>, EditorialUncheckedUpdateWithoutMediaInput>
  }

  export type OpinionUpdateOneWithoutMediaNestedInput = {
    create?: XOR<OpinionCreateWithoutMediaInput, OpinionUncheckedCreateWithoutMediaInput>
    connectOrCreate?: OpinionCreateOrConnectWithoutMediaInput
    upsert?: OpinionUpsertWithoutMediaInput
    disconnect?: OpinionWhereInput | boolean
    delete?: OpinionWhereInput | boolean
    connect?: OpinionWhereUniqueInput
    update?: XOR<XOR<OpinionUpdateToOneWithWhereWithoutMediaInput, OpinionUpdateWithoutMediaInput>, OpinionUncheckedUpdateWithoutMediaInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NoticiaMediaUncheckedUpdateManyWithoutMediaNestedInput = {
    create?: XOR<NoticiaMediaCreateWithoutMediaInput, NoticiaMediaUncheckedCreateWithoutMediaInput> | NoticiaMediaCreateWithoutMediaInput[] | NoticiaMediaUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: NoticiaMediaCreateOrConnectWithoutMediaInput | NoticiaMediaCreateOrConnectWithoutMediaInput[]
    upsert?: NoticiaMediaUpsertWithWhereUniqueWithoutMediaInput | NoticiaMediaUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: NoticiaMediaCreateManyMediaInputEnvelope
    set?: NoticiaMediaWhereUniqueInput | NoticiaMediaWhereUniqueInput[]
    disconnect?: NoticiaMediaWhereUniqueInput | NoticiaMediaWhereUniqueInput[]
    delete?: NoticiaMediaWhereUniqueInput | NoticiaMediaWhereUniqueInput[]
    connect?: NoticiaMediaWhereUniqueInput | NoticiaMediaWhereUniqueInput[]
    update?: NoticiaMediaUpdateWithWhereUniqueWithoutMediaInput | NoticiaMediaUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: NoticiaMediaUpdateManyWithWhereWithoutMediaInput | NoticiaMediaUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: NoticiaMediaScalarWhereInput | NoticiaMediaScalarWhereInput[]
  }

  export type SeccionCreateNestedOneWithoutNoticiasInput = {
    create?: XOR<SeccionCreateWithoutNoticiasInput, SeccionUncheckedCreateWithoutNoticiasInput>
    connectOrCreate?: SeccionCreateOrConnectWithoutNoticiasInput
    connect?: SeccionWhereUniqueInput
  }

  export type NoticiaMediaCreateNestedManyWithoutNoticiaInput = {
    create?: XOR<NoticiaMediaCreateWithoutNoticiaInput, NoticiaMediaUncheckedCreateWithoutNoticiaInput> | NoticiaMediaCreateWithoutNoticiaInput[] | NoticiaMediaUncheckedCreateWithoutNoticiaInput[]
    connectOrCreate?: NoticiaMediaCreateOrConnectWithoutNoticiaInput | NoticiaMediaCreateOrConnectWithoutNoticiaInput[]
    createMany?: NoticiaMediaCreateManyNoticiaInputEnvelope
    connect?: NoticiaMediaWhereUniqueInput | NoticiaMediaWhereUniqueInput[]
  }

  export type NoticiaMediaUncheckedCreateNestedManyWithoutNoticiaInput = {
    create?: XOR<NoticiaMediaCreateWithoutNoticiaInput, NoticiaMediaUncheckedCreateWithoutNoticiaInput> | NoticiaMediaCreateWithoutNoticiaInput[] | NoticiaMediaUncheckedCreateWithoutNoticiaInput[]
    connectOrCreate?: NoticiaMediaCreateOrConnectWithoutNoticiaInput | NoticiaMediaCreateOrConnectWithoutNoticiaInput[]
    createMany?: NoticiaMediaCreateManyNoticiaInputEnvelope
    connect?: NoticiaMediaWhereUniqueInput | NoticiaMediaWhereUniqueInput[]
  }

  export type SeccionUpdateOneWithoutNoticiasNestedInput = {
    create?: XOR<SeccionCreateWithoutNoticiasInput, SeccionUncheckedCreateWithoutNoticiasInput>
    connectOrCreate?: SeccionCreateOrConnectWithoutNoticiasInput
    upsert?: SeccionUpsertWithoutNoticiasInput
    disconnect?: SeccionWhereInput | boolean
    delete?: SeccionWhereInput | boolean
    connect?: SeccionWhereUniqueInput
    update?: XOR<XOR<SeccionUpdateToOneWithWhereWithoutNoticiasInput, SeccionUpdateWithoutNoticiasInput>, SeccionUncheckedUpdateWithoutNoticiasInput>
  }

  export type NoticiaMediaUpdateManyWithoutNoticiaNestedInput = {
    create?: XOR<NoticiaMediaCreateWithoutNoticiaInput, NoticiaMediaUncheckedCreateWithoutNoticiaInput> | NoticiaMediaCreateWithoutNoticiaInput[] | NoticiaMediaUncheckedCreateWithoutNoticiaInput[]
    connectOrCreate?: NoticiaMediaCreateOrConnectWithoutNoticiaInput | NoticiaMediaCreateOrConnectWithoutNoticiaInput[]
    upsert?: NoticiaMediaUpsertWithWhereUniqueWithoutNoticiaInput | NoticiaMediaUpsertWithWhereUniqueWithoutNoticiaInput[]
    createMany?: NoticiaMediaCreateManyNoticiaInputEnvelope
    set?: NoticiaMediaWhereUniqueInput | NoticiaMediaWhereUniqueInput[]
    disconnect?: NoticiaMediaWhereUniqueInput | NoticiaMediaWhereUniqueInput[]
    delete?: NoticiaMediaWhereUniqueInput | NoticiaMediaWhereUniqueInput[]
    connect?: NoticiaMediaWhereUniqueInput | NoticiaMediaWhereUniqueInput[]
    update?: NoticiaMediaUpdateWithWhereUniqueWithoutNoticiaInput | NoticiaMediaUpdateWithWhereUniqueWithoutNoticiaInput[]
    updateMany?: NoticiaMediaUpdateManyWithWhereWithoutNoticiaInput | NoticiaMediaUpdateManyWithWhereWithoutNoticiaInput[]
    deleteMany?: NoticiaMediaScalarWhereInput | NoticiaMediaScalarWhereInput[]
  }

  export type NoticiaMediaUncheckedUpdateManyWithoutNoticiaNestedInput = {
    create?: XOR<NoticiaMediaCreateWithoutNoticiaInput, NoticiaMediaUncheckedCreateWithoutNoticiaInput> | NoticiaMediaCreateWithoutNoticiaInput[] | NoticiaMediaUncheckedCreateWithoutNoticiaInput[]
    connectOrCreate?: NoticiaMediaCreateOrConnectWithoutNoticiaInput | NoticiaMediaCreateOrConnectWithoutNoticiaInput[]
    upsert?: NoticiaMediaUpsertWithWhereUniqueWithoutNoticiaInput | NoticiaMediaUpsertWithWhereUniqueWithoutNoticiaInput[]
    createMany?: NoticiaMediaCreateManyNoticiaInputEnvelope
    set?: NoticiaMediaWhereUniqueInput | NoticiaMediaWhereUniqueInput[]
    disconnect?: NoticiaMediaWhereUniqueInput | NoticiaMediaWhereUniqueInput[]
    delete?: NoticiaMediaWhereUniqueInput | NoticiaMediaWhereUniqueInput[]
    connect?: NoticiaMediaWhereUniqueInput | NoticiaMediaWhereUniqueInput[]
    update?: NoticiaMediaUpdateWithWhereUniqueWithoutNoticiaInput | NoticiaMediaUpdateWithWhereUniqueWithoutNoticiaInput[]
    updateMany?: NoticiaMediaUpdateManyWithWhereWithoutNoticiaInput | NoticiaMediaUpdateManyWithWhereWithoutNoticiaInput[]
    deleteMany?: NoticiaMediaScalarWhereInput | NoticiaMediaScalarWhereInput[]
  }

  export type NoticiaCreateNestedOneWithoutNoticiaMediaInput = {
    create?: XOR<NoticiaCreateWithoutNoticiaMediaInput, NoticiaUncheckedCreateWithoutNoticiaMediaInput>
    connectOrCreate?: NoticiaCreateOrConnectWithoutNoticiaMediaInput
    connect?: NoticiaWhereUniqueInput
  }

  export type MediaCreateNestedOneWithoutNoticiaMediaInput = {
    create?: XOR<MediaCreateWithoutNoticiaMediaInput, MediaUncheckedCreateWithoutNoticiaMediaInput>
    connectOrCreate?: MediaCreateOrConnectWithoutNoticiaMediaInput
    connect?: MediaWhereUniqueInput
  }

  export type NoticiaUpdateOneRequiredWithoutNoticiaMediaNestedInput = {
    create?: XOR<NoticiaCreateWithoutNoticiaMediaInput, NoticiaUncheckedCreateWithoutNoticiaMediaInput>
    connectOrCreate?: NoticiaCreateOrConnectWithoutNoticiaMediaInput
    upsert?: NoticiaUpsertWithoutNoticiaMediaInput
    connect?: NoticiaWhereUniqueInput
    update?: XOR<XOR<NoticiaUpdateToOneWithWhereWithoutNoticiaMediaInput, NoticiaUpdateWithoutNoticiaMediaInput>, NoticiaUncheckedUpdateWithoutNoticiaMediaInput>
  }

  export type MediaUpdateOneRequiredWithoutNoticiaMediaNestedInput = {
    create?: XOR<MediaCreateWithoutNoticiaMediaInput, MediaUncheckedCreateWithoutNoticiaMediaInput>
    connectOrCreate?: MediaCreateOrConnectWithoutNoticiaMediaInput
    upsert?: MediaUpsertWithoutNoticiaMediaInput
    connect?: MediaWhereUniqueInput
    update?: XOR<XOR<MediaUpdateToOneWithWhereWithoutNoticiaMediaInput, MediaUpdateWithoutNoticiaMediaInput>, MediaUncheckedUpdateWithoutNoticiaMediaInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumMediaTipoFilter<$PrismaModel = never> = {
    equals?: $Enums.MediaTipo | EnumMediaTipoFieldRefInput<$PrismaModel>
    in?: $Enums.MediaTipo[] | ListEnumMediaTipoFieldRefInput<$PrismaModel>
    notIn?: $Enums.MediaTipo[] | ListEnumMediaTipoFieldRefInput<$PrismaModel>
    not?: NestedEnumMediaTipoFilter<$PrismaModel> | $Enums.MediaTipo
  }

  export type NestedEnumMediaTipoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MediaTipo | EnumMediaTipoFieldRefInput<$PrismaModel>
    in?: $Enums.MediaTipo[] | ListEnumMediaTipoFieldRefInput<$PrismaModel>
    notIn?: $Enums.MediaTipo[] | ListEnumMediaTipoFieldRefInput<$PrismaModel>
    not?: NestedEnumMediaTipoWithAggregatesFilter<$PrismaModel> | $Enums.MediaTipo
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMediaTipoFilter<$PrismaModel>
    _max?: NestedEnumMediaTipoFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NoticiaCreateWithoutSeccionInput = {
    titulo: string
    contenido: string
    resumen: string
    autorTexto: string
    autorFoto: string
    destacada?: boolean
    fechaPublicacion?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    noticiaMedia?: NoticiaMediaCreateNestedManyWithoutNoticiaInput
  }

  export type NoticiaUncheckedCreateWithoutSeccionInput = {
    id?: number
    titulo: string
    contenido: string
    resumen: string
    autorTexto: string
    autorFoto: string
    destacada?: boolean
    fechaPublicacion?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    noticiaMedia?: NoticiaMediaUncheckedCreateNestedManyWithoutNoticiaInput
  }

  export type NoticiaCreateOrConnectWithoutSeccionInput = {
    where: NoticiaWhereUniqueInput
    create: XOR<NoticiaCreateWithoutSeccionInput, NoticiaUncheckedCreateWithoutSeccionInput>
  }

  export type NoticiaCreateManySeccionInputEnvelope = {
    data: NoticiaCreateManySeccionInput | NoticiaCreateManySeccionInput[]
    skipDuplicates?: boolean
  }

  export type NoticiaUpsertWithWhereUniqueWithoutSeccionInput = {
    where: NoticiaWhereUniqueInput
    update: XOR<NoticiaUpdateWithoutSeccionInput, NoticiaUncheckedUpdateWithoutSeccionInput>
    create: XOR<NoticiaCreateWithoutSeccionInput, NoticiaUncheckedCreateWithoutSeccionInput>
  }

  export type NoticiaUpdateWithWhereUniqueWithoutSeccionInput = {
    where: NoticiaWhereUniqueInput
    data: XOR<NoticiaUpdateWithoutSeccionInput, NoticiaUncheckedUpdateWithoutSeccionInput>
  }

  export type NoticiaUpdateManyWithWhereWithoutSeccionInput = {
    where: NoticiaScalarWhereInput
    data: XOR<NoticiaUpdateManyMutationInput, NoticiaUncheckedUpdateManyWithoutSeccionInput>
  }

  export type NoticiaScalarWhereInput = {
    AND?: NoticiaScalarWhereInput | NoticiaScalarWhereInput[]
    OR?: NoticiaScalarWhereInput[]
    NOT?: NoticiaScalarWhereInput | NoticiaScalarWhereInput[]
    id?: IntFilter<"Noticia"> | number
    titulo?: StringFilter<"Noticia"> | string
    contenido?: StringFilter<"Noticia"> | string
    resumen?: StringFilter<"Noticia"> | string
    autorTexto?: StringFilter<"Noticia"> | string
    autorFoto?: StringFilter<"Noticia"> | string
    destacada?: BoolFilter<"Noticia"> | boolean
    fechaPublicacion?: DateTimeFilter<"Noticia"> | Date | string
    createdAt?: DateTimeFilter<"Noticia"> | Date | string
    updatedAt?: DateTimeFilter<"Noticia"> | Date | string
    seccionId?: IntNullableFilter<"Noticia"> | number | null
  }

  export type UsuarioRolCreateWithoutRolInput = {
    usuario: UsuarioCreateNestedOneWithoutUsuarioRolesInput
  }

  export type UsuarioRolUncheckedCreateWithoutRolInput = {
    usuarioId: number
  }

  export type UsuarioRolCreateOrConnectWithoutRolInput = {
    where: UsuarioRolWhereUniqueInput
    create: XOR<UsuarioRolCreateWithoutRolInput, UsuarioRolUncheckedCreateWithoutRolInput>
  }

  export type UsuarioRolCreateManyRolInputEnvelope = {
    data: UsuarioRolCreateManyRolInput | UsuarioRolCreateManyRolInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioRolUpsertWithWhereUniqueWithoutRolInput = {
    where: UsuarioRolWhereUniqueInput
    update: XOR<UsuarioRolUpdateWithoutRolInput, UsuarioRolUncheckedUpdateWithoutRolInput>
    create: XOR<UsuarioRolCreateWithoutRolInput, UsuarioRolUncheckedCreateWithoutRolInput>
  }

  export type UsuarioRolUpdateWithWhereUniqueWithoutRolInput = {
    where: UsuarioRolWhereUniqueInput
    data: XOR<UsuarioRolUpdateWithoutRolInput, UsuarioRolUncheckedUpdateWithoutRolInput>
  }

  export type UsuarioRolUpdateManyWithWhereWithoutRolInput = {
    where: UsuarioRolScalarWhereInput
    data: XOR<UsuarioRolUpdateManyMutationInput, UsuarioRolUncheckedUpdateManyWithoutRolInput>
  }

  export type UsuarioRolScalarWhereInput = {
    AND?: UsuarioRolScalarWhereInput | UsuarioRolScalarWhereInput[]
    OR?: UsuarioRolScalarWhereInput[]
    NOT?: UsuarioRolScalarWhereInput | UsuarioRolScalarWhereInput[]
    usuarioId?: IntFilter<"UsuarioRol"> | number
    rolId?: IntFilter<"UsuarioRol"> | number
  }

  export type UsuarioRolCreateWithoutUsuarioInput = {
    rol: RolCreateNestedOneWithoutUsuarioRolesInput
  }

  export type UsuarioRolUncheckedCreateWithoutUsuarioInput = {
    rolId: number
  }

  export type UsuarioRolCreateOrConnectWithoutUsuarioInput = {
    where: UsuarioRolWhereUniqueInput
    create: XOR<UsuarioRolCreateWithoutUsuarioInput, UsuarioRolUncheckedCreateWithoutUsuarioInput>
  }

  export type UsuarioRolCreateManyUsuarioInputEnvelope = {
    data: UsuarioRolCreateManyUsuarioInput | UsuarioRolCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioRolUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: UsuarioRolWhereUniqueInput
    update: XOR<UsuarioRolUpdateWithoutUsuarioInput, UsuarioRolUncheckedUpdateWithoutUsuarioInput>
    create: XOR<UsuarioRolCreateWithoutUsuarioInput, UsuarioRolUncheckedCreateWithoutUsuarioInput>
  }

  export type UsuarioRolUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: UsuarioRolWhereUniqueInput
    data: XOR<UsuarioRolUpdateWithoutUsuarioInput, UsuarioRolUncheckedUpdateWithoutUsuarioInput>
  }

  export type UsuarioRolUpdateManyWithWhereWithoutUsuarioInput = {
    where: UsuarioRolScalarWhereInput
    data: XOR<UsuarioRolUpdateManyMutationInput, UsuarioRolUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type UsuarioCreateWithoutUsuarioRolesInput = {
    username: string
    password: string
    createdAt?: Date | string
  }

  export type UsuarioUncheckedCreateWithoutUsuarioRolesInput = {
    id?: number
    username: string
    password: string
    createdAt?: Date | string
  }

  export type UsuarioCreateOrConnectWithoutUsuarioRolesInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutUsuarioRolesInput, UsuarioUncheckedCreateWithoutUsuarioRolesInput>
  }

  export type RolCreateWithoutUsuarioRolesInput = {
    nombre: string
  }

  export type RolUncheckedCreateWithoutUsuarioRolesInput = {
    id?: number
    nombre: string
  }

  export type RolCreateOrConnectWithoutUsuarioRolesInput = {
    where: RolWhereUniqueInput
    create: XOR<RolCreateWithoutUsuarioRolesInput, RolUncheckedCreateWithoutUsuarioRolesInput>
  }

  export type UsuarioUpsertWithoutUsuarioRolesInput = {
    update: XOR<UsuarioUpdateWithoutUsuarioRolesInput, UsuarioUncheckedUpdateWithoutUsuarioRolesInput>
    create: XOR<UsuarioCreateWithoutUsuarioRolesInput, UsuarioUncheckedCreateWithoutUsuarioRolesInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutUsuarioRolesInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutUsuarioRolesInput, UsuarioUncheckedUpdateWithoutUsuarioRolesInput>
  }

  export type UsuarioUpdateWithoutUsuarioRolesInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioUncheckedUpdateWithoutUsuarioRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolUpsertWithoutUsuarioRolesInput = {
    update: XOR<RolUpdateWithoutUsuarioRolesInput, RolUncheckedUpdateWithoutUsuarioRolesInput>
    create: XOR<RolCreateWithoutUsuarioRolesInput, RolUncheckedCreateWithoutUsuarioRolesInput>
    where?: RolWhereInput
  }

  export type RolUpdateToOneWithWhereWithoutUsuarioRolesInput = {
    where?: RolWhereInput
    data: XOR<RolUpdateWithoutUsuarioRolesInput, RolUncheckedUpdateWithoutUsuarioRolesInput>
  }

  export type RolUpdateWithoutUsuarioRolesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type RolUncheckedUpdateWithoutUsuarioRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type OpinionCreateWithoutColumnistaInput = {
    titulo: string
    contenido: string
    fecha?: Date | string
    destacado?: boolean
    media?: MediaCreateNestedManyWithoutOpinionInput
  }

  export type OpinionUncheckedCreateWithoutColumnistaInput = {
    id?: number
    titulo: string
    contenido: string
    fecha?: Date | string
    destacado?: boolean
    media?: MediaUncheckedCreateNestedManyWithoutOpinionInput
  }

  export type OpinionCreateOrConnectWithoutColumnistaInput = {
    where: OpinionWhereUniqueInput
    create: XOR<OpinionCreateWithoutColumnistaInput, OpinionUncheckedCreateWithoutColumnistaInput>
  }

  export type OpinionCreateManyColumnistaInputEnvelope = {
    data: OpinionCreateManyColumnistaInput | OpinionCreateManyColumnistaInput[]
    skipDuplicates?: boolean
  }

  export type OpinionUpsertWithWhereUniqueWithoutColumnistaInput = {
    where: OpinionWhereUniqueInput
    update: XOR<OpinionUpdateWithoutColumnistaInput, OpinionUncheckedUpdateWithoutColumnistaInput>
    create: XOR<OpinionCreateWithoutColumnistaInput, OpinionUncheckedCreateWithoutColumnistaInput>
  }

  export type OpinionUpdateWithWhereUniqueWithoutColumnistaInput = {
    where: OpinionWhereUniqueInput
    data: XOR<OpinionUpdateWithoutColumnistaInput, OpinionUncheckedUpdateWithoutColumnistaInput>
  }

  export type OpinionUpdateManyWithWhereWithoutColumnistaInput = {
    where: OpinionScalarWhereInput
    data: XOR<OpinionUpdateManyMutationInput, OpinionUncheckedUpdateManyWithoutColumnistaInput>
  }

  export type OpinionScalarWhereInput = {
    AND?: OpinionScalarWhereInput | OpinionScalarWhereInput[]
    OR?: OpinionScalarWhereInput[]
    NOT?: OpinionScalarWhereInput | OpinionScalarWhereInput[]
    id?: IntFilter<"Opinion"> | number
    titulo?: StringFilter<"Opinion"> | string
    contenido?: StringFilter<"Opinion"> | string
    fecha?: DateTimeFilter<"Opinion"> | Date | string
    columnistaId?: IntFilter<"Opinion"> | number
    destacado?: BoolFilter<"Opinion"> | boolean
  }

  export type MediaCreateWithoutEditorialInput = {
    url: string
    tipo: $Enums.MediaTipo
    descripcion?: string | null
    noticiaMedia?: NoticiaMediaCreateNestedManyWithoutMediaInput
    opinion?: OpinionCreateNestedOneWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutEditorialInput = {
    id?: number
    url: string
    tipo: $Enums.MediaTipo
    descripcion?: string | null
    opinionId?: number | null
    noticiaMedia?: NoticiaMediaUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutEditorialInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutEditorialInput, MediaUncheckedCreateWithoutEditorialInput>
  }

  export type MediaCreateManyEditorialInputEnvelope = {
    data: MediaCreateManyEditorialInput | MediaCreateManyEditorialInput[]
    skipDuplicates?: boolean
  }

  export type MediaUpsertWithWhereUniqueWithoutEditorialInput = {
    where: MediaWhereUniqueInput
    update: XOR<MediaUpdateWithoutEditorialInput, MediaUncheckedUpdateWithoutEditorialInput>
    create: XOR<MediaCreateWithoutEditorialInput, MediaUncheckedCreateWithoutEditorialInput>
  }

  export type MediaUpdateWithWhereUniqueWithoutEditorialInput = {
    where: MediaWhereUniqueInput
    data: XOR<MediaUpdateWithoutEditorialInput, MediaUncheckedUpdateWithoutEditorialInput>
  }

  export type MediaUpdateManyWithWhereWithoutEditorialInput = {
    where: MediaScalarWhereInput
    data: XOR<MediaUpdateManyMutationInput, MediaUncheckedUpdateManyWithoutEditorialInput>
  }

  export type MediaScalarWhereInput = {
    AND?: MediaScalarWhereInput | MediaScalarWhereInput[]
    OR?: MediaScalarWhereInput[]
    NOT?: MediaScalarWhereInput | MediaScalarWhereInput[]
    id?: IntFilter<"Media"> | number
    url?: StringFilter<"Media"> | string
    tipo?: EnumMediaTipoFilter<"Media"> | $Enums.MediaTipo
    descripcion?: StringNullableFilter<"Media"> | string | null
    editorialId?: IntNullableFilter<"Media"> | number | null
    opinionId?: IntNullableFilter<"Media"> | number | null
  }

  export type ColumnistaCreateWithoutOpinionesInput = {
    nombre: string
    bio: string
    fotoUrl?: string | null
    redes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ColumnistaUncheckedCreateWithoutOpinionesInput = {
    id?: number
    nombre: string
    bio: string
    fotoUrl?: string | null
    redes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ColumnistaCreateOrConnectWithoutOpinionesInput = {
    where: ColumnistaWhereUniqueInput
    create: XOR<ColumnistaCreateWithoutOpinionesInput, ColumnistaUncheckedCreateWithoutOpinionesInput>
  }

  export type MediaCreateWithoutOpinionInput = {
    url: string
    tipo: $Enums.MediaTipo
    descripcion?: string | null
    noticiaMedia?: NoticiaMediaCreateNestedManyWithoutMediaInput
    editorial?: EditorialCreateNestedOneWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutOpinionInput = {
    id?: number
    url: string
    tipo: $Enums.MediaTipo
    descripcion?: string | null
    editorialId?: number | null
    noticiaMedia?: NoticiaMediaUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutOpinionInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutOpinionInput, MediaUncheckedCreateWithoutOpinionInput>
  }

  export type MediaCreateManyOpinionInputEnvelope = {
    data: MediaCreateManyOpinionInput | MediaCreateManyOpinionInput[]
    skipDuplicates?: boolean
  }

  export type ColumnistaUpsertWithoutOpinionesInput = {
    update: XOR<ColumnistaUpdateWithoutOpinionesInput, ColumnistaUncheckedUpdateWithoutOpinionesInput>
    create: XOR<ColumnistaCreateWithoutOpinionesInput, ColumnistaUncheckedCreateWithoutOpinionesInput>
    where?: ColumnistaWhereInput
  }

  export type ColumnistaUpdateToOneWithWhereWithoutOpinionesInput = {
    where?: ColumnistaWhereInput
    data: XOR<ColumnistaUpdateWithoutOpinionesInput, ColumnistaUncheckedUpdateWithoutOpinionesInput>
  }

  export type ColumnistaUpdateWithoutOpinionesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    redes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColumnistaUncheckedUpdateWithoutOpinionesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    redes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaUpsertWithWhereUniqueWithoutOpinionInput = {
    where: MediaWhereUniqueInput
    update: XOR<MediaUpdateWithoutOpinionInput, MediaUncheckedUpdateWithoutOpinionInput>
    create: XOR<MediaCreateWithoutOpinionInput, MediaUncheckedCreateWithoutOpinionInput>
  }

  export type MediaUpdateWithWhereUniqueWithoutOpinionInput = {
    where: MediaWhereUniqueInput
    data: XOR<MediaUpdateWithoutOpinionInput, MediaUncheckedUpdateWithoutOpinionInput>
  }

  export type MediaUpdateManyWithWhereWithoutOpinionInput = {
    where: MediaScalarWhereInput
    data: XOR<MediaUpdateManyMutationInput, MediaUncheckedUpdateManyWithoutOpinionInput>
  }

  export type NoticiaMediaCreateWithoutMediaInput = {
    noticia: NoticiaCreateNestedOneWithoutNoticiaMediaInput
  }

  export type NoticiaMediaUncheckedCreateWithoutMediaInput = {
    noticiaId: number
  }

  export type NoticiaMediaCreateOrConnectWithoutMediaInput = {
    where: NoticiaMediaWhereUniqueInput
    create: XOR<NoticiaMediaCreateWithoutMediaInput, NoticiaMediaUncheckedCreateWithoutMediaInput>
  }

  export type NoticiaMediaCreateManyMediaInputEnvelope = {
    data: NoticiaMediaCreateManyMediaInput | NoticiaMediaCreateManyMediaInput[]
    skipDuplicates?: boolean
  }

  export type EditorialCreateWithoutMediaInput = {
    titulo: string
    contenido: string
    fecha?: Date | string
    autor?: string | null
  }

  export type EditorialUncheckedCreateWithoutMediaInput = {
    id?: number
    titulo: string
    contenido: string
    fecha?: Date | string
    autor?: string | null
  }

  export type EditorialCreateOrConnectWithoutMediaInput = {
    where: EditorialWhereUniqueInput
    create: XOR<EditorialCreateWithoutMediaInput, EditorialUncheckedCreateWithoutMediaInput>
  }

  export type OpinionCreateWithoutMediaInput = {
    titulo: string
    contenido: string
    fecha?: Date | string
    destacado?: boolean
    columnista: ColumnistaCreateNestedOneWithoutOpinionesInput
  }

  export type OpinionUncheckedCreateWithoutMediaInput = {
    id?: number
    titulo: string
    contenido: string
    fecha?: Date | string
    columnistaId: number
    destacado?: boolean
  }

  export type OpinionCreateOrConnectWithoutMediaInput = {
    where: OpinionWhereUniqueInput
    create: XOR<OpinionCreateWithoutMediaInput, OpinionUncheckedCreateWithoutMediaInput>
  }

  export type NoticiaMediaUpsertWithWhereUniqueWithoutMediaInput = {
    where: NoticiaMediaWhereUniqueInput
    update: XOR<NoticiaMediaUpdateWithoutMediaInput, NoticiaMediaUncheckedUpdateWithoutMediaInput>
    create: XOR<NoticiaMediaCreateWithoutMediaInput, NoticiaMediaUncheckedCreateWithoutMediaInput>
  }

  export type NoticiaMediaUpdateWithWhereUniqueWithoutMediaInput = {
    where: NoticiaMediaWhereUniqueInput
    data: XOR<NoticiaMediaUpdateWithoutMediaInput, NoticiaMediaUncheckedUpdateWithoutMediaInput>
  }

  export type NoticiaMediaUpdateManyWithWhereWithoutMediaInput = {
    where: NoticiaMediaScalarWhereInput
    data: XOR<NoticiaMediaUpdateManyMutationInput, NoticiaMediaUncheckedUpdateManyWithoutMediaInput>
  }

  export type NoticiaMediaScalarWhereInput = {
    AND?: NoticiaMediaScalarWhereInput | NoticiaMediaScalarWhereInput[]
    OR?: NoticiaMediaScalarWhereInput[]
    NOT?: NoticiaMediaScalarWhereInput | NoticiaMediaScalarWhereInput[]
    noticiaId?: IntFilter<"NoticiaMedia"> | number
    mediaId?: IntFilter<"NoticiaMedia"> | number
  }

  export type EditorialUpsertWithoutMediaInput = {
    update: XOR<EditorialUpdateWithoutMediaInput, EditorialUncheckedUpdateWithoutMediaInput>
    create: XOR<EditorialCreateWithoutMediaInput, EditorialUncheckedCreateWithoutMediaInput>
    where?: EditorialWhereInput
  }

  export type EditorialUpdateToOneWithWhereWithoutMediaInput = {
    where?: EditorialWhereInput
    data: XOR<EditorialUpdateWithoutMediaInput, EditorialUncheckedUpdateWithoutMediaInput>
  }

  export type EditorialUpdateWithoutMediaInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    autor?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EditorialUncheckedUpdateWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    autor?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OpinionUpsertWithoutMediaInput = {
    update: XOR<OpinionUpdateWithoutMediaInput, OpinionUncheckedUpdateWithoutMediaInput>
    create: XOR<OpinionCreateWithoutMediaInput, OpinionUncheckedCreateWithoutMediaInput>
    where?: OpinionWhereInput
  }

  export type OpinionUpdateToOneWithWhereWithoutMediaInput = {
    where?: OpinionWhereInput
    data: XOR<OpinionUpdateWithoutMediaInput, OpinionUncheckedUpdateWithoutMediaInput>
  }

  export type OpinionUpdateWithoutMediaInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    destacado?: BoolFieldUpdateOperationsInput | boolean
    columnista?: ColumnistaUpdateOneRequiredWithoutOpinionesNestedInput
  }

  export type OpinionUncheckedUpdateWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    columnistaId?: IntFieldUpdateOperationsInput | number
    destacado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SeccionCreateWithoutNoticiasInput = {
    nombre: string
  }

  export type SeccionUncheckedCreateWithoutNoticiasInput = {
    id?: number
    nombre: string
  }

  export type SeccionCreateOrConnectWithoutNoticiasInput = {
    where: SeccionWhereUniqueInput
    create: XOR<SeccionCreateWithoutNoticiasInput, SeccionUncheckedCreateWithoutNoticiasInput>
  }

  export type NoticiaMediaCreateWithoutNoticiaInput = {
    media: MediaCreateNestedOneWithoutNoticiaMediaInput
  }

  export type NoticiaMediaUncheckedCreateWithoutNoticiaInput = {
    mediaId: number
  }

  export type NoticiaMediaCreateOrConnectWithoutNoticiaInput = {
    where: NoticiaMediaWhereUniqueInput
    create: XOR<NoticiaMediaCreateWithoutNoticiaInput, NoticiaMediaUncheckedCreateWithoutNoticiaInput>
  }

  export type NoticiaMediaCreateManyNoticiaInputEnvelope = {
    data: NoticiaMediaCreateManyNoticiaInput | NoticiaMediaCreateManyNoticiaInput[]
    skipDuplicates?: boolean
  }

  export type SeccionUpsertWithoutNoticiasInput = {
    update: XOR<SeccionUpdateWithoutNoticiasInput, SeccionUncheckedUpdateWithoutNoticiasInput>
    create: XOR<SeccionCreateWithoutNoticiasInput, SeccionUncheckedCreateWithoutNoticiasInput>
    where?: SeccionWhereInput
  }

  export type SeccionUpdateToOneWithWhereWithoutNoticiasInput = {
    where?: SeccionWhereInput
    data: XOR<SeccionUpdateWithoutNoticiasInput, SeccionUncheckedUpdateWithoutNoticiasInput>
  }

  export type SeccionUpdateWithoutNoticiasInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type SeccionUncheckedUpdateWithoutNoticiasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type NoticiaMediaUpsertWithWhereUniqueWithoutNoticiaInput = {
    where: NoticiaMediaWhereUniqueInput
    update: XOR<NoticiaMediaUpdateWithoutNoticiaInput, NoticiaMediaUncheckedUpdateWithoutNoticiaInput>
    create: XOR<NoticiaMediaCreateWithoutNoticiaInput, NoticiaMediaUncheckedCreateWithoutNoticiaInput>
  }

  export type NoticiaMediaUpdateWithWhereUniqueWithoutNoticiaInput = {
    where: NoticiaMediaWhereUniqueInput
    data: XOR<NoticiaMediaUpdateWithoutNoticiaInput, NoticiaMediaUncheckedUpdateWithoutNoticiaInput>
  }

  export type NoticiaMediaUpdateManyWithWhereWithoutNoticiaInput = {
    where: NoticiaMediaScalarWhereInput
    data: XOR<NoticiaMediaUpdateManyMutationInput, NoticiaMediaUncheckedUpdateManyWithoutNoticiaInput>
  }

  export type NoticiaCreateWithoutNoticiaMediaInput = {
    titulo: string
    contenido: string
    resumen: string
    autorTexto: string
    autorFoto: string
    destacada?: boolean
    fechaPublicacion?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    seccion?: SeccionCreateNestedOneWithoutNoticiasInput
  }

  export type NoticiaUncheckedCreateWithoutNoticiaMediaInput = {
    id?: number
    titulo: string
    contenido: string
    resumen: string
    autorTexto: string
    autorFoto: string
    destacada?: boolean
    fechaPublicacion?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    seccionId?: number | null
  }

  export type NoticiaCreateOrConnectWithoutNoticiaMediaInput = {
    where: NoticiaWhereUniqueInput
    create: XOR<NoticiaCreateWithoutNoticiaMediaInput, NoticiaUncheckedCreateWithoutNoticiaMediaInput>
  }

  export type MediaCreateWithoutNoticiaMediaInput = {
    url: string
    tipo: $Enums.MediaTipo
    descripcion?: string | null
    editorial?: EditorialCreateNestedOneWithoutMediaInput
    opinion?: OpinionCreateNestedOneWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutNoticiaMediaInput = {
    id?: number
    url: string
    tipo: $Enums.MediaTipo
    descripcion?: string | null
    editorialId?: number | null
    opinionId?: number | null
  }

  export type MediaCreateOrConnectWithoutNoticiaMediaInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutNoticiaMediaInput, MediaUncheckedCreateWithoutNoticiaMediaInput>
  }

  export type NoticiaUpsertWithoutNoticiaMediaInput = {
    update: XOR<NoticiaUpdateWithoutNoticiaMediaInput, NoticiaUncheckedUpdateWithoutNoticiaMediaInput>
    create: XOR<NoticiaCreateWithoutNoticiaMediaInput, NoticiaUncheckedCreateWithoutNoticiaMediaInput>
    where?: NoticiaWhereInput
  }

  export type NoticiaUpdateToOneWithWhereWithoutNoticiaMediaInput = {
    where?: NoticiaWhereInput
    data: XOR<NoticiaUpdateWithoutNoticiaMediaInput, NoticiaUncheckedUpdateWithoutNoticiaMediaInput>
  }

  export type NoticiaUpdateWithoutNoticiaMediaInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    resumen?: StringFieldUpdateOperationsInput | string
    autorTexto?: StringFieldUpdateOperationsInput | string
    autorFoto?: StringFieldUpdateOperationsInput | string
    destacada?: BoolFieldUpdateOperationsInput | boolean
    fechaPublicacion?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seccion?: SeccionUpdateOneWithoutNoticiasNestedInput
  }

  export type NoticiaUncheckedUpdateWithoutNoticiaMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    resumen?: StringFieldUpdateOperationsInput | string
    autorTexto?: StringFieldUpdateOperationsInput | string
    autorFoto?: StringFieldUpdateOperationsInput | string
    destacada?: BoolFieldUpdateOperationsInput | boolean
    fechaPublicacion?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seccionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MediaUpsertWithoutNoticiaMediaInput = {
    update: XOR<MediaUpdateWithoutNoticiaMediaInput, MediaUncheckedUpdateWithoutNoticiaMediaInput>
    create: XOR<MediaCreateWithoutNoticiaMediaInput, MediaUncheckedCreateWithoutNoticiaMediaInput>
    where?: MediaWhereInput
  }

  export type MediaUpdateToOneWithWhereWithoutNoticiaMediaInput = {
    where?: MediaWhereInput
    data: XOR<MediaUpdateWithoutNoticiaMediaInput, MediaUncheckedUpdateWithoutNoticiaMediaInput>
  }

  export type MediaUpdateWithoutNoticiaMediaInput = {
    url?: StringFieldUpdateOperationsInput | string
    tipo?: EnumMediaTipoFieldUpdateOperationsInput | $Enums.MediaTipo
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: EditorialUpdateOneWithoutMediaNestedInput
    opinion?: OpinionUpdateOneWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutNoticiaMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    tipo?: EnumMediaTipoFieldUpdateOperationsInput | $Enums.MediaTipo
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    editorialId?: NullableIntFieldUpdateOperationsInput | number | null
    opinionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NoticiaCreateManySeccionInput = {
    id?: number
    titulo: string
    contenido: string
    resumen: string
    autorTexto: string
    autorFoto: string
    destacada?: boolean
    fechaPublicacion?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NoticiaUpdateWithoutSeccionInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    resumen?: StringFieldUpdateOperationsInput | string
    autorTexto?: StringFieldUpdateOperationsInput | string
    autorFoto?: StringFieldUpdateOperationsInput | string
    destacada?: BoolFieldUpdateOperationsInput | boolean
    fechaPublicacion?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noticiaMedia?: NoticiaMediaUpdateManyWithoutNoticiaNestedInput
  }

  export type NoticiaUncheckedUpdateWithoutSeccionInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    resumen?: StringFieldUpdateOperationsInput | string
    autorTexto?: StringFieldUpdateOperationsInput | string
    autorFoto?: StringFieldUpdateOperationsInput | string
    destacada?: BoolFieldUpdateOperationsInput | boolean
    fechaPublicacion?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noticiaMedia?: NoticiaMediaUncheckedUpdateManyWithoutNoticiaNestedInput
  }

  export type NoticiaUncheckedUpdateManyWithoutSeccionInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    resumen?: StringFieldUpdateOperationsInput | string
    autorTexto?: StringFieldUpdateOperationsInput | string
    autorFoto?: StringFieldUpdateOperationsInput | string
    destacada?: BoolFieldUpdateOperationsInput | boolean
    fechaPublicacion?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioRolCreateManyRolInput = {
    usuarioId: number
  }

  export type UsuarioRolUpdateWithoutRolInput = {
    usuario?: UsuarioUpdateOneRequiredWithoutUsuarioRolesNestedInput
  }

  export type UsuarioRolUncheckedUpdateWithoutRolInput = {
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioRolUncheckedUpdateManyWithoutRolInput = {
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioRolCreateManyUsuarioInput = {
    rolId: number
  }

  export type UsuarioRolUpdateWithoutUsuarioInput = {
    rol?: RolUpdateOneRequiredWithoutUsuarioRolesNestedInput
  }

  export type UsuarioRolUncheckedUpdateWithoutUsuarioInput = {
    rolId?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioRolUncheckedUpdateManyWithoutUsuarioInput = {
    rolId?: IntFieldUpdateOperationsInput | number
  }

  export type OpinionCreateManyColumnistaInput = {
    id?: number
    titulo: string
    contenido: string
    fecha?: Date | string
    destacado?: boolean
  }

  export type OpinionUpdateWithoutColumnistaInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    destacado?: BoolFieldUpdateOperationsInput | boolean
    media?: MediaUpdateManyWithoutOpinionNestedInput
  }

  export type OpinionUncheckedUpdateWithoutColumnistaInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    destacado?: BoolFieldUpdateOperationsInput | boolean
    media?: MediaUncheckedUpdateManyWithoutOpinionNestedInput
  }

  export type OpinionUncheckedUpdateManyWithoutColumnistaInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    destacado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MediaCreateManyEditorialInput = {
    id?: number
    url: string
    tipo: $Enums.MediaTipo
    descripcion?: string | null
    opinionId?: number | null
  }

  export type MediaUpdateWithoutEditorialInput = {
    url?: StringFieldUpdateOperationsInput | string
    tipo?: EnumMediaTipoFieldUpdateOperationsInput | $Enums.MediaTipo
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    noticiaMedia?: NoticiaMediaUpdateManyWithoutMediaNestedInput
    opinion?: OpinionUpdateOneWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutEditorialInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    tipo?: EnumMediaTipoFieldUpdateOperationsInput | $Enums.MediaTipo
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    opinionId?: NullableIntFieldUpdateOperationsInput | number | null
    noticiaMedia?: NoticiaMediaUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateManyWithoutEditorialInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    tipo?: EnumMediaTipoFieldUpdateOperationsInput | $Enums.MediaTipo
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    opinionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MediaCreateManyOpinionInput = {
    id?: number
    url: string
    tipo: $Enums.MediaTipo
    descripcion?: string | null
    editorialId?: number | null
  }

  export type MediaUpdateWithoutOpinionInput = {
    url?: StringFieldUpdateOperationsInput | string
    tipo?: EnumMediaTipoFieldUpdateOperationsInput | $Enums.MediaTipo
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    noticiaMedia?: NoticiaMediaUpdateManyWithoutMediaNestedInput
    editorial?: EditorialUpdateOneWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutOpinionInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    tipo?: EnumMediaTipoFieldUpdateOperationsInput | $Enums.MediaTipo
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    editorialId?: NullableIntFieldUpdateOperationsInput | number | null
    noticiaMedia?: NoticiaMediaUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateManyWithoutOpinionInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    tipo?: EnumMediaTipoFieldUpdateOperationsInput | $Enums.MediaTipo
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    editorialId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NoticiaMediaCreateManyMediaInput = {
    noticiaId: number
  }

  export type NoticiaMediaUpdateWithoutMediaInput = {
    noticia?: NoticiaUpdateOneRequiredWithoutNoticiaMediaNestedInput
  }

  export type NoticiaMediaUncheckedUpdateWithoutMediaInput = {
    noticiaId?: IntFieldUpdateOperationsInput | number
  }

  export type NoticiaMediaUncheckedUpdateManyWithoutMediaInput = {
    noticiaId?: IntFieldUpdateOperationsInput | number
  }

  export type NoticiaMediaCreateManyNoticiaInput = {
    mediaId: number
  }

  export type NoticiaMediaUpdateWithoutNoticiaInput = {
    media?: MediaUpdateOneRequiredWithoutNoticiaMediaNestedInput
  }

  export type NoticiaMediaUncheckedUpdateWithoutNoticiaInput = {
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type NoticiaMediaUncheckedUpdateManyWithoutNoticiaInput = {
    mediaId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}